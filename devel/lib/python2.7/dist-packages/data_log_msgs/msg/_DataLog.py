# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_log_msgs/DataLog.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class DataLog(genpy.Message):
  _md5sum = "b0bcca581d42e749460a77b43b4c0423"
  _type = "data_log_msgs/DataLog"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#geometry_msgs/Point[] current_joint_msg
geometry_msgs/Pose RFootFK
geometry_msgs/Pose LFootFK
geometry_msgs/Pose TorsoFK
geometry_msgs/Pose RFootIK
geometry_msgs/Pose LFootIK
geometry_msgs/Pose TorsoIK
geometry_msgs/Point IMUdegrees
geometry_msgs/Inertia baseInertia
geometry_msgs/Inertia LSSPInertia
geometry_msgs/Inertia RSSPInertia
geometry_msgs/Inertia DSPInertia
geometry_msgs/Point ZMPLSSP
geometry_msgs/Point ZMPRSSP
geometry_msgs/Point ZMPDSP
geometry_msgs/Point ZMPLSSP_accZ
geometry_msgs/Point ZMPRSSP_accZ
geometry_msgs/Point ZMPDSP_accZ
geometry_msgs/Point ZMPLSSP_estimate
geometry_msgs/Point ZMPRSSP_estimate
geometry_msgs/Point ZMPDSP_estimate
geometry_msgs/Point COMLSSPrpy
geometry_msgs/Point COMRSSPrpy
geometry_msgs/Point COMDSPrpy
geometry_msgs/Point accelFiltered
geometry_msgs/Point ZMPLSSP_accFil
geometry_msgs/Point ZMPRSSP_accFil
geometry_msgs/Point ZMPDSP_accFil
#float32 LAnklePitch_torqueIn     
float32 LAnklePitch_velocityNow  
float32 LAnklePitch_positionIK   
float32 LAnklePitch_positionNow  
float32 LAnklePitch_refPosFromPos
float32 RAnklePitch_velocityNow  
float32 RAnklePitch_positionIK   
float32 RAnklePitch_positionNow 
float32 RAnklePitch_refPosFromPos
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Inertia
# Mass [kg]
float64 m

# Center of mass [m]
geometry_msgs/Vector3 com

# Inertia Tensor [kg-m^2]
#     | ixx ixy ixz |
# I = | ixy iyy iyz |
#     | ixz iyz izz |
float64 ixx
float64 ixy
float64 ixz
float64 iyy
float64 iyz
float64 izz

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['RFootFK','LFootFK','TorsoFK','RFootIK','LFootIK','TorsoIK','IMUdegrees','baseInertia','LSSPInertia','RSSPInertia','DSPInertia','ZMPLSSP','ZMPRSSP','ZMPDSP','ZMPLSSP_accZ','ZMPRSSP_accZ','ZMPDSP_accZ','ZMPLSSP_estimate','ZMPRSSP_estimate','ZMPDSP_estimate','COMLSSPrpy','COMRSSPrpy','COMDSPrpy','accelFiltered','ZMPLSSP_accFil','ZMPRSSP_accFil','ZMPDSP_accFil','LAnklePitch_velocityNow','LAnklePitch_positionIK','LAnklePitch_positionNow','LAnklePitch_refPosFromPos','RAnklePitch_velocityNow','RAnklePitch_positionIK','RAnklePitch_positionNow','RAnklePitch_refPosFromPos']
  _slot_types = ['geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Point','geometry_msgs/Inertia','geometry_msgs/Inertia','geometry_msgs/Inertia','geometry_msgs/Inertia','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RFootFK,LFootFK,TorsoFK,RFootIK,LFootIK,TorsoIK,IMUdegrees,baseInertia,LSSPInertia,RSSPInertia,DSPInertia,ZMPLSSP,ZMPRSSP,ZMPDSP,ZMPLSSP_accZ,ZMPRSSP_accZ,ZMPDSP_accZ,ZMPLSSP_estimate,ZMPRSSP_estimate,ZMPDSP_estimate,COMLSSPrpy,COMRSSPrpy,COMDSPrpy,accelFiltered,ZMPLSSP_accFil,ZMPRSSP_accFil,ZMPDSP_accFil,LAnklePitch_velocityNow,LAnklePitch_positionIK,LAnklePitch_positionNow,LAnklePitch_refPosFromPos,RAnklePitch_velocityNow,RAnklePitch_positionIK,RAnklePitch_positionNow,RAnklePitch_refPosFromPos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataLog, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.RFootFK is None:
        self.RFootFK = geometry_msgs.msg.Pose()
      if self.LFootFK is None:
        self.LFootFK = geometry_msgs.msg.Pose()
      if self.TorsoFK is None:
        self.TorsoFK = geometry_msgs.msg.Pose()
      if self.RFootIK is None:
        self.RFootIK = geometry_msgs.msg.Pose()
      if self.LFootIK is None:
        self.LFootIK = geometry_msgs.msg.Pose()
      if self.TorsoIK is None:
        self.TorsoIK = geometry_msgs.msg.Pose()
      if self.IMUdegrees is None:
        self.IMUdegrees = geometry_msgs.msg.Point()
      if self.baseInertia is None:
        self.baseInertia = geometry_msgs.msg.Inertia()
      if self.LSSPInertia is None:
        self.LSSPInertia = geometry_msgs.msg.Inertia()
      if self.RSSPInertia is None:
        self.RSSPInertia = geometry_msgs.msg.Inertia()
      if self.DSPInertia is None:
        self.DSPInertia = geometry_msgs.msg.Inertia()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accZ is None:
        self.ZMPLSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accZ is None:
        self.ZMPRSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPDSP_accZ is None:
        self.ZMPDSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPLSSP_estimate is None:
        self.ZMPLSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPRSSP_estimate is None:
        self.ZMPRSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPDSP_estimate is None:
        self.ZMPDSP_estimate = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.accelFiltered is None:
        self.accelFiltered = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accFil is None:
        self.ZMPLSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accFil is None:
        self.ZMPRSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPDSP_accFil is None:
        self.ZMPDSP_accFil = geometry_msgs.msg.Point()
      if self.LAnklePitch_velocityNow is None:
        self.LAnklePitch_velocityNow = 0.
      if self.LAnklePitch_positionIK is None:
        self.LAnklePitch_positionIK = 0.
      if self.LAnklePitch_positionNow is None:
        self.LAnklePitch_positionNow = 0.
      if self.LAnklePitch_refPosFromPos is None:
        self.LAnklePitch_refPosFromPos = 0.
      if self.RAnklePitch_velocityNow is None:
        self.RAnklePitch_velocityNow = 0.
      if self.RAnklePitch_positionIK is None:
        self.RAnklePitch_positionIK = 0.
      if self.RAnklePitch_positionNow is None:
        self.RAnklePitch_positionNow = 0.
      if self.RAnklePitch_refPosFromPos is None:
        self.RAnklePitch_refPosFromPos = 0.
    else:
      self.RFootFK = geometry_msgs.msg.Pose()
      self.LFootFK = geometry_msgs.msg.Pose()
      self.TorsoFK = geometry_msgs.msg.Pose()
      self.RFootIK = geometry_msgs.msg.Pose()
      self.LFootIK = geometry_msgs.msg.Pose()
      self.TorsoIK = geometry_msgs.msg.Pose()
      self.IMUdegrees = geometry_msgs.msg.Point()
      self.baseInertia = geometry_msgs.msg.Inertia()
      self.LSSPInertia = geometry_msgs.msg.Inertia()
      self.RSSPInertia = geometry_msgs.msg.Inertia()
      self.DSPInertia = geometry_msgs.msg.Inertia()
      self.ZMPLSSP = geometry_msgs.msg.Point()
      self.ZMPRSSP = geometry_msgs.msg.Point()
      self.ZMPDSP = geometry_msgs.msg.Point()
      self.ZMPLSSP_accZ = geometry_msgs.msg.Point()
      self.ZMPRSSP_accZ = geometry_msgs.msg.Point()
      self.ZMPDSP_accZ = geometry_msgs.msg.Point()
      self.ZMPLSSP_estimate = geometry_msgs.msg.Point()
      self.ZMPRSSP_estimate = geometry_msgs.msg.Point()
      self.ZMPDSP_estimate = geometry_msgs.msg.Point()
      self.COMLSSPrpy = geometry_msgs.msg.Point()
      self.COMRSSPrpy = geometry_msgs.msg.Point()
      self.COMDSPrpy = geometry_msgs.msg.Point()
      self.accelFiltered = geometry_msgs.msg.Point()
      self.ZMPLSSP_accFil = geometry_msgs.msg.Point()
      self.ZMPRSSP_accFil = geometry_msgs.msg.Point()
      self.ZMPDSP_accFil = geometry_msgs.msg.Point()
      self.LAnklePitch_velocityNow = 0.
      self.LAnklePitch_positionIK = 0.
      self.LAnklePitch_positionNow = 0.
      self.LAnklePitch_refPosFromPos = 0.
      self.RAnklePitch_velocityNow = 0.
      self.RAnklePitch_positionIK = 0.
      self.RAnklePitch_positionNow = 0.
      self.RAnklePitch_refPosFromPos = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_133d8f().pack(_x.RFootFK.position.x, _x.RFootFK.position.y, _x.RFootFK.position.z, _x.RFootFK.orientation.x, _x.RFootFK.orientation.y, _x.RFootFK.orientation.z, _x.RFootFK.orientation.w, _x.LFootFK.position.x, _x.LFootFK.position.y, _x.LFootFK.position.z, _x.LFootFK.orientation.x, _x.LFootFK.orientation.y, _x.LFootFK.orientation.z, _x.LFootFK.orientation.w, _x.TorsoFK.position.x, _x.TorsoFK.position.y, _x.TorsoFK.position.z, _x.TorsoFK.orientation.x, _x.TorsoFK.orientation.y, _x.TorsoFK.orientation.z, _x.TorsoFK.orientation.w, _x.RFootIK.position.x, _x.RFootIK.position.y, _x.RFootIK.position.z, _x.RFootIK.orientation.x, _x.RFootIK.orientation.y, _x.RFootIK.orientation.z, _x.RFootIK.orientation.w, _x.LFootIK.position.x, _x.LFootIK.position.y, _x.LFootIK.position.z, _x.LFootIK.orientation.x, _x.LFootIK.orientation.y, _x.LFootIK.orientation.z, _x.LFootIK.orientation.w, _x.TorsoIK.position.x, _x.TorsoIK.position.y, _x.TorsoIK.position.z, _x.TorsoIK.orientation.x, _x.TorsoIK.orientation.y, _x.TorsoIK.orientation.z, _x.TorsoIK.orientation.w, _x.IMUdegrees.x, _x.IMUdegrees.y, _x.IMUdegrees.z, _x.baseInertia.m, _x.baseInertia.com.x, _x.baseInertia.com.y, _x.baseInertia.com.z, _x.baseInertia.ixx, _x.baseInertia.ixy, _x.baseInertia.ixz, _x.baseInertia.iyy, _x.baseInertia.iyz, _x.baseInertia.izz, _x.LSSPInertia.m, _x.LSSPInertia.com.x, _x.LSSPInertia.com.y, _x.LSSPInertia.com.z, _x.LSSPInertia.ixx, _x.LSSPInertia.ixy, _x.LSSPInertia.ixz, _x.LSSPInertia.iyy, _x.LSSPInertia.iyz, _x.LSSPInertia.izz, _x.RSSPInertia.m, _x.RSSPInertia.com.x, _x.RSSPInertia.com.y, _x.RSSPInertia.com.z, _x.RSSPInertia.ixx, _x.RSSPInertia.ixy, _x.RSSPInertia.ixz, _x.RSSPInertia.iyy, _x.RSSPInertia.iyz, _x.RSSPInertia.izz, _x.DSPInertia.m, _x.DSPInertia.com.x, _x.DSPInertia.com.y, _x.DSPInertia.com.z, _x.DSPInertia.ixx, _x.DSPInertia.ixy, _x.DSPInertia.ixz, _x.DSPInertia.iyy, _x.DSPInertia.iyz, _x.DSPInertia.izz, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.ZMPLSSP_accZ.x, _x.ZMPLSSP_accZ.y, _x.ZMPLSSP_accZ.z, _x.ZMPRSSP_accZ.x, _x.ZMPRSSP_accZ.y, _x.ZMPRSSP_accZ.z, _x.ZMPDSP_accZ.x, _x.ZMPDSP_accZ.y, _x.ZMPDSP_accZ.z, _x.ZMPLSSP_estimate.x, _x.ZMPLSSP_estimate.y, _x.ZMPLSSP_estimate.z, _x.ZMPRSSP_estimate.x, _x.ZMPRSSP_estimate.y, _x.ZMPRSSP_estimate.z, _x.ZMPDSP_estimate.x, _x.ZMPDSP_estimate.y, _x.ZMPDSP_estimate.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.accelFiltered.x, _x.accelFiltered.y, _x.accelFiltered.z, _x.ZMPLSSP_accFil.x, _x.ZMPLSSP_accFil.y, _x.ZMPLSSP_accFil.z, _x.ZMPRSSP_accFil.x, _x.ZMPRSSP_accFil.y, _x.ZMPRSSP_accFil.z, _x.ZMPDSP_accFil.x, _x.ZMPDSP_accFil.y, _x.ZMPDSP_accFil.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RFootFK is None:
        self.RFootFK = geometry_msgs.msg.Pose()
      if self.LFootFK is None:
        self.LFootFK = geometry_msgs.msg.Pose()
      if self.TorsoFK is None:
        self.TorsoFK = geometry_msgs.msg.Pose()
      if self.RFootIK is None:
        self.RFootIK = geometry_msgs.msg.Pose()
      if self.LFootIK is None:
        self.LFootIK = geometry_msgs.msg.Pose()
      if self.TorsoIK is None:
        self.TorsoIK = geometry_msgs.msg.Pose()
      if self.IMUdegrees is None:
        self.IMUdegrees = geometry_msgs.msg.Point()
      if self.baseInertia is None:
        self.baseInertia = geometry_msgs.msg.Inertia()
      if self.LSSPInertia is None:
        self.LSSPInertia = geometry_msgs.msg.Inertia()
      if self.RSSPInertia is None:
        self.RSSPInertia = geometry_msgs.msg.Inertia()
      if self.DSPInertia is None:
        self.DSPInertia = geometry_msgs.msg.Inertia()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accZ is None:
        self.ZMPLSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accZ is None:
        self.ZMPRSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPDSP_accZ is None:
        self.ZMPDSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPLSSP_estimate is None:
        self.ZMPLSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPRSSP_estimate is None:
        self.ZMPRSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPDSP_estimate is None:
        self.ZMPDSP_estimate = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.accelFiltered is None:
        self.accelFiltered = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accFil is None:
        self.ZMPLSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accFil is None:
        self.ZMPRSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPDSP_accFil is None:
        self.ZMPDSP_accFil = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 1096
      (_x.RFootFK.position.x, _x.RFootFK.position.y, _x.RFootFK.position.z, _x.RFootFK.orientation.x, _x.RFootFK.orientation.y, _x.RFootFK.orientation.z, _x.RFootFK.orientation.w, _x.LFootFK.position.x, _x.LFootFK.position.y, _x.LFootFK.position.z, _x.LFootFK.orientation.x, _x.LFootFK.orientation.y, _x.LFootFK.orientation.z, _x.LFootFK.orientation.w, _x.TorsoFK.position.x, _x.TorsoFK.position.y, _x.TorsoFK.position.z, _x.TorsoFK.orientation.x, _x.TorsoFK.orientation.y, _x.TorsoFK.orientation.z, _x.TorsoFK.orientation.w, _x.RFootIK.position.x, _x.RFootIK.position.y, _x.RFootIK.position.z, _x.RFootIK.orientation.x, _x.RFootIK.orientation.y, _x.RFootIK.orientation.z, _x.RFootIK.orientation.w, _x.LFootIK.position.x, _x.LFootIK.position.y, _x.LFootIK.position.z, _x.LFootIK.orientation.x, _x.LFootIK.orientation.y, _x.LFootIK.orientation.z, _x.LFootIK.orientation.w, _x.TorsoIK.position.x, _x.TorsoIK.position.y, _x.TorsoIK.position.z, _x.TorsoIK.orientation.x, _x.TorsoIK.orientation.y, _x.TorsoIK.orientation.z, _x.TorsoIK.orientation.w, _x.IMUdegrees.x, _x.IMUdegrees.y, _x.IMUdegrees.z, _x.baseInertia.m, _x.baseInertia.com.x, _x.baseInertia.com.y, _x.baseInertia.com.z, _x.baseInertia.ixx, _x.baseInertia.ixy, _x.baseInertia.ixz, _x.baseInertia.iyy, _x.baseInertia.iyz, _x.baseInertia.izz, _x.LSSPInertia.m, _x.LSSPInertia.com.x, _x.LSSPInertia.com.y, _x.LSSPInertia.com.z, _x.LSSPInertia.ixx, _x.LSSPInertia.ixy, _x.LSSPInertia.ixz, _x.LSSPInertia.iyy, _x.LSSPInertia.iyz, _x.LSSPInertia.izz, _x.RSSPInertia.m, _x.RSSPInertia.com.x, _x.RSSPInertia.com.y, _x.RSSPInertia.com.z, _x.RSSPInertia.ixx, _x.RSSPInertia.ixy, _x.RSSPInertia.ixz, _x.RSSPInertia.iyy, _x.RSSPInertia.iyz, _x.RSSPInertia.izz, _x.DSPInertia.m, _x.DSPInertia.com.x, _x.DSPInertia.com.y, _x.DSPInertia.com.z, _x.DSPInertia.ixx, _x.DSPInertia.ixy, _x.DSPInertia.ixz, _x.DSPInertia.iyy, _x.DSPInertia.iyz, _x.DSPInertia.izz, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.ZMPLSSP_accZ.x, _x.ZMPLSSP_accZ.y, _x.ZMPLSSP_accZ.z, _x.ZMPRSSP_accZ.x, _x.ZMPRSSP_accZ.y, _x.ZMPRSSP_accZ.z, _x.ZMPDSP_accZ.x, _x.ZMPDSP_accZ.y, _x.ZMPDSP_accZ.z, _x.ZMPLSSP_estimate.x, _x.ZMPLSSP_estimate.y, _x.ZMPLSSP_estimate.z, _x.ZMPRSSP_estimate.x, _x.ZMPRSSP_estimate.y, _x.ZMPRSSP_estimate.z, _x.ZMPDSP_estimate.x, _x.ZMPDSP_estimate.y, _x.ZMPDSP_estimate.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.accelFiltered.x, _x.accelFiltered.y, _x.accelFiltered.z, _x.ZMPLSSP_accFil.x, _x.ZMPLSSP_accFil.y, _x.ZMPLSSP_accFil.z, _x.ZMPRSSP_accFil.x, _x.ZMPRSSP_accFil.y, _x.ZMPRSSP_accFil.z, _x.ZMPDSP_accFil.x, _x.ZMPDSP_accFil.y, _x.ZMPDSP_accFil.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos,) = _get_struct_133d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_133d8f().pack(_x.RFootFK.position.x, _x.RFootFK.position.y, _x.RFootFK.position.z, _x.RFootFK.orientation.x, _x.RFootFK.orientation.y, _x.RFootFK.orientation.z, _x.RFootFK.orientation.w, _x.LFootFK.position.x, _x.LFootFK.position.y, _x.LFootFK.position.z, _x.LFootFK.orientation.x, _x.LFootFK.orientation.y, _x.LFootFK.orientation.z, _x.LFootFK.orientation.w, _x.TorsoFK.position.x, _x.TorsoFK.position.y, _x.TorsoFK.position.z, _x.TorsoFK.orientation.x, _x.TorsoFK.orientation.y, _x.TorsoFK.orientation.z, _x.TorsoFK.orientation.w, _x.RFootIK.position.x, _x.RFootIK.position.y, _x.RFootIK.position.z, _x.RFootIK.orientation.x, _x.RFootIK.orientation.y, _x.RFootIK.orientation.z, _x.RFootIK.orientation.w, _x.LFootIK.position.x, _x.LFootIK.position.y, _x.LFootIK.position.z, _x.LFootIK.orientation.x, _x.LFootIK.orientation.y, _x.LFootIK.orientation.z, _x.LFootIK.orientation.w, _x.TorsoIK.position.x, _x.TorsoIK.position.y, _x.TorsoIK.position.z, _x.TorsoIK.orientation.x, _x.TorsoIK.orientation.y, _x.TorsoIK.orientation.z, _x.TorsoIK.orientation.w, _x.IMUdegrees.x, _x.IMUdegrees.y, _x.IMUdegrees.z, _x.baseInertia.m, _x.baseInertia.com.x, _x.baseInertia.com.y, _x.baseInertia.com.z, _x.baseInertia.ixx, _x.baseInertia.ixy, _x.baseInertia.ixz, _x.baseInertia.iyy, _x.baseInertia.iyz, _x.baseInertia.izz, _x.LSSPInertia.m, _x.LSSPInertia.com.x, _x.LSSPInertia.com.y, _x.LSSPInertia.com.z, _x.LSSPInertia.ixx, _x.LSSPInertia.ixy, _x.LSSPInertia.ixz, _x.LSSPInertia.iyy, _x.LSSPInertia.iyz, _x.LSSPInertia.izz, _x.RSSPInertia.m, _x.RSSPInertia.com.x, _x.RSSPInertia.com.y, _x.RSSPInertia.com.z, _x.RSSPInertia.ixx, _x.RSSPInertia.ixy, _x.RSSPInertia.ixz, _x.RSSPInertia.iyy, _x.RSSPInertia.iyz, _x.RSSPInertia.izz, _x.DSPInertia.m, _x.DSPInertia.com.x, _x.DSPInertia.com.y, _x.DSPInertia.com.z, _x.DSPInertia.ixx, _x.DSPInertia.ixy, _x.DSPInertia.ixz, _x.DSPInertia.iyy, _x.DSPInertia.iyz, _x.DSPInertia.izz, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.ZMPLSSP_accZ.x, _x.ZMPLSSP_accZ.y, _x.ZMPLSSP_accZ.z, _x.ZMPRSSP_accZ.x, _x.ZMPRSSP_accZ.y, _x.ZMPRSSP_accZ.z, _x.ZMPDSP_accZ.x, _x.ZMPDSP_accZ.y, _x.ZMPDSP_accZ.z, _x.ZMPLSSP_estimate.x, _x.ZMPLSSP_estimate.y, _x.ZMPLSSP_estimate.z, _x.ZMPRSSP_estimate.x, _x.ZMPRSSP_estimate.y, _x.ZMPRSSP_estimate.z, _x.ZMPDSP_estimate.x, _x.ZMPDSP_estimate.y, _x.ZMPDSP_estimate.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.accelFiltered.x, _x.accelFiltered.y, _x.accelFiltered.z, _x.ZMPLSSP_accFil.x, _x.ZMPLSSP_accFil.y, _x.ZMPLSSP_accFil.z, _x.ZMPRSSP_accFil.x, _x.ZMPRSSP_accFil.y, _x.ZMPRSSP_accFil.z, _x.ZMPDSP_accFil.x, _x.ZMPDSP_accFil.y, _x.ZMPDSP_accFil.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RFootFK is None:
        self.RFootFK = geometry_msgs.msg.Pose()
      if self.LFootFK is None:
        self.LFootFK = geometry_msgs.msg.Pose()
      if self.TorsoFK is None:
        self.TorsoFK = geometry_msgs.msg.Pose()
      if self.RFootIK is None:
        self.RFootIK = geometry_msgs.msg.Pose()
      if self.LFootIK is None:
        self.LFootIK = geometry_msgs.msg.Pose()
      if self.TorsoIK is None:
        self.TorsoIK = geometry_msgs.msg.Pose()
      if self.IMUdegrees is None:
        self.IMUdegrees = geometry_msgs.msg.Point()
      if self.baseInertia is None:
        self.baseInertia = geometry_msgs.msg.Inertia()
      if self.LSSPInertia is None:
        self.LSSPInertia = geometry_msgs.msg.Inertia()
      if self.RSSPInertia is None:
        self.RSSPInertia = geometry_msgs.msg.Inertia()
      if self.DSPInertia is None:
        self.DSPInertia = geometry_msgs.msg.Inertia()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accZ is None:
        self.ZMPLSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accZ is None:
        self.ZMPRSSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPDSP_accZ is None:
        self.ZMPDSP_accZ = geometry_msgs.msg.Point()
      if self.ZMPLSSP_estimate is None:
        self.ZMPLSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPRSSP_estimate is None:
        self.ZMPRSSP_estimate = geometry_msgs.msg.Point()
      if self.ZMPDSP_estimate is None:
        self.ZMPDSP_estimate = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.accelFiltered is None:
        self.accelFiltered = geometry_msgs.msg.Point()
      if self.ZMPLSSP_accFil is None:
        self.ZMPLSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPRSSP_accFil is None:
        self.ZMPRSSP_accFil = geometry_msgs.msg.Point()
      if self.ZMPDSP_accFil is None:
        self.ZMPDSP_accFil = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 1096
      (_x.RFootFK.position.x, _x.RFootFK.position.y, _x.RFootFK.position.z, _x.RFootFK.orientation.x, _x.RFootFK.orientation.y, _x.RFootFK.orientation.z, _x.RFootFK.orientation.w, _x.LFootFK.position.x, _x.LFootFK.position.y, _x.LFootFK.position.z, _x.LFootFK.orientation.x, _x.LFootFK.orientation.y, _x.LFootFK.orientation.z, _x.LFootFK.orientation.w, _x.TorsoFK.position.x, _x.TorsoFK.position.y, _x.TorsoFK.position.z, _x.TorsoFK.orientation.x, _x.TorsoFK.orientation.y, _x.TorsoFK.orientation.z, _x.TorsoFK.orientation.w, _x.RFootIK.position.x, _x.RFootIK.position.y, _x.RFootIK.position.z, _x.RFootIK.orientation.x, _x.RFootIK.orientation.y, _x.RFootIK.orientation.z, _x.RFootIK.orientation.w, _x.LFootIK.position.x, _x.LFootIK.position.y, _x.LFootIK.position.z, _x.LFootIK.orientation.x, _x.LFootIK.orientation.y, _x.LFootIK.orientation.z, _x.LFootIK.orientation.w, _x.TorsoIK.position.x, _x.TorsoIK.position.y, _x.TorsoIK.position.z, _x.TorsoIK.orientation.x, _x.TorsoIK.orientation.y, _x.TorsoIK.orientation.z, _x.TorsoIK.orientation.w, _x.IMUdegrees.x, _x.IMUdegrees.y, _x.IMUdegrees.z, _x.baseInertia.m, _x.baseInertia.com.x, _x.baseInertia.com.y, _x.baseInertia.com.z, _x.baseInertia.ixx, _x.baseInertia.ixy, _x.baseInertia.ixz, _x.baseInertia.iyy, _x.baseInertia.iyz, _x.baseInertia.izz, _x.LSSPInertia.m, _x.LSSPInertia.com.x, _x.LSSPInertia.com.y, _x.LSSPInertia.com.z, _x.LSSPInertia.ixx, _x.LSSPInertia.ixy, _x.LSSPInertia.ixz, _x.LSSPInertia.iyy, _x.LSSPInertia.iyz, _x.LSSPInertia.izz, _x.RSSPInertia.m, _x.RSSPInertia.com.x, _x.RSSPInertia.com.y, _x.RSSPInertia.com.z, _x.RSSPInertia.ixx, _x.RSSPInertia.ixy, _x.RSSPInertia.ixz, _x.RSSPInertia.iyy, _x.RSSPInertia.iyz, _x.RSSPInertia.izz, _x.DSPInertia.m, _x.DSPInertia.com.x, _x.DSPInertia.com.y, _x.DSPInertia.com.z, _x.DSPInertia.ixx, _x.DSPInertia.ixy, _x.DSPInertia.ixz, _x.DSPInertia.iyy, _x.DSPInertia.iyz, _x.DSPInertia.izz, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.ZMPLSSP_accZ.x, _x.ZMPLSSP_accZ.y, _x.ZMPLSSP_accZ.z, _x.ZMPRSSP_accZ.x, _x.ZMPRSSP_accZ.y, _x.ZMPRSSP_accZ.z, _x.ZMPDSP_accZ.x, _x.ZMPDSP_accZ.y, _x.ZMPDSP_accZ.z, _x.ZMPLSSP_estimate.x, _x.ZMPLSSP_estimate.y, _x.ZMPLSSP_estimate.z, _x.ZMPRSSP_estimate.x, _x.ZMPRSSP_estimate.y, _x.ZMPRSSP_estimate.z, _x.ZMPDSP_estimate.x, _x.ZMPDSP_estimate.y, _x.ZMPDSP_estimate.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.accelFiltered.x, _x.accelFiltered.y, _x.accelFiltered.z, _x.ZMPLSSP_accFil.x, _x.ZMPLSSP_accFil.y, _x.ZMPLSSP_accFil.z, _x.ZMPRSSP_accFil.x, _x.ZMPRSSP_accFil.y, _x.ZMPRSSP_accFil.z, _x.ZMPDSP_accFil.x, _x.ZMPDSP_accFil.y, _x.ZMPDSP_accFil.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos,) = _get_struct_133d8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_133d8f = None
def _get_struct_133d8f():
    global _struct_133d8f
    if _struct_133d8f is None:
        _struct_133d8f = struct.Struct("<133d8f")
    return _struct_133d8f
