# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humanoid_league_msgs/TeamData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_league_msgs.msg
import std_msgs.msg

class TeamData(genpy.Message):
  _md5sum = "3c1658268445f044e3a6e26e5ab92357"
  _type = "humanoid_league_msgs/TeamData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message contains all information provided by the mitecom standard for team communication.
# Everything is in meters (ROS standard) not to be confused with millimeters (mitecom standard)!
# Set belief values to 0 if object was not recognized.
# More information here: https://github.com/fumanoids/mitecom

std_msgs/Header header

# Every value is an array because we can have multiple robots communicating with us.
# The values match with the robot ids
uint8[] robot_ids

uint8 ROLE_IDLING=0
uint8 ROLE_OTHER=1
uint8 ROLE_STRIKER=2
uint8 ROLE_SUPPORTER=3
uint8 ROLE_DEFENDER=4
uint8 ROLE_GOALIE=5
uint8[] role

uint8 ACTION_UNDEFINED=0
uint8 ACTION_POSITIONING=1
uint8 ACTION_GOING_TO_BALL=2
uint8 ACTION_TRYING_TO_SCORE=3
uint8 ACTION_WAITING=4
uint8[] action

uint8 STATE_INACTIVE=0
uint8 STATE_ACTIVE=1
uint8 STATE_PENALIZED=2
uint8[] state

# Absolute position values
geometry_msgs/Pose2D[] robot_positions

# Relative ball position, theta of Pose2D is not used
Position2D[] ball_relative

# Relative position of the opponent goal, theta of Pose2D is not used
# This is helpful if the robot has no global position, but sees the goal
Position2D[] oppgoal_relative

# Positions of opponent robots, if they are recognized
# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot
Position2D[] opponent_robot_a
Position2D[] opponent_robot_b
Position2D[] opponent_robot_c
Position2D[] opponent_robot_d

# Positions of team robots, if they are recognized
# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot
Position2D[] team_robot_a
Position2D[] team_robot_b
Position2D[] team_robot_c

float32[] avg_walking_speed
float32[] time_to_position_at_ball
float32[] max_kicking_distance

# Strategy over which side the team tries to attack
# Especially useful during a kickoff
uint8 UNSPECIFIED=0
uint8 LEFT=1
uint8 RIGHT=2
uint8 CENTER=3
uint8[] offensive_side
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: humanoid_league_msgs/Position2D
# The position system is the same as mitecom. The following part is taken from the mitecom documentation:
# https://github.com/fumanoids/mitecom
# The origin of the absolute coordinate center is the center of the middle
# circle (center of field). The x axis points towards the opponent goal, the
# y axis to the left.
#
#      y
#      ^       ______________________
#      |    M  |          |          |  O
#      |    Y  |_ -x, y   |   x, y  _|  P
#      |    G  | |        |        | |  P
# 0    +    O  | |       ( )       | |  G
#      |    A  |_|        |        |_|  O
#      |    L  |  -x,-y   |   x,-y   |  A
#      |       |__________|__________|  L
#      |
#      +------------------+--------------> x
#                         0
#
# The 0 value of the orientation is pointing to the opponent side (right side in the image).
# The value increases counter clockwise
# Everything in meters (because it is the ROS standard)

# The header is included to get the time stamp for later use in tf
std_msgs/Header header

geometry_msgs/Pose2D pose
# A certainty rating between 0 and 1, where 1 is the surest.
float32 confidence
"""
  # Pseudo-constants
  ROLE_IDLING = 0
  ROLE_OTHER = 1
  ROLE_STRIKER = 2
  ROLE_SUPPORTER = 3
  ROLE_DEFENDER = 4
  ROLE_GOALIE = 5
  ACTION_UNDEFINED = 0
  ACTION_POSITIONING = 1
  ACTION_GOING_TO_BALL = 2
  ACTION_TRYING_TO_SCORE = 3
  ACTION_WAITING = 4
  STATE_INACTIVE = 0
  STATE_ACTIVE = 1
  STATE_PENALIZED = 2
  UNSPECIFIED = 0
  LEFT = 1
  RIGHT = 2
  CENTER = 3

  __slots__ = ['header','robot_ids','role','action','state','robot_positions','ball_relative','oppgoal_relative','opponent_robot_a','opponent_robot_b','opponent_robot_c','opponent_robot_d','team_robot_a','team_robot_b','team_robot_c','avg_walking_speed','time_to_position_at_ball','max_kicking_distance','offensive_side']
  _slot_types = ['std_msgs/Header','uint8[]','uint8[]','uint8[]','uint8[]','geometry_msgs/Pose2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','humanoid_league_msgs/Position2D[]','float32[]','float32[]','float32[]','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,robot_ids,role,action,state,robot_positions,ball_relative,oppgoal_relative,opponent_robot_a,opponent_robot_b,opponent_robot_c,opponent_robot_d,team_robot_a,team_robot_b,team_robot_c,avg_walking_speed,time_to_position_at_ball,max_kicking_distance,offensive_side

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TeamData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_ids is None:
        self.robot_ids = b''
      if self.role is None:
        self.role = b''
      if self.action is None:
        self.action = b''
      if self.state is None:
        self.state = b''
      if self.robot_positions is None:
        self.robot_positions = []
      if self.ball_relative is None:
        self.ball_relative = []
      if self.oppgoal_relative is None:
        self.oppgoal_relative = []
      if self.opponent_robot_a is None:
        self.opponent_robot_a = []
      if self.opponent_robot_b is None:
        self.opponent_robot_b = []
      if self.opponent_robot_c is None:
        self.opponent_robot_c = []
      if self.opponent_robot_d is None:
        self.opponent_robot_d = []
      if self.team_robot_a is None:
        self.team_robot_a = []
      if self.team_robot_b is None:
        self.team_robot_b = []
      if self.team_robot_c is None:
        self.team_robot_c = []
      if self.avg_walking_speed is None:
        self.avg_walking_speed = []
      if self.time_to_position_at_ball is None:
        self.time_to_position_at_ball = []
      if self.max_kicking_distance is None:
        self.max_kicking_distance = []
      if self.offensive_side is None:
        self.offensive_side = b''
    else:
      self.header = std_msgs.msg.Header()
      self.robot_ids = b''
      self.role = b''
      self.action = b''
      self.state = b''
      self.robot_positions = []
      self.ball_relative = []
      self.oppgoal_relative = []
      self.opponent_robot_a = []
      self.opponent_robot_b = []
      self.opponent_robot_c = []
      self.opponent_robot_d = []
      self.team_robot_a = []
      self.team_robot_b = []
      self.team_robot_c = []
      self.avg_walking_speed = []
      self.time_to_position_at_ball = []
      self.max_kicking_distance = []
      self.offensive_side = b''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_ids
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.role
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_positions:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.ball_relative)
      buff.write(_struct_I.pack(length))
      for val1 in self.ball_relative:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.oppgoal_relative)
      buff.write(_struct_I.pack(length))
      for val1 in self.oppgoal_relative:
        _v4 = val1.header
        _x = _v4.seq
        buff.write(_get_struct_I().pack(_x))
        _v5 = _v4.stamp
        _x = _v5
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v4.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = val1.pose
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_a)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_a:
        _v7 = val1.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = val1.pose
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_b)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_b:
        _v10 = val1.header
        _x = _v10.seq
        buff.write(_get_struct_I().pack(_x))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v12 = val1.pose
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_c)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_c:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v15 = val1.pose
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_d)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_d:
        _v16 = val1.header
        _x = _v16.seq
        buff.write(_get_struct_I().pack(_x))
        _v17 = _v16.stamp
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v16.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v18 = val1.pose
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_a)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_a:
        _v19 = val1.header
        _x = _v19.seq
        buff.write(_get_struct_I().pack(_x))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v21 = val1.pose
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_b)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_b:
        _v22 = val1.header
        _x = _v22.seq
        buff.write(_get_struct_I().pack(_x))
        _v23 = _v22.stamp
        _x = _v23
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v22.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v24 = val1.pose
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_c)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_c:
        _v25 = val1.header
        _x = _v25.seq
        buff.write(_get_struct_I().pack(_x))
        _v26 = _v25.stamp
        _x = _v26
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v25.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v27 = val1.pose
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.avg_walking_speed)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.avg_walking_speed))
      length = len(self.time_to_position_at_ball)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.time_to_position_at_ball))
      length = len(self.max_kicking_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.max_kicking_distance))
      _x = self.offensive_side
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_positions is None:
        self.robot_positions = None
      if self.ball_relative is None:
        self.ball_relative = None
      if self.oppgoal_relative is None:
        self.oppgoal_relative = None
      if self.opponent_robot_a is None:
        self.opponent_robot_a = None
      if self.opponent_robot_b is None:
        self.opponent_robot_b = None
      if self.opponent_robot_c is None:
        self.opponent_robot_c = None
      if self.opponent_robot_d is None:
        self.opponent_robot_d = None
      if self.team_robot_a is None:
        self.team_robot_a = None
      if self.team_robot_b is None:
        self.team_robot_b = None
      if self.team_robot_c is None:
        self.team_robot_c = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_ids = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.role = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.robot_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ball_relative = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v28 = val1.header
        start = end
        end += 4
        (_v28.seq,) = _get_struct_I().unpack(str[start:end])
        _v29 = _v28.stamp
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v28.frame_id = str[start:end]
        _v30 = val1.pose
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.ball_relative.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oppgoal_relative = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.frame_id = str[start:end]
        _v33 = val1.pose
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.oppgoal_relative.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_a = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v34 = val1.header
        start = end
        end += 4
        (_v34.seq,) = _get_struct_I().unpack(str[start:end])
        _v35 = _v34.stamp
        _x = _v35
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v34.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v34.frame_id = str[start:end]
        _v36 = val1.pose
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_a.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_b = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v37 = val1.header
        start = end
        end += 4
        (_v37.seq,) = _get_struct_I().unpack(str[start:end])
        _v38 = _v37.stamp
        _x = _v38
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v37.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v37.frame_id = str[start:end]
        _v39 = val1.pose
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_b.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_c = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v40 = val1.header
        start = end
        end += 4
        (_v40.seq,) = _get_struct_I().unpack(str[start:end])
        _v41 = _v40.stamp
        _x = _v41
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v40.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v40.frame_id = str[start:end]
        _v42 = val1.pose
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_c.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_d = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v43 = val1.header
        start = end
        end += 4
        (_v43.seq,) = _get_struct_I().unpack(str[start:end])
        _v44 = _v43.stamp
        _x = _v44
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v43.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v43.frame_id = str[start:end]
        _v45 = val1.pose
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_d.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_a = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v46 = val1.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        _v48 = val1.pose
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_a.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_b = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        _v51 = val1.pose
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_b.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_c = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v52 = val1.header
        start = end
        end += 4
        (_v52.seq,) = _get_struct_I().unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v52.frame_id = str[start:end]
        _v54 = val1.pose
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_c.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.avg_walking_speed = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.time_to_position_at_ball = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_kicking_distance = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.offensive_side = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_ids
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.role
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.state
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_positions)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_positions:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.ball_relative)
      buff.write(_struct_I.pack(length))
      for val1 in self.ball_relative:
        _v55 = val1.header
        _x = _v55.seq
        buff.write(_get_struct_I().pack(_x))
        _v56 = _v55.stamp
        _x = _v56
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v55.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v57 = val1.pose
        _x = _v57
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.oppgoal_relative)
      buff.write(_struct_I.pack(length))
      for val1 in self.oppgoal_relative:
        _v58 = val1.header
        _x = _v58.seq
        buff.write(_get_struct_I().pack(_x))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v60 = val1.pose
        _x = _v60
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_a)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_a:
        _v61 = val1.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = val1.pose
        _x = _v63
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_b)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_b:
        _v64 = val1.header
        _x = _v64.seq
        buff.write(_get_struct_I().pack(_x))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v66 = val1.pose
        _x = _v66
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_c)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_c:
        _v67 = val1.header
        _x = _v67.seq
        buff.write(_get_struct_I().pack(_x))
        _v68 = _v67.stamp
        _x = _v68
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v67.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v69 = val1.pose
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.opponent_robot_d)
      buff.write(_struct_I.pack(length))
      for val1 in self.opponent_robot_d:
        _v70 = val1.header
        _x = _v70.seq
        buff.write(_get_struct_I().pack(_x))
        _v71 = _v70.stamp
        _x = _v71
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v70.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v72 = val1.pose
        _x = _v72
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_a)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_a:
        _v73 = val1.header
        _x = _v73.seq
        buff.write(_get_struct_I().pack(_x))
        _v74 = _v73.stamp
        _x = _v74
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v73.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v75 = val1.pose
        _x = _v75
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_b)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_b:
        _v76 = val1.header
        _x = _v76.seq
        buff.write(_get_struct_I().pack(_x))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v78 = val1.pose
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.team_robot_c)
      buff.write(_struct_I.pack(length))
      for val1 in self.team_robot_c:
        _v79 = val1.header
        _x = _v79.seq
        buff.write(_get_struct_I().pack(_x))
        _v80 = _v79.stamp
        _x = _v80
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v79.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v81 = val1.pose
        _x = _v81
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
        _x = val1.confidence
        buff.write(_get_struct_f().pack(_x))
      length = len(self.avg_walking_speed)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.avg_walking_speed.tostring())
      length = len(self.time_to_position_at_ball)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.time_to_position_at_ball.tostring())
      length = len(self.max_kicking_distance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.max_kicking_distance.tostring())
      _x = self.offensive_side
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.robot_positions is None:
        self.robot_positions = None
      if self.ball_relative is None:
        self.ball_relative = None
      if self.oppgoal_relative is None:
        self.oppgoal_relative = None
      if self.opponent_robot_a is None:
        self.opponent_robot_a = None
      if self.opponent_robot_b is None:
        self.opponent_robot_b = None
      if self.opponent_robot_c is None:
        self.opponent_robot_c = None
      if self.opponent_robot_d is None:
        self.opponent_robot_d = None
      if self.team_robot_a is None:
        self.team_robot_a = None
      if self.team_robot_b is None:
        self.team_robot_b = None
      if self.team_robot_c is None:
        self.team_robot_c = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_ids = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.role = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_positions = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.robot_positions.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ball_relative = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v82 = val1.header
        start = end
        end += 4
        (_v82.seq,) = _get_struct_I().unpack(str[start:end])
        _v83 = _v82.stamp
        _x = _v83
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v82.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v82.frame_id = str[start:end]
        _v84 = val1.pose
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.ball_relative.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.oppgoal_relative = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v85 = val1.header
        start = end
        end += 4
        (_v85.seq,) = _get_struct_I().unpack(str[start:end])
        _v86 = _v85.stamp
        _x = _v86
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v85.frame_id = str[start:end]
        _v87 = val1.pose
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.oppgoal_relative.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_a = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v88 = val1.header
        start = end
        end += 4
        (_v88.seq,) = _get_struct_I().unpack(str[start:end])
        _v89 = _v88.stamp
        _x = _v89
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v88.frame_id = str[start:end]
        _v90 = val1.pose
        _x = _v90
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_a.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_b = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = str[start:end]
        _v93 = val1.pose
        _x = _v93
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_b.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_c = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v94 = val1.header
        start = end
        end += 4
        (_v94.seq,) = _get_struct_I().unpack(str[start:end])
        _v95 = _v94.stamp
        _x = _v95
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v94.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v94.frame_id = str[start:end]
        _v96 = val1.pose
        _x = _v96
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_c.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opponent_robot_d = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v97 = val1.header
        start = end
        end += 4
        (_v97.seq,) = _get_struct_I().unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v97.frame_id = str[start:end]
        _v99 = val1.pose
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.opponent_robot_d.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_a = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v100 = val1.header
        start = end
        end += 4
        (_v100.seq,) = _get_struct_I().unpack(str[start:end])
        _v101 = _v100.stamp
        _x = _v101
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v100.frame_id = str[start:end]
        _v102 = val1.pose
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_a.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_b = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v103 = val1.header
        start = end
        end += 4
        (_v103.seq,) = _get_struct_I().unpack(str[start:end])
        _v104 = _v103.stamp
        _x = _v104
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v103.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v103.frame_id = str[start:end]
        _v105 = val1.pose
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_b.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.team_robot_c = []
      for i in range(0, length):
        val1 = humanoid_league_msgs.msg.Position2D()
        _v106 = val1.header
        start = end
        end += 4
        (_v106.seq,) = _get_struct_I().unpack(str[start:end])
        _v107 = _v106.stamp
        _x = _v107
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v106.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v106.frame_id = str[start:end]
        _v108 = val1.pose
        _x = _v108
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.confidence,) = _get_struct_f().unpack(str[start:end])
        self.team_robot_c.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.avg_walking_speed = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.time_to_position_at_ball = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_kicking_distance = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.offensive_side = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
