# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humanoid_league_msgs/GoalInImage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import humanoid_league_msgs.msg
import std_msgs.msg

class GoalInImage(genpy.Message):
  _md5sum = "8496af08ca739a530ae0e0b017a0ba88"
  _type = "humanoid_league_msgs/GoalInImage"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# A goal on the image. Should be extracted from the seen posts and bars

# The header is included to get the time stamp for later use in tf
std_msgs/Header header

# Left post (or the only seen one)
humanoid_league_msgs/PostInImage left_post
# Right post, or null if only one post of the goal is seen
humanoid_league_msgs/PostInImage right_post

# Vector pointing to the (probable) center of the goal.
# Should only be used if only one goal post is visible. If both are visible this should be none.
# This is normally an educated guess, using the goal bar or the position of the post on the image
# The point can also be outside of the image
geometry_msgs/Point center_direction

# A certainty rating between 0 and 1, where 1 is the surest.
# 0 means no goal was found.
float32 confidence

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: humanoid_league_msgs/PostInImage
# A (possible) goal post in the image. It is defined by two end points and a width.

# Two points defining the significant axis of the post
geometry_msgs/Point foot_point
geometry_msgs/Point top_point
# Orthogonal to significant vector (in pixel)
float32 width

# A certainty rating between 0 and 1, where 1 is the surest.
float32 confidence
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','left_post','right_post','center_direction','confidence']
  _slot_types = ['std_msgs/Header','humanoid_league_msgs/PostInImage','humanoid_league_msgs/PostInImage','geometry_msgs/Point','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_post,right_post,center_direction,confidence

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GoalInImage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_post is None:
        self.left_post = humanoid_league_msgs.msg.PostInImage()
      if self.right_post is None:
        self.right_post = humanoid_league_msgs.msg.PostInImage()
      if self.center_direction is None:
        self.center_direction = geometry_msgs.msg.Point()
      if self.confidence is None:
        self.confidence = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.left_post = humanoid_league_msgs.msg.PostInImage()
      self.right_post = humanoid_league_msgs.msg.PostInImage()
      self.center_direction = geometry_msgs.msg.Point()
      self.confidence = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2f6d2f3df().pack(_x.left_post.foot_point.x, _x.left_post.foot_point.y, _x.left_post.foot_point.z, _x.left_post.top_point.x, _x.left_post.top_point.y, _x.left_post.top_point.z, _x.left_post.width, _x.left_post.confidence, _x.right_post.foot_point.x, _x.right_post.foot_point.y, _x.right_post.foot_point.z, _x.right_post.top_point.x, _x.right_post.top_point.y, _x.right_post.top_point.z, _x.right_post.width, _x.right_post.confidence, _x.center_direction.x, _x.center_direction.y, _x.center_direction.z, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_post is None:
        self.left_post = humanoid_league_msgs.msg.PostInImage()
      if self.right_post is None:
        self.right_post = humanoid_league_msgs.msg.PostInImage()
      if self.center_direction is None:
        self.center_direction = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.left_post.foot_point.x, _x.left_post.foot_point.y, _x.left_post.foot_point.z, _x.left_post.top_point.x, _x.left_post.top_point.y, _x.left_post.top_point.z, _x.left_post.width, _x.left_post.confidence, _x.right_post.foot_point.x, _x.right_post.foot_point.y, _x.right_post.foot_point.z, _x.right_post.top_point.x, _x.right_post.top_point.y, _x.right_post.top_point.z, _x.right_post.width, _x.right_post.confidence, _x.center_direction.x, _x.center_direction.y, _x.center_direction.z, _x.confidence,) = _get_struct_6d2f6d2f3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2f6d2f3df().pack(_x.left_post.foot_point.x, _x.left_post.foot_point.y, _x.left_post.foot_point.z, _x.left_post.top_point.x, _x.left_post.top_point.y, _x.left_post.top_point.z, _x.left_post.width, _x.left_post.confidence, _x.right_post.foot_point.x, _x.right_post.foot_point.y, _x.right_post.foot_point.z, _x.right_post.top_point.x, _x.right_post.top_point.y, _x.right_post.top_point.z, _x.right_post.width, _x.right_post.confidence, _x.center_direction.x, _x.center_direction.y, _x.center_direction.z, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_post is None:
        self.left_post = humanoid_league_msgs.msg.PostInImage()
      if self.right_post is None:
        self.right_post = humanoid_league_msgs.msg.PostInImage()
      if self.center_direction is None:
        self.center_direction = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 140
      (_x.left_post.foot_point.x, _x.left_post.foot_point.y, _x.left_post.foot_point.z, _x.left_post.top_point.x, _x.left_post.top_point.y, _x.left_post.top_point.z, _x.left_post.width, _x.left_post.confidence, _x.right_post.foot_point.x, _x.right_post.foot_point.y, _x.right_post.foot_point.z, _x.right_post.top_point.x, _x.right_post.top_point.y, _x.right_post.top_point.z, _x.right_post.width, _x.right_post.confidence, _x.center_direction.x, _x.center_direction.y, _x.center_direction.z, _x.confidence,) = _get_struct_6d2f6d2f3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d2f6d2f3df = None
def _get_struct_6d2f6d2f3df():
    global _struct_6d2f6d2f3df
    if _struct_6d2f6d2f3df is None:
        _struct_6d2f6d2f3df = struct.Struct("<6d2f6d2f3df")
    return _struct_6d2f6d2f3df
