# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from op3_walking_module_msgs/WalkingParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WalkingParam(genpy.Message):
  _md5sum = "29c5fd0a9fcd330b7de450bfe61e96dc"
  _type = "op3_walking_module_msgs/WalkingParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """####### walking init pose #######
float32 init_x_offset
float32 init_y_offset
float32 init_z_offset
float32 init_roll_offset
float32 init_pitch_offset
float32 init_yaw_offset
float32 r_x_offset
float32 r_y_offset
float32 r_z_offset
float32 r_roll_offset
float32 r_pitch_offset
float32 r_yaw_offset
float32 l_x_offset
float32 l_y_offset
float32 l_z_offset
float32 l_roll_offset
float32 l_pitch_offset
float32 l_yaw_offset


####### time parameter #####
float32 period_time
float32 dsp_ratio
float32 step_fb_ratio

########## walking parameter ########
float32 x_move_amplitude
float32 y_move_amplitude
float32 z_move_amplitude
float32 angle_move_amplitude
bool move_aim_on

########## balance parameter ##########
bool balance_enable
float32 balance_hip_roll_gain
float32 balance_knee_gain
float32 balance_ankle_roll_gain
float32 balance_ankle_pitch_gain
float32 y_swap_amplitude
float32 z_swap_amplitude
float32 arm_swing_gain
float32 pelvis_offset
float32 hip_pitch_offset

########## balance parameter ##########
float32 KP_P
float32 KD_P
float32 KI_P
float32 D_ANKLE_P
float32 D_KNEE
float32 D_HIP_P

float32 KP_R
float32 KD_R
float32 KI_R
float32 D_ANKLE_R
float32 D_HIP_R
float32 shoulder_gain

########## gain parameter ##########
int32 p_gain
int32 i_gain
int32 d_gain

########## ZMP WALKING BIT-BOTS ###########
float32 zmp_vx
float32 zmp_vy
float32 zmp_vphi

bool zmp_useGyro
"""
  __slots__ = ['init_x_offset','init_y_offset','init_z_offset','init_roll_offset','init_pitch_offset','init_yaw_offset','r_x_offset','r_y_offset','r_z_offset','r_roll_offset','r_pitch_offset','r_yaw_offset','l_x_offset','l_y_offset','l_z_offset','l_roll_offset','l_pitch_offset','l_yaw_offset','period_time','dsp_ratio','step_fb_ratio','x_move_amplitude','y_move_amplitude','z_move_amplitude','angle_move_amplitude','move_aim_on','balance_enable','balance_hip_roll_gain','balance_knee_gain','balance_ankle_roll_gain','balance_ankle_pitch_gain','y_swap_amplitude','z_swap_amplitude','arm_swing_gain','pelvis_offset','hip_pitch_offset','KP_P','KD_P','KI_P','D_ANKLE_P','D_KNEE','D_HIP_P','KP_R','KD_R','KI_R','D_ANKLE_R','D_HIP_R','shoulder_gain','p_gain','i_gain','d_gain','zmp_vx','zmp_vy','zmp_vphi','zmp_useGyro']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       init_x_offset,init_y_offset,init_z_offset,init_roll_offset,init_pitch_offset,init_yaw_offset,r_x_offset,r_y_offset,r_z_offset,r_roll_offset,r_pitch_offset,r_yaw_offset,l_x_offset,l_y_offset,l_z_offset,l_roll_offset,l_pitch_offset,l_yaw_offset,period_time,dsp_ratio,step_fb_ratio,x_move_amplitude,y_move_amplitude,z_move_amplitude,angle_move_amplitude,move_aim_on,balance_enable,balance_hip_roll_gain,balance_knee_gain,balance_ankle_roll_gain,balance_ankle_pitch_gain,y_swap_amplitude,z_swap_amplitude,arm_swing_gain,pelvis_offset,hip_pitch_offset,KP_P,KD_P,KI_P,D_ANKLE_P,D_KNEE,D_HIP_P,KP_R,KD_R,KI_R,D_ANKLE_R,D_HIP_R,shoulder_gain,p_gain,i_gain,d_gain,zmp_vx,zmp_vy,zmp_vphi,zmp_useGyro

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkingParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.init_x_offset is None:
        self.init_x_offset = 0.
      if self.init_y_offset is None:
        self.init_y_offset = 0.
      if self.init_z_offset is None:
        self.init_z_offset = 0.
      if self.init_roll_offset is None:
        self.init_roll_offset = 0.
      if self.init_pitch_offset is None:
        self.init_pitch_offset = 0.
      if self.init_yaw_offset is None:
        self.init_yaw_offset = 0.
      if self.r_x_offset is None:
        self.r_x_offset = 0.
      if self.r_y_offset is None:
        self.r_y_offset = 0.
      if self.r_z_offset is None:
        self.r_z_offset = 0.
      if self.r_roll_offset is None:
        self.r_roll_offset = 0.
      if self.r_pitch_offset is None:
        self.r_pitch_offset = 0.
      if self.r_yaw_offset is None:
        self.r_yaw_offset = 0.
      if self.l_x_offset is None:
        self.l_x_offset = 0.
      if self.l_y_offset is None:
        self.l_y_offset = 0.
      if self.l_z_offset is None:
        self.l_z_offset = 0.
      if self.l_roll_offset is None:
        self.l_roll_offset = 0.
      if self.l_pitch_offset is None:
        self.l_pitch_offset = 0.
      if self.l_yaw_offset is None:
        self.l_yaw_offset = 0.
      if self.period_time is None:
        self.period_time = 0.
      if self.dsp_ratio is None:
        self.dsp_ratio = 0.
      if self.step_fb_ratio is None:
        self.step_fb_ratio = 0.
      if self.x_move_amplitude is None:
        self.x_move_amplitude = 0.
      if self.y_move_amplitude is None:
        self.y_move_amplitude = 0.
      if self.z_move_amplitude is None:
        self.z_move_amplitude = 0.
      if self.angle_move_amplitude is None:
        self.angle_move_amplitude = 0.
      if self.move_aim_on is None:
        self.move_aim_on = False
      if self.balance_enable is None:
        self.balance_enable = False
      if self.balance_hip_roll_gain is None:
        self.balance_hip_roll_gain = 0.
      if self.balance_knee_gain is None:
        self.balance_knee_gain = 0.
      if self.balance_ankle_roll_gain is None:
        self.balance_ankle_roll_gain = 0.
      if self.balance_ankle_pitch_gain is None:
        self.balance_ankle_pitch_gain = 0.
      if self.y_swap_amplitude is None:
        self.y_swap_amplitude = 0.
      if self.z_swap_amplitude is None:
        self.z_swap_amplitude = 0.
      if self.arm_swing_gain is None:
        self.arm_swing_gain = 0.
      if self.pelvis_offset is None:
        self.pelvis_offset = 0.
      if self.hip_pitch_offset is None:
        self.hip_pitch_offset = 0.
      if self.KP_P is None:
        self.KP_P = 0.
      if self.KD_P is None:
        self.KD_P = 0.
      if self.KI_P is None:
        self.KI_P = 0.
      if self.D_ANKLE_P is None:
        self.D_ANKLE_P = 0.
      if self.D_KNEE is None:
        self.D_KNEE = 0.
      if self.D_HIP_P is None:
        self.D_HIP_P = 0.
      if self.KP_R is None:
        self.KP_R = 0.
      if self.KD_R is None:
        self.KD_R = 0.
      if self.KI_R is None:
        self.KI_R = 0.
      if self.D_ANKLE_R is None:
        self.D_ANKLE_R = 0.
      if self.D_HIP_R is None:
        self.D_HIP_R = 0.
      if self.shoulder_gain is None:
        self.shoulder_gain = 0.
      if self.p_gain is None:
        self.p_gain = 0
      if self.i_gain is None:
        self.i_gain = 0
      if self.d_gain is None:
        self.d_gain = 0
      if self.zmp_vx is None:
        self.zmp_vx = 0.
      if self.zmp_vy is None:
        self.zmp_vy = 0.
      if self.zmp_vphi is None:
        self.zmp_vphi = 0.
      if self.zmp_useGyro is None:
        self.zmp_useGyro = False
    else:
      self.init_x_offset = 0.
      self.init_y_offset = 0.
      self.init_z_offset = 0.
      self.init_roll_offset = 0.
      self.init_pitch_offset = 0.
      self.init_yaw_offset = 0.
      self.r_x_offset = 0.
      self.r_y_offset = 0.
      self.r_z_offset = 0.
      self.r_roll_offset = 0.
      self.r_pitch_offset = 0.
      self.r_yaw_offset = 0.
      self.l_x_offset = 0.
      self.l_y_offset = 0.
      self.l_z_offset = 0.
      self.l_roll_offset = 0.
      self.l_pitch_offset = 0.
      self.l_yaw_offset = 0.
      self.period_time = 0.
      self.dsp_ratio = 0.
      self.step_fb_ratio = 0.
      self.x_move_amplitude = 0.
      self.y_move_amplitude = 0.
      self.z_move_amplitude = 0.
      self.angle_move_amplitude = 0.
      self.move_aim_on = False
      self.balance_enable = False
      self.balance_hip_roll_gain = 0.
      self.balance_knee_gain = 0.
      self.balance_ankle_roll_gain = 0.
      self.balance_ankle_pitch_gain = 0.
      self.y_swap_amplitude = 0.
      self.z_swap_amplitude = 0.
      self.arm_swing_gain = 0.
      self.pelvis_offset = 0.
      self.hip_pitch_offset = 0.
      self.KP_P = 0.
      self.KD_P = 0.
      self.KI_P = 0.
      self.D_ANKLE_P = 0.
      self.D_KNEE = 0.
      self.D_HIP_P = 0.
      self.KP_R = 0.
      self.KD_R = 0.
      self.KI_R = 0.
      self.D_ANKLE_R = 0.
      self.D_HIP_R = 0.
      self.shoulder_gain = 0.
      self.p_gain = 0
      self.i_gain = 0
      self.d_gain = 0
      self.zmp_vx = 0.
      self.zmp_vy = 0.
      self.zmp_vphi = 0.
      self.zmp_useGyro = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_25f2B21f3i3fB().pack(_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.r_x_offset, _x.r_y_offset, _x.r_z_offset, _x.r_roll_offset, _x.r_pitch_offset, _x.r_yaw_offset, _x.l_x_offset, _x.l_y_offset, _x.l_z_offset, _x.l_roll_offset, _x.l_pitch_offset, _x.l_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.KP_P, _x.KD_P, _x.KI_P, _x.D_ANKLE_P, _x.D_KNEE, _x.D_HIP_P, _x.KP_R, _x.KD_R, _x.KI_R, _x.D_ANKLE_R, _x.D_HIP_R, _x.shoulder_gain, _x.p_gain, _x.i_gain, _x.d_gain, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.zmp_useGyro))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 211
      (_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.r_x_offset, _x.r_y_offset, _x.r_z_offset, _x.r_roll_offset, _x.r_pitch_offset, _x.r_yaw_offset, _x.l_x_offset, _x.l_y_offset, _x.l_z_offset, _x.l_roll_offset, _x.l_pitch_offset, _x.l_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.KP_P, _x.KD_P, _x.KI_P, _x.D_ANKLE_P, _x.D_KNEE, _x.D_HIP_P, _x.KP_R, _x.KD_R, _x.KI_R, _x.D_ANKLE_R, _x.D_HIP_R, _x.shoulder_gain, _x.p_gain, _x.i_gain, _x.d_gain, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.zmp_useGyro,) = _get_struct_25f2B21f3i3fB().unpack(str[start:end])
      self.move_aim_on = bool(self.move_aim_on)
      self.balance_enable = bool(self.balance_enable)
      self.zmp_useGyro = bool(self.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_25f2B21f3i3fB().pack(_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.r_x_offset, _x.r_y_offset, _x.r_z_offset, _x.r_roll_offset, _x.r_pitch_offset, _x.r_yaw_offset, _x.l_x_offset, _x.l_y_offset, _x.l_z_offset, _x.l_roll_offset, _x.l_pitch_offset, _x.l_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.KP_P, _x.KD_P, _x.KI_P, _x.D_ANKLE_P, _x.D_KNEE, _x.D_HIP_P, _x.KP_R, _x.KD_R, _x.KI_R, _x.D_ANKLE_R, _x.D_HIP_R, _x.shoulder_gain, _x.p_gain, _x.i_gain, _x.d_gain, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.zmp_useGyro))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 211
      (_x.init_x_offset, _x.init_y_offset, _x.init_z_offset, _x.init_roll_offset, _x.init_pitch_offset, _x.init_yaw_offset, _x.r_x_offset, _x.r_y_offset, _x.r_z_offset, _x.r_roll_offset, _x.r_pitch_offset, _x.r_yaw_offset, _x.l_x_offset, _x.l_y_offset, _x.l_z_offset, _x.l_roll_offset, _x.l_pitch_offset, _x.l_yaw_offset, _x.period_time, _x.dsp_ratio, _x.step_fb_ratio, _x.x_move_amplitude, _x.y_move_amplitude, _x.z_move_amplitude, _x.angle_move_amplitude, _x.move_aim_on, _x.balance_enable, _x.balance_hip_roll_gain, _x.balance_knee_gain, _x.balance_ankle_roll_gain, _x.balance_ankle_pitch_gain, _x.y_swap_amplitude, _x.z_swap_amplitude, _x.arm_swing_gain, _x.pelvis_offset, _x.hip_pitch_offset, _x.KP_P, _x.KD_P, _x.KI_P, _x.D_ANKLE_P, _x.D_KNEE, _x.D_HIP_P, _x.KP_R, _x.KD_R, _x.KI_R, _x.D_ANKLE_R, _x.D_HIP_R, _x.shoulder_gain, _x.p_gain, _x.i_gain, _x.d_gain, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.zmp_useGyro,) = _get_struct_25f2B21f3i3fB().unpack(str[start:end])
      self.move_aim_on = bool(self.move_aim_on)
      self.balance_enable = bool(self.balance_enable)
      self.zmp_useGyro = bool(self.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_25f2B21f3i3fB = None
def _get_struct_25f2B21f3i3fB():
    global _struct_25f2B21f3i3fB
    if _struct_25f2B21f3i3fB is None:
        _struct_25f2B21f3i3fB = struct.Struct("<25f2B21f3i3fB")
    return _struct_25f2B21f3i3fB
