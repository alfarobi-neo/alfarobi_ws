# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quintic_walk_msgs/WalkingParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WalkingParam(genpy.Message):
  _md5sum = "9f884ae298d19a76dad330f2c4daca90"
  _type = "quintic_walk_msgs/WalkingParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 freq
float32 doubleSupportRatio
float32 footDistance
float32 footRise
float32 footPutDownZOffset
float32 footPutDownPhase
float32 footApexPhase
float32 footOvershootRatio
float32 footOvershootPhase
float32 trunkHeight
float32 trunkPitch
float32 trunkPhase
float32 trunkXOffset
float32 trunkYOffset
float32 trunkSwing
float32 trunkPause
float32 trunkXOffsetPCoefForward
float32 trunkXOffsetPCoefTurn
float32 trunkPitchPCoefForward
float32 trunkPitchPCoefTurn
bool trunkYOnlyInDoubleSupport

float32 XMove
float32 YMove
float32 ZMove
string mode
bool tuning

float32 D_ANKLE_P_qw
float32 D_KNEE_qw
float32 D_HIP_P_qw


float32 KP_P_qw
float32 KD_P_qw
float32 KI_P_qw



float32 ShoulderGain_qw
float32 setpointPitch
float32 pitch_error_tol

float32 KP_X_qw
float32 KD_X_qw
float32 KI_X_qw


float32 Angle_0
float32 Angle_1
float32 Angle_2
float32 Angle_3
float32 Angle_4

float32 KD_0
float32 KD_1
float32 KD_2
float32 KD_3
float32 KD_4

float32 Gyro_0
float32 Gyro_1
float32 Gyro_2
float32 Gyro_3
float32 Gyro_4

float32 KP_0
float32 KP_1
float32 KP_2
float32 KP_3
float32 KP_4


"""
  __slots__ = ['freq','doubleSupportRatio','footDistance','footRise','footPutDownZOffset','footPutDownPhase','footApexPhase','footOvershootRatio','footOvershootPhase','trunkHeight','trunkPitch','trunkPhase','trunkXOffset','trunkYOffset','trunkSwing','trunkPause','trunkXOffsetPCoefForward','trunkXOffsetPCoefTurn','trunkPitchPCoefForward','trunkPitchPCoefTurn','trunkYOnlyInDoubleSupport','XMove','YMove','ZMove','mode','tuning','D_ANKLE_P_qw','D_KNEE_qw','D_HIP_P_qw','KP_P_qw','KD_P_qw','KI_P_qw','ShoulderGain_qw','setpointPitch','pitch_error_tol','KP_X_qw','KD_X_qw','KI_X_qw','Angle_0','Angle_1','Angle_2','Angle_3','Angle_4','KD_0','KD_1','KD_2','KD_3','KD_4','Gyro_0','Gyro_1','Gyro_2','Gyro_3','Gyro_4','KP_0','KP_1','KP_2','KP_3','KP_4']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','float32','float32','float32','string','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       freq,doubleSupportRatio,footDistance,footRise,footPutDownZOffset,footPutDownPhase,footApexPhase,footOvershootRatio,footOvershootPhase,trunkHeight,trunkPitch,trunkPhase,trunkXOffset,trunkYOffset,trunkSwing,trunkPause,trunkXOffsetPCoefForward,trunkXOffsetPCoefTurn,trunkPitchPCoefForward,trunkPitchPCoefTurn,trunkYOnlyInDoubleSupport,XMove,YMove,ZMove,mode,tuning,D_ANKLE_P_qw,D_KNEE_qw,D_HIP_P_qw,KP_P_qw,KD_P_qw,KI_P_qw,ShoulderGain_qw,setpointPitch,pitch_error_tol,KP_X_qw,KD_X_qw,KI_X_qw,Angle_0,Angle_1,Angle_2,Angle_3,Angle_4,KD_0,KD_1,KD_2,KD_3,KD_4,Gyro_0,Gyro_1,Gyro_2,Gyro_3,Gyro_4,KP_0,KP_1,KP_2,KP_3,KP_4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WalkingParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.freq is None:
        self.freq = 0.
      if self.doubleSupportRatio is None:
        self.doubleSupportRatio = 0.
      if self.footDistance is None:
        self.footDistance = 0.
      if self.footRise is None:
        self.footRise = 0.
      if self.footPutDownZOffset is None:
        self.footPutDownZOffset = 0.
      if self.footPutDownPhase is None:
        self.footPutDownPhase = 0.
      if self.footApexPhase is None:
        self.footApexPhase = 0.
      if self.footOvershootRatio is None:
        self.footOvershootRatio = 0.
      if self.footOvershootPhase is None:
        self.footOvershootPhase = 0.
      if self.trunkHeight is None:
        self.trunkHeight = 0.
      if self.trunkPitch is None:
        self.trunkPitch = 0.
      if self.trunkPhase is None:
        self.trunkPhase = 0.
      if self.trunkXOffset is None:
        self.trunkXOffset = 0.
      if self.trunkYOffset is None:
        self.trunkYOffset = 0.
      if self.trunkSwing is None:
        self.trunkSwing = 0.
      if self.trunkPause is None:
        self.trunkPause = 0.
      if self.trunkXOffsetPCoefForward is None:
        self.trunkXOffsetPCoefForward = 0.
      if self.trunkXOffsetPCoefTurn is None:
        self.trunkXOffsetPCoefTurn = 0.
      if self.trunkPitchPCoefForward is None:
        self.trunkPitchPCoefForward = 0.
      if self.trunkPitchPCoefTurn is None:
        self.trunkPitchPCoefTurn = 0.
      if self.trunkYOnlyInDoubleSupport is None:
        self.trunkYOnlyInDoubleSupport = False
      if self.XMove is None:
        self.XMove = 0.
      if self.YMove is None:
        self.YMove = 0.
      if self.ZMove is None:
        self.ZMove = 0.
      if self.mode is None:
        self.mode = ''
      if self.tuning is None:
        self.tuning = False
      if self.D_ANKLE_P_qw is None:
        self.D_ANKLE_P_qw = 0.
      if self.D_KNEE_qw is None:
        self.D_KNEE_qw = 0.
      if self.D_HIP_P_qw is None:
        self.D_HIP_P_qw = 0.
      if self.KP_P_qw is None:
        self.KP_P_qw = 0.
      if self.KD_P_qw is None:
        self.KD_P_qw = 0.
      if self.KI_P_qw is None:
        self.KI_P_qw = 0.
      if self.ShoulderGain_qw is None:
        self.ShoulderGain_qw = 0.
      if self.setpointPitch is None:
        self.setpointPitch = 0.
      if self.pitch_error_tol is None:
        self.pitch_error_tol = 0.
      if self.KP_X_qw is None:
        self.KP_X_qw = 0.
      if self.KD_X_qw is None:
        self.KD_X_qw = 0.
      if self.KI_X_qw is None:
        self.KI_X_qw = 0.
      if self.Angle_0 is None:
        self.Angle_0 = 0.
      if self.Angle_1 is None:
        self.Angle_1 = 0.
      if self.Angle_2 is None:
        self.Angle_2 = 0.
      if self.Angle_3 is None:
        self.Angle_3 = 0.
      if self.Angle_4 is None:
        self.Angle_4 = 0.
      if self.KD_0 is None:
        self.KD_0 = 0.
      if self.KD_1 is None:
        self.KD_1 = 0.
      if self.KD_2 is None:
        self.KD_2 = 0.
      if self.KD_3 is None:
        self.KD_3 = 0.
      if self.KD_4 is None:
        self.KD_4 = 0.
      if self.Gyro_0 is None:
        self.Gyro_0 = 0.
      if self.Gyro_1 is None:
        self.Gyro_1 = 0.
      if self.Gyro_2 is None:
        self.Gyro_2 = 0.
      if self.Gyro_3 is None:
        self.Gyro_3 = 0.
      if self.Gyro_4 is None:
        self.Gyro_4 = 0.
      if self.KP_0 is None:
        self.KP_0 = 0.
      if self.KP_1 is None:
        self.KP_1 = 0.
      if self.KP_2 is None:
        self.KP_2 = 0.
      if self.KP_3 is None:
        self.KP_3 = 0.
      if self.KP_4 is None:
        self.KP_4 = 0.
    else:
      self.freq = 0.
      self.doubleSupportRatio = 0.
      self.footDistance = 0.
      self.footRise = 0.
      self.footPutDownZOffset = 0.
      self.footPutDownPhase = 0.
      self.footApexPhase = 0.
      self.footOvershootRatio = 0.
      self.footOvershootPhase = 0.
      self.trunkHeight = 0.
      self.trunkPitch = 0.
      self.trunkPhase = 0.
      self.trunkXOffset = 0.
      self.trunkYOffset = 0.
      self.trunkSwing = 0.
      self.trunkPause = 0.
      self.trunkXOffsetPCoefForward = 0.
      self.trunkXOffsetPCoefTurn = 0.
      self.trunkPitchPCoefForward = 0.
      self.trunkPitchPCoefTurn = 0.
      self.trunkYOnlyInDoubleSupport = False
      self.XMove = 0.
      self.YMove = 0.
      self.ZMove = 0.
      self.mode = ''
      self.tuning = False
      self.D_ANKLE_P_qw = 0.
      self.D_KNEE_qw = 0.
      self.D_HIP_P_qw = 0.
      self.KP_P_qw = 0.
      self.KD_P_qw = 0.
      self.KI_P_qw = 0.
      self.ShoulderGain_qw = 0.
      self.setpointPitch = 0.
      self.pitch_error_tol = 0.
      self.KP_X_qw = 0.
      self.KD_X_qw = 0.
      self.KI_X_qw = 0.
      self.Angle_0 = 0.
      self.Angle_1 = 0.
      self.Angle_2 = 0.
      self.Angle_3 = 0.
      self.Angle_4 = 0.
      self.KD_0 = 0.
      self.KD_1 = 0.
      self.KD_2 = 0.
      self.KD_3 = 0.
      self.KD_4 = 0.
      self.Gyro_0 = 0.
      self.Gyro_1 = 0.
      self.Gyro_2 = 0.
      self.Gyro_3 = 0.
      self.Gyro_4 = 0.
      self.KP_0 = 0.
      self.KP_1 = 0.
      self.KP_2 = 0.
      self.KP_3 = 0.
      self.KP_4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20fB3f().pack(_x.freq, _x.doubleSupportRatio, _x.footDistance, _x.footRise, _x.footPutDownZOffset, _x.footPutDownPhase, _x.footApexPhase, _x.footOvershootRatio, _x.footOvershootPhase, _x.trunkHeight, _x.trunkPitch, _x.trunkPhase, _x.trunkXOffset, _x.trunkYOffset, _x.trunkSwing, _x.trunkPause, _x.trunkXOffsetPCoefForward, _x.trunkXOffsetPCoefTurn, _x.trunkPitchPCoefForward, _x.trunkPitchPCoefTurn, _x.trunkYOnlyInDoubleSupport, _x.XMove, _x.YMove, _x.ZMove))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B32f().pack(_x.tuning, _x.D_ANKLE_P_qw, _x.D_KNEE_qw, _x.D_HIP_P_qw, _x.KP_P_qw, _x.KD_P_qw, _x.KI_P_qw, _x.ShoulderGain_qw, _x.setpointPitch, _x.pitch_error_tol, _x.KP_X_qw, _x.KD_X_qw, _x.KI_X_qw, _x.Angle_0, _x.Angle_1, _x.Angle_2, _x.Angle_3, _x.Angle_4, _x.KD_0, _x.KD_1, _x.KD_2, _x.KD_3, _x.KD_4, _x.Gyro_0, _x.Gyro_1, _x.Gyro_2, _x.Gyro_3, _x.Gyro_4, _x.KP_0, _x.KP_1, _x.KP_2, _x.KP_3, _x.KP_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 93
      (_x.freq, _x.doubleSupportRatio, _x.footDistance, _x.footRise, _x.footPutDownZOffset, _x.footPutDownPhase, _x.footApexPhase, _x.footOvershootRatio, _x.footOvershootPhase, _x.trunkHeight, _x.trunkPitch, _x.trunkPhase, _x.trunkXOffset, _x.trunkYOffset, _x.trunkSwing, _x.trunkPause, _x.trunkXOffsetPCoefForward, _x.trunkXOffsetPCoefTurn, _x.trunkPitchPCoefForward, _x.trunkPitchPCoefTurn, _x.trunkYOnlyInDoubleSupport, _x.XMove, _x.YMove, _x.ZMove,) = _get_struct_20fB3f().unpack(str[start:end])
      self.trunkYOnlyInDoubleSupport = bool(self.trunkYOnlyInDoubleSupport)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.tuning, _x.D_ANKLE_P_qw, _x.D_KNEE_qw, _x.D_HIP_P_qw, _x.KP_P_qw, _x.KD_P_qw, _x.KI_P_qw, _x.ShoulderGain_qw, _x.setpointPitch, _x.pitch_error_tol, _x.KP_X_qw, _x.KD_X_qw, _x.KI_X_qw, _x.Angle_0, _x.Angle_1, _x.Angle_2, _x.Angle_3, _x.Angle_4, _x.KD_0, _x.KD_1, _x.KD_2, _x.KD_3, _x.KD_4, _x.Gyro_0, _x.Gyro_1, _x.Gyro_2, _x.Gyro_3, _x.Gyro_4, _x.KP_0, _x.KP_1, _x.KP_2, _x.KP_3, _x.KP_4,) = _get_struct_B32f().unpack(str[start:end])
      self.tuning = bool(self.tuning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20fB3f().pack(_x.freq, _x.doubleSupportRatio, _x.footDistance, _x.footRise, _x.footPutDownZOffset, _x.footPutDownPhase, _x.footApexPhase, _x.footOvershootRatio, _x.footOvershootPhase, _x.trunkHeight, _x.trunkPitch, _x.trunkPhase, _x.trunkXOffset, _x.trunkYOffset, _x.trunkSwing, _x.trunkPause, _x.trunkXOffsetPCoefForward, _x.trunkXOffsetPCoefTurn, _x.trunkPitchPCoefForward, _x.trunkPitchPCoefTurn, _x.trunkYOnlyInDoubleSupport, _x.XMove, _x.YMove, _x.ZMove))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B32f().pack(_x.tuning, _x.D_ANKLE_P_qw, _x.D_KNEE_qw, _x.D_HIP_P_qw, _x.KP_P_qw, _x.KD_P_qw, _x.KI_P_qw, _x.ShoulderGain_qw, _x.setpointPitch, _x.pitch_error_tol, _x.KP_X_qw, _x.KD_X_qw, _x.KI_X_qw, _x.Angle_0, _x.Angle_1, _x.Angle_2, _x.Angle_3, _x.Angle_4, _x.KD_0, _x.KD_1, _x.KD_2, _x.KD_3, _x.KD_4, _x.Gyro_0, _x.Gyro_1, _x.Gyro_2, _x.Gyro_3, _x.Gyro_4, _x.KP_0, _x.KP_1, _x.KP_2, _x.KP_3, _x.KP_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 93
      (_x.freq, _x.doubleSupportRatio, _x.footDistance, _x.footRise, _x.footPutDownZOffset, _x.footPutDownPhase, _x.footApexPhase, _x.footOvershootRatio, _x.footOvershootPhase, _x.trunkHeight, _x.trunkPitch, _x.trunkPhase, _x.trunkXOffset, _x.trunkYOffset, _x.trunkSwing, _x.trunkPause, _x.trunkXOffsetPCoefForward, _x.trunkXOffsetPCoefTurn, _x.trunkPitchPCoefForward, _x.trunkPitchPCoefTurn, _x.trunkYOnlyInDoubleSupport, _x.XMove, _x.YMove, _x.ZMove,) = _get_struct_20fB3f().unpack(str[start:end])
      self.trunkYOnlyInDoubleSupport = bool(self.trunkYOnlyInDoubleSupport)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.tuning, _x.D_ANKLE_P_qw, _x.D_KNEE_qw, _x.D_HIP_P_qw, _x.KP_P_qw, _x.KD_P_qw, _x.KI_P_qw, _x.ShoulderGain_qw, _x.setpointPitch, _x.pitch_error_tol, _x.KP_X_qw, _x.KD_X_qw, _x.KI_X_qw, _x.Angle_0, _x.Angle_1, _x.Angle_2, _x.Angle_3, _x.Angle_4, _x.KD_0, _x.KD_1, _x.KD_2, _x.KD_3, _x.KD_4, _x.Gyro_0, _x.Gyro_1, _x.Gyro_2, _x.Gyro_3, _x.Gyro_4, _x.KP_0, _x.KP_1, _x.KP_2, _x.KP_3, _x.KP_4,) = _get_struct_B32f().unpack(str[start:end])
      self.tuning = bool(self.tuning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20fB3f = None
def _get_struct_20fB3f():
    global _struct_20fB3f
    if _struct_20fB3f is None:
        _struct_20fB3f = struct.Struct("<20fB3f")
    return _struct_20fB3f
_struct_B32f = None
def _get_struct_B32f():
    global _struct_B32f
    if _struct_B32f is None:
        _struct_B32f = struct.Struct("<B32f")
    return _struct_B32f
