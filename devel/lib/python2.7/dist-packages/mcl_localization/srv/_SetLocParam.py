# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcl_localization/SetLocParamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mcl_localization.msg

class SetLocParamRequest(genpy.Message):
  _md5sum = "a334524f67bc744751132bd0b10acaf3"
  _type = "mcl_localization/SetLocParamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """localization_param    parameters

================================================================================
MSG: mcl_localization/localization_param
float64 mcl_afast
float64 mcl_aslow
float64 mcl_variance
float64 mgauss_x
float64 mgauss_y
float64 mgauss_w
float64 vgauss_x
float64 vgauss_y
float64 mcl_wcmps
"""
  __slots__ = ['parameters']
  _slot_types = ['mcl_localization/localization_param']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       parameters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetLocParamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.parameters is None:
        self.parameters = mcl_localization.msg.localization_param()
    else:
      self.parameters = mcl_localization.msg.localization_param()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.parameters.mcl_afast, _x.parameters.mcl_aslow, _x.parameters.mcl_variance, _x.parameters.mgauss_x, _x.parameters.mgauss_y, _x.parameters.mgauss_w, _x.parameters.vgauss_x, _x.parameters.vgauss_y, _x.parameters.mcl_wcmps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = mcl_localization.msg.localization_param()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.parameters.mcl_afast, _x.parameters.mcl_aslow, _x.parameters.mcl_variance, _x.parameters.mgauss_x, _x.parameters.mgauss_y, _x.parameters.mgauss_w, _x.parameters.vgauss_x, _x.parameters.vgauss_y, _x.parameters.mcl_wcmps,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.parameters.mcl_afast, _x.parameters.mcl_aslow, _x.parameters.mcl_variance, _x.parameters.mgauss_x, _x.parameters.mgauss_y, _x.parameters.mgauss_w, _x.parameters.vgauss_x, _x.parameters.vgauss_y, _x.parameters.mcl_wcmps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = mcl_localization.msg.localization_param()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.parameters.mcl_afast, _x.parameters.mcl_aslow, _x.parameters.mcl_variance, _x.parameters.mgauss_x, _x.parameters.mgauss_y, _x.parameters.mgauss_w, _x.parameters.vgauss_x, _x.parameters.vgauss_y, _x.parameters.mcl_wcmps,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mcl_localization/SetLocParamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetLocParamResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "mcl_localization/SetLocParamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool            result

"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetLocParamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetLocParam(object):
  _type          = 'mcl_localization/SetLocParam'
  _md5sum = 'c5b3d39a60950d660fb6da89c59bd7b8'
  _request_class  = SetLocParamRequest
  _response_class = SetLocParamResponse
