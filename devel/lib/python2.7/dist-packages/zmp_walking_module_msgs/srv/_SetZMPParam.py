# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zmp_walking_module_msgs/SetZMPParamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import zmp_walking_module_msgs.msg

class SetZMPParamRequest(genpy.Message):
  _md5sum = "82609c663b0736a4c9a2a59399fba32d"
  _type = "zmp_walking_module_msgs/SetZMPParamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ZMPWalkingParam    parameters

================================================================================
MSG: zmp_walking_module_msgs/ZMPWalkingParam
########## ZMP WALKING BIT-BOTS ###########

bool feedback_

float32 L_Shift
float32 L_Lift
float32 L_P_Kick
float32 L_P_Cool

float32 R_Shift
float32 R_Lift
float32 R_P_Kick
float32 R_P_Cool

float32 Kp
float32 Kd
float32 TH1
float32 TH2
float32 Acc

float32 KpP
float32 KpR
float32 KdP
float32 KdR
float32 Ki

float32 zmp_vx
float32 zmp_vy
float32 zmp_vphi
float32 m_zmp_vx
float32 m_zmp_vy
float32 m_zmp_vphi
float32 zmp_vx_man

bool zmp_useGyro
float32 arm_pitch
float32 arm_roll
float32 arm_elbow

float32 supp_front
float32 supp_front2
float32 supp_turn
float32 supp_side_x
float32 supp_side_y
float32 supp_x
float32 supp_y

float32 suppmod_y_init
float32 turncomp_thrs
float32 turn_comp
float32 accel_comp
float32 front_comp
float32 hiproll_comp
float32 tstep
float32 tzmp
float32 velfast_forward
float32 velfast_turn
float32 angkle_supp_factor

float32 foot_y
float32 foot_x
float32 stand_offset
float32 body_height
float32 step_height
float32 belly_roll
float32 belly_hip
float32 bodytilt

float32 ankleX_fact
float32 ankleX_deadband
float32 ankleX_maxVal

float32 ankleY_fact
float32 ankleY_deadband
float32 ankleY_maxVal

float32 kneeX_fact
float32 kneeX_deadband
float32 kneeX_maxVal

float32 hipY_fact
float32 hipY_deadband
float32 hipY_maxVal

float32 armY_fact
float32 armY_deadband
float32 armY_maxVal

float32 armX_fact
float32 armX_deadband
float32 armX_maxVal

float32 ballPosX
float32 ballPosY
float32 ballPosZ

float32 goalPosX
float32 goalPosY
float32 goalPosZ

float32 power
float32 TRetract
float32 TKick
float32 TRising
float32 TDown
"""
  __slots__ = ['parameters']
  _slot_types = ['zmp_walking_module_msgs/ZMPWalkingParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       parameters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetZMPParamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.parameters is None:
        self.parameters = zmp_walking_module_msgs.msg.ZMPWalkingParam()
    else:
      self.parameters = zmp_walking_module_msgs.msg.ZMPWalkingParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B25fB58f().pack(_x.parameters.feedback_, _x.parameters.L_Shift, _x.parameters.L_Lift, _x.parameters.L_P_Kick, _x.parameters.L_P_Cool, _x.parameters.R_Shift, _x.parameters.R_Lift, _x.parameters.R_P_Kick, _x.parameters.R_P_Cool, _x.parameters.Kp, _x.parameters.Kd, _x.parameters.TH1, _x.parameters.TH2, _x.parameters.Acc, _x.parameters.KpP, _x.parameters.KpR, _x.parameters.KdP, _x.parameters.KdR, _x.parameters.Ki, _x.parameters.zmp_vx, _x.parameters.zmp_vy, _x.parameters.zmp_vphi, _x.parameters.m_zmp_vx, _x.parameters.m_zmp_vy, _x.parameters.m_zmp_vphi, _x.parameters.zmp_vx_man, _x.parameters.zmp_useGyro, _x.parameters.arm_pitch, _x.parameters.arm_roll, _x.parameters.arm_elbow, _x.parameters.supp_front, _x.parameters.supp_front2, _x.parameters.supp_turn, _x.parameters.supp_side_x, _x.parameters.supp_side_y, _x.parameters.supp_x, _x.parameters.supp_y, _x.parameters.suppmod_y_init, _x.parameters.turncomp_thrs, _x.parameters.turn_comp, _x.parameters.accel_comp, _x.parameters.front_comp, _x.parameters.hiproll_comp, _x.parameters.tstep, _x.parameters.tzmp, _x.parameters.velfast_forward, _x.parameters.velfast_turn, _x.parameters.angkle_supp_factor, _x.parameters.foot_y, _x.parameters.foot_x, _x.parameters.stand_offset, _x.parameters.body_height, _x.parameters.step_height, _x.parameters.belly_roll, _x.parameters.belly_hip, _x.parameters.bodytilt, _x.parameters.ankleX_fact, _x.parameters.ankleX_deadband, _x.parameters.ankleX_maxVal, _x.parameters.ankleY_fact, _x.parameters.ankleY_deadband, _x.parameters.ankleY_maxVal, _x.parameters.kneeX_fact, _x.parameters.kneeX_deadband, _x.parameters.kneeX_maxVal, _x.parameters.hipY_fact, _x.parameters.hipY_deadband, _x.parameters.hipY_maxVal, _x.parameters.armY_fact, _x.parameters.armY_deadband, _x.parameters.armY_maxVal, _x.parameters.armX_fact, _x.parameters.armX_deadband, _x.parameters.armX_maxVal, _x.parameters.ballPosX, _x.parameters.ballPosY, _x.parameters.ballPosZ, _x.parameters.goalPosX, _x.parameters.goalPosY, _x.parameters.goalPosZ, _x.parameters.power, _x.parameters.TRetract, _x.parameters.TKick, _x.parameters.TRising, _x.parameters.TDown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = zmp_walking_module_msgs.msg.ZMPWalkingParam()
      end = 0
      _x = self
      start = end
      end += 334
      (_x.parameters.feedback_, _x.parameters.L_Shift, _x.parameters.L_Lift, _x.parameters.L_P_Kick, _x.parameters.L_P_Cool, _x.parameters.R_Shift, _x.parameters.R_Lift, _x.parameters.R_P_Kick, _x.parameters.R_P_Cool, _x.parameters.Kp, _x.parameters.Kd, _x.parameters.TH1, _x.parameters.TH2, _x.parameters.Acc, _x.parameters.KpP, _x.parameters.KpR, _x.parameters.KdP, _x.parameters.KdR, _x.parameters.Ki, _x.parameters.zmp_vx, _x.parameters.zmp_vy, _x.parameters.zmp_vphi, _x.parameters.m_zmp_vx, _x.parameters.m_zmp_vy, _x.parameters.m_zmp_vphi, _x.parameters.zmp_vx_man, _x.parameters.zmp_useGyro, _x.parameters.arm_pitch, _x.parameters.arm_roll, _x.parameters.arm_elbow, _x.parameters.supp_front, _x.parameters.supp_front2, _x.parameters.supp_turn, _x.parameters.supp_side_x, _x.parameters.supp_side_y, _x.parameters.supp_x, _x.parameters.supp_y, _x.parameters.suppmod_y_init, _x.parameters.turncomp_thrs, _x.parameters.turn_comp, _x.parameters.accel_comp, _x.parameters.front_comp, _x.parameters.hiproll_comp, _x.parameters.tstep, _x.parameters.tzmp, _x.parameters.velfast_forward, _x.parameters.velfast_turn, _x.parameters.angkle_supp_factor, _x.parameters.foot_y, _x.parameters.foot_x, _x.parameters.stand_offset, _x.parameters.body_height, _x.parameters.step_height, _x.parameters.belly_roll, _x.parameters.belly_hip, _x.parameters.bodytilt, _x.parameters.ankleX_fact, _x.parameters.ankleX_deadband, _x.parameters.ankleX_maxVal, _x.parameters.ankleY_fact, _x.parameters.ankleY_deadband, _x.parameters.ankleY_maxVal, _x.parameters.kneeX_fact, _x.parameters.kneeX_deadband, _x.parameters.kneeX_maxVal, _x.parameters.hipY_fact, _x.parameters.hipY_deadband, _x.parameters.hipY_maxVal, _x.parameters.armY_fact, _x.parameters.armY_deadband, _x.parameters.armY_maxVal, _x.parameters.armX_fact, _x.parameters.armX_deadband, _x.parameters.armX_maxVal, _x.parameters.ballPosX, _x.parameters.ballPosY, _x.parameters.ballPosZ, _x.parameters.goalPosX, _x.parameters.goalPosY, _x.parameters.goalPosZ, _x.parameters.power, _x.parameters.TRetract, _x.parameters.TKick, _x.parameters.TRising, _x.parameters.TDown,) = _get_struct_B25fB58f().unpack(str[start:end])
      self.parameters.feedback_ = bool(self.parameters.feedback_)
      self.parameters.zmp_useGyro = bool(self.parameters.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B25fB58f().pack(_x.parameters.feedback_, _x.parameters.L_Shift, _x.parameters.L_Lift, _x.parameters.L_P_Kick, _x.parameters.L_P_Cool, _x.parameters.R_Shift, _x.parameters.R_Lift, _x.parameters.R_P_Kick, _x.parameters.R_P_Cool, _x.parameters.Kp, _x.parameters.Kd, _x.parameters.TH1, _x.parameters.TH2, _x.parameters.Acc, _x.parameters.KpP, _x.parameters.KpR, _x.parameters.KdP, _x.parameters.KdR, _x.parameters.Ki, _x.parameters.zmp_vx, _x.parameters.zmp_vy, _x.parameters.zmp_vphi, _x.parameters.m_zmp_vx, _x.parameters.m_zmp_vy, _x.parameters.m_zmp_vphi, _x.parameters.zmp_vx_man, _x.parameters.zmp_useGyro, _x.parameters.arm_pitch, _x.parameters.arm_roll, _x.parameters.arm_elbow, _x.parameters.supp_front, _x.parameters.supp_front2, _x.parameters.supp_turn, _x.parameters.supp_side_x, _x.parameters.supp_side_y, _x.parameters.supp_x, _x.parameters.supp_y, _x.parameters.suppmod_y_init, _x.parameters.turncomp_thrs, _x.parameters.turn_comp, _x.parameters.accel_comp, _x.parameters.front_comp, _x.parameters.hiproll_comp, _x.parameters.tstep, _x.parameters.tzmp, _x.parameters.velfast_forward, _x.parameters.velfast_turn, _x.parameters.angkle_supp_factor, _x.parameters.foot_y, _x.parameters.foot_x, _x.parameters.stand_offset, _x.parameters.body_height, _x.parameters.step_height, _x.parameters.belly_roll, _x.parameters.belly_hip, _x.parameters.bodytilt, _x.parameters.ankleX_fact, _x.parameters.ankleX_deadband, _x.parameters.ankleX_maxVal, _x.parameters.ankleY_fact, _x.parameters.ankleY_deadband, _x.parameters.ankleY_maxVal, _x.parameters.kneeX_fact, _x.parameters.kneeX_deadband, _x.parameters.kneeX_maxVal, _x.parameters.hipY_fact, _x.parameters.hipY_deadband, _x.parameters.hipY_maxVal, _x.parameters.armY_fact, _x.parameters.armY_deadband, _x.parameters.armY_maxVal, _x.parameters.armX_fact, _x.parameters.armX_deadband, _x.parameters.armX_maxVal, _x.parameters.ballPosX, _x.parameters.ballPosY, _x.parameters.ballPosZ, _x.parameters.goalPosX, _x.parameters.goalPosY, _x.parameters.goalPosZ, _x.parameters.power, _x.parameters.TRetract, _x.parameters.TKick, _x.parameters.TRising, _x.parameters.TDown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = zmp_walking_module_msgs.msg.ZMPWalkingParam()
      end = 0
      _x = self
      start = end
      end += 334
      (_x.parameters.feedback_, _x.parameters.L_Shift, _x.parameters.L_Lift, _x.parameters.L_P_Kick, _x.parameters.L_P_Cool, _x.parameters.R_Shift, _x.parameters.R_Lift, _x.parameters.R_P_Kick, _x.parameters.R_P_Cool, _x.parameters.Kp, _x.parameters.Kd, _x.parameters.TH1, _x.parameters.TH2, _x.parameters.Acc, _x.parameters.KpP, _x.parameters.KpR, _x.parameters.KdP, _x.parameters.KdR, _x.parameters.Ki, _x.parameters.zmp_vx, _x.parameters.zmp_vy, _x.parameters.zmp_vphi, _x.parameters.m_zmp_vx, _x.parameters.m_zmp_vy, _x.parameters.m_zmp_vphi, _x.parameters.zmp_vx_man, _x.parameters.zmp_useGyro, _x.parameters.arm_pitch, _x.parameters.arm_roll, _x.parameters.arm_elbow, _x.parameters.supp_front, _x.parameters.supp_front2, _x.parameters.supp_turn, _x.parameters.supp_side_x, _x.parameters.supp_side_y, _x.parameters.supp_x, _x.parameters.supp_y, _x.parameters.suppmod_y_init, _x.parameters.turncomp_thrs, _x.parameters.turn_comp, _x.parameters.accel_comp, _x.parameters.front_comp, _x.parameters.hiproll_comp, _x.parameters.tstep, _x.parameters.tzmp, _x.parameters.velfast_forward, _x.parameters.velfast_turn, _x.parameters.angkle_supp_factor, _x.parameters.foot_y, _x.parameters.foot_x, _x.parameters.stand_offset, _x.parameters.body_height, _x.parameters.step_height, _x.parameters.belly_roll, _x.parameters.belly_hip, _x.parameters.bodytilt, _x.parameters.ankleX_fact, _x.parameters.ankleX_deadband, _x.parameters.ankleX_maxVal, _x.parameters.ankleY_fact, _x.parameters.ankleY_deadband, _x.parameters.ankleY_maxVal, _x.parameters.kneeX_fact, _x.parameters.kneeX_deadband, _x.parameters.kneeX_maxVal, _x.parameters.hipY_fact, _x.parameters.hipY_deadband, _x.parameters.hipY_maxVal, _x.parameters.armY_fact, _x.parameters.armY_deadband, _x.parameters.armY_maxVal, _x.parameters.armX_fact, _x.parameters.armX_deadband, _x.parameters.armX_maxVal, _x.parameters.ballPosX, _x.parameters.ballPosY, _x.parameters.ballPosZ, _x.parameters.goalPosX, _x.parameters.goalPosY, _x.parameters.goalPosZ, _x.parameters.power, _x.parameters.TRetract, _x.parameters.TKick, _x.parameters.TRising, _x.parameters.TDown,) = _get_struct_B25fB58f().unpack(str[start:end])
      self.parameters.feedback_ = bool(self.parameters.feedback_)
      self.parameters.zmp_useGyro = bool(self.parameters.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B25fB58f = None
def _get_struct_B25fB58f():
    global _struct_B25fB58f
    if _struct_B25fB58f is None:
        _struct_B25fB58f = struct.Struct("<B25fB58f")
    return _struct_B25fB58f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zmp_walking_module_msgs/SetZMPParamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetZMPParamResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "zmp_walking_module_msgs/SetZMPParamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool            result

"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetZMPParamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetZMPParam(object):
  _type          = 'zmp_walking_module_msgs/SetZMPParam'
  _md5sum = '5e9b025a73e0773bcc6bbe494dae167b'
  _request_class  = SetZMPParamRequest
  _response_class = SetZMPParamResponse
