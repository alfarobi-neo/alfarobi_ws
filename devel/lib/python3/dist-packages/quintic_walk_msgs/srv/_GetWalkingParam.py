# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quintic_walk_msgs/GetWalkingParamRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetWalkingParamRequest(genpy.Message):
  _md5sum = "d964a0520d7b14bf821ec75afc464385"
  _type = "quintic_walk_msgs/GetWalkingParamRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool            get_param
"""
  __slots__ = ['get_param']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       get_param

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWalkingParamRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.get_param is None:
        self.get_param = False
    else:
      self.get_param = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.get_param
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.get_param,) = _get_struct_B().unpack(str[start:end])
      self.get_param = bool(self.get_param)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.get_param
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.get_param,) = _get_struct_B().unpack(str[start:end])
      self.get_param = bool(self.get_param)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from quintic_walk_msgs/GetWalkingParamResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import quintic_walk_msgs.msg

class GetWalkingParamResponse(genpy.Message):
  _md5sum = "f8e3c9187b2219005ed324e21ce9d8a0"
  _type = "quintic_walk_msgs/GetWalkingParamResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WalkingParam    parameters

================================================================================
MSG: quintic_walk_msgs/WalkingParam
float32 freq
float32 doubleSupportRatio
float32 footDistance
float32 footRise
float32 footPutDownZOffset
float32 footPutDownPhase
float32 footApexPhase
float32 footOvershootRatio
float32 footOvershootPhase
float32 trunkHeight
float32 trunkPitch
float32 trunkPhase
float32 trunkXOffset
float32 trunkYOffset
float32 trunkSwing
float32 trunkPause
float32 trunkXOffsetPCoefForward
float32 trunkXOffsetPCoefTurn
float32 trunkPitchPCoefForward
float32 trunkPitchPCoefTurn
bool trunkYOnlyInDoubleSupport

float32 XMove
float32 YMove
float32 ZMove
string mode
bool tuning

float32 D_ANKLE_P_qw
float32 D_KNEE_qw
float32 D_HIP_P_qw


float32 KP_P_qw
float32 KD_P_qw
float32 KI_P_qw



float32 ShoulderGain_qw
float32 setpointPitch
float32 pitch_error_tol

float32 KP_X_qw
float32 KD_X_qw
float32 KI_X_qw


float32 Angle_0
float32 Angle_1
float32 Angle_2
float32 Angle_3
float32 Angle_4

float32 KD_0
float32 KD_1
float32 KD_2
float32 KD_3
float32 KD_4

float32 Gyro_0
float32 Gyro_1
float32 Gyro_2
float32 Gyro_3
float32 Gyro_4

float32 KP_0
float32 KP_1
float32 KP_2
float32 KP_3
float32 KP_4


"""
  __slots__ = ['parameters']
  _slot_types = ['quintic_walk_msgs/WalkingParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       parameters

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWalkingParamResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.parameters is None:
        self.parameters = quintic_walk_msgs.msg.WalkingParam()
    else:
      self.parameters = quintic_walk_msgs.msg.WalkingParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20fB3f().pack(_x.parameters.freq, _x.parameters.doubleSupportRatio, _x.parameters.footDistance, _x.parameters.footRise, _x.parameters.footPutDownZOffset, _x.parameters.footPutDownPhase, _x.parameters.footApexPhase, _x.parameters.footOvershootRatio, _x.parameters.footOvershootPhase, _x.parameters.trunkHeight, _x.parameters.trunkPitch, _x.parameters.trunkPhase, _x.parameters.trunkXOffset, _x.parameters.trunkYOffset, _x.parameters.trunkSwing, _x.parameters.trunkPause, _x.parameters.trunkXOffsetPCoefForward, _x.parameters.trunkXOffsetPCoefTurn, _x.parameters.trunkPitchPCoefForward, _x.parameters.trunkPitchPCoefTurn, _x.parameters.trunkYOnlyInDoubleSupport, _x.parameters.XMove, _x.parameters.YMove, _x.parameters.ZMove))
      _x = self.parameters.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B32f().pack(_x.parameters.tuning, _x.parameters.D_ANKLE_P_qw, _x.parameters.D_KNEE_qw, _x.parameters.D_HIP_P_qw, _x.parameters.KP_P_qw, _x.parameters.KD_P_qw, _x.parameters.KI_P_qw, _x.parameters.ShoulderGain_qw, _x.parameters.setpointPitch, _x.parameters.pitch_error_tol, _x.parameters.KP_X_qw, _x.parameters.KD_X_qw, _x.parameters.KI_X_qw, _x.parameters.Angle_0, _x.parameters.Angle_1, _x.parameters.Angle_2, _x.parameters.Angle_3, _x.parameters.Angle_4, _x.parameters.KD_0, _x.parameters.KD_1, _x.parameters.KD_2, _x.parameters.KD_3, _x.parameters.KD_4, _x.parameters.Gyro_0, _x.parameters.Gyro_1, _x.parameters.Gyro_2, _x.parameters.Gyro_3, _x.parameters.Gyro_4, _x.parameters.KP_0, _x.parameters.KP_1, _x.parameters.KP_2, _x.parameters.KP_3, _x.parameters.KP_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = quintic_walk_msgs.msg.WalkingParam()
      end = 0
      _x = self
      start = end
      end += 93
      (_x.parameters.freq, _x.parameters.doubleSupportRatio, _x.parameters.footDistance, _x.parameters.footRise, _x.parameters.footPutDownZOffset, _x.parameters.footPutDownPhase, _x.parameters.footApexPhase, _x.parameters.footOvershootRatio, _x.parameters.footOvershootPhase, _x.parameters.trunkHeight, _x.parameters.trunkPitch, _x.parameters.trunkPhase, _x.parameters.trunkXOffset, _x.parameters.trunkYOffset, _x.parameters.trunkSwing, _x.parameters.trunkPause, _x.parameters.trunkXOffsetPCoefForward, _x.parameters.trunkXOffsetPCoefTurn, _x.parameters.trunkPitchPCoefForward, _x.parameters.trunkPitchPCoefTurn, _x.parameters.trunkYOnlyInDoubleSupport, _x.parameters.XMove, _x.parameters.YMove, _x.parameters.ZMove,) = _get_struct_20fB3f().unpack(str[start:end])
      self.parameters.trunkYOnlyInDoubleSupport = bool(self.parameters.trunkYOnlyInDoubleSupport)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parameters.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parameters.mode = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.parameters.tuning, _x.parameters.D_ANKLE_P_qw, _x.parameters.D_KNEE_qw, _x.parameters.D_HIP_P_qw, _x.parameters.KP_P_qw, _x.parameters.KD_P_qw, _x.parameters.KI_P_qw, _x.parameters.ShoulderGain_qw, _x.parameters.setpointPitch, _x.parameters.pitch_error_tol, _x.parameters.KP_X_qw, _x.parameters.KD_X_qw, _x.parameters.KI_X_qw, _x.parameters.Angle_0, _x.parameters.Angle_1, _x.parameters.Angle_2, _x.parameters.Angle_3, _x.parameters.Angle_4, _x.parameters.KD_0, _x.parameters.KD_1, _x.parameters.KD_2, _x.parameters.KD_3, _x.parameters.KD_4, _x.parameters.Gyro_0, _x.parameters.Gyro_1, _x.parameters.Gyro_2, _x.parameters.Gyro_3, _x.parameters.Gyro_4, _x.parameters.KP_0, _x.parameters.KP_1, _x.parameters.KP_2, _x.parameters.KP_3, _x.parameters.KP_4,) = _get_struct_B32f().unpack(str[start:end])
      self.parameters.tuning = bool(self.parameters.tuning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20fB3f().pack(_x.parameters.freq, _x.parameters.doubleSupportRatio, _x.parameters.footDistance, _x.parameters.footRise, _x.parameters.footPutDownZOffset, _x.parameters.footPutDownPhase, _x.parameters.footApexPhase, _x.parameters.footOvershootRatio, _x.parameters.footOvershootPhase, _x.parameters.trunkHeight, _x.parameters.trunkPitch, _x.parameters.trunkPhase, _x.parameters.trunkXOffset, _x.parameters.trunkYOffset, _x.parameters.trunkSwing, _x.parameters.trunkPause, _x.parameters.trunkXOffsetPCoefForward, _x.parameters.trunkXOffsetPCoefTurn, _x.parameters.trunkPitchPCoefForward, _x.parameters.trunkPitchPCoefTurn, _x.parameters.trunkYOnlyInDoubleSupport, _x.parameters.XMove, _x.parameters.YMove, _x.parameters.ZMove))
      _x = self.parameters.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B32f().pack(_x.parameters.tuning, _x.parameters.D_ANKLE_P_qw, _x.parameters.D_KNEE_qw, _x.parameters.D_HIP_P_qw, _x.parameters.KP_P_qw, _x.parameters.KD_P_qw, _x.parameters.KI_P_qw, _x.parameters.ShoulderGain_qw, _x.parameters.setpointPitch, _x.parameters.pitch_error_tol, _x.parameters.KP_X_qw, _x.parameters.KD_X_qw, _x.parameters.KI_X_qw, _x.parameters.Angle_0, _x.parameters.Angle_1, _x.parameters.Angle_2, _x.parameters.Angle_3, _x.parameters.Angle_4, _x.parameters.KD_0, _x.parameters.KD_1, _x.parameters.KD_2, _x.parameters.KD_3, _x.parameters.KD_4, _x.parameters.Gyro_0, _x.parameters.Gyro_1, _x.parameters.Gyro_2, _x.parameters.Gyro_3, _x.parameters.Gyro_4, _x.parameters.KP_0, _x.parameters.KP_1, _x.parameters.KP_2, _x.parameters.KP_3, _x.parameters.KP_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.parameters is None:
        self.parameters = quintic_walk_msgs.msg.WalkingParam()
      end = 0
      _x = self
      start = end
      end += 93
      (_x.parameters.freq, _x.parameters.doubleSupportRatio, _x.parameters.footDistance, _x.parameters.footRise, _x.parameters.footPutDownZOffset, _x.parameters.footPutDownPhase, _x.parameters.footApexPhase, _x.parameters.footOvershootRatio, _x.parameters.footOvershootPhase, _x.parameters.trunkHeight, _x.parameters.trunkPitch, _x.parameters.trunkPhase, _x.parameters.trunkXOffset, _x.parameters.trunkYOffset, _x.parameters.trunkSwing, _x.parameters.trunkPause, _x.parameters.trunkXOffsetPCoefForward, _x.parameters.trunkXOffsetPCoefTurn, _x.parameters.trunkPitchPCoefForward, _x.parameters.trunkPitchPCoefTurn, _x.parameters.trunkYOnlyInDoubleSupport, _x.parameters.XMove, _x.parameters.YMove, _x.parameters.ZMove,) = _get_struct_20fB3f().unpack(str[start:end])
      self.parameters.trunkYOnlyInDoubleSupport = bool(self.parameters.trunkYOnlyInDoubleSupport)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.parameters.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.parameters.mode = str[start:end]
      _x = self
      start = end
      end += 129
      (_x.parameters.tuning, _x.parameters.D_ANKLE_P_qw, _x.parameters.D_KNEE_qw, _x.parameters.D_HIP_P_qw, _x.parameters.KP_P_qw, _x.parameters.KD_P_qw, _x.parameters.KI_P_qw, _x.parameters.ShoulderGain_qw, _x.parameters.setpointPitch, _x.parameters.pitch_error_tol, _x.parameters.KP_X_qw, _x.parameters.KD_X_qw, _x.parameters.KI_X_qw, _x.parameters.Angle_0, _x.parameters.Angle_1, _x.parameters.Angle_2, _x.parameters.Angle_3, _x.parameters.Angle_4, _x.parameters.KD_0, _x.parameters.KD_1, _x.parameters.KD_2, _x.parameters.KD_3, _x.parameters.KD_4, _x.parameters.Gyro_0, _x.parameters.Gyro_1, _x.parameters.Gyro_2, _x.parameters.Gyro_3, _x.parameters.Gyro_4, _x.parameters.KP_0, _x.parameters.KP_1, _x.parameters.KP_2, _x.parameters.KP_3, _x.parameters.KP_4,) = _get_struct_B32f().unpack(str[start:end])
      self.parameters.tuning = bool(self.parameters.tuning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20fB3f = None
def _get_struct_20fB3f():
    global _struct_20fB3f
    if _struct_20fB3f is None:
        _struct_20fB3f = struct.Struct("<20fB3f")
    return _struct_20fB3f
_struct_B32f = None
def _get_struct_B32f():
    global _struct_B32f
    if _struct_B32f is None:
        _struct_B32f = struct.Struct("<B32f")
    return _struct_B32f
class GetWalkingParam(object):
  _type          = 'quintic_walk_msgs/GetWalkingParam'
  _md5sum = 'cc37d4e8b602e9bf4bc31537e92d2dca'
  _request_class  = GetWalkingParamRequest
  _response_class = GetWalkingParamResponse
