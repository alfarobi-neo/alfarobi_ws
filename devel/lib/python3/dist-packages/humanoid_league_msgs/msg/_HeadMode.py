# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from humanoid_league_msgs/HeadMode.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HeadMode(genpy.Message):
  _md5sum = "eb98960a74192c06acad277ece0eb0d1"
  _type = "humanoid_league_msgs/HeadMode"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message is used for communicating between the body behaviour and the head behaviour
# The body tells the head by this message what it shall do

# Search for Ball and track it if found
uint8 BALL_MODE=0
# Search for goal posts, mainly to locate the robot on the field
uint8 POST_MODE=1
# Track ball and goal by constantly switching between both
uint8 BALL_GOAL_TRACKING=2
# Look generally for all features on the field (ball, goals, corners, center point)
uint8 FIELD_FEATURES=3
# Look for features outside of the field (perimeter advertising, walls, etc).
# Can be used for localization using features on the ceiling.
uint8 NON_FIELD_FEATURES=4
# Simply look down to its feet.
uint8 LOOK_DOWN=5
# Simply look directly forward
uint8 LOOK_FORWARD=7
#Don't move the head
uint8 DONT_MOVE=8
# Look to the ceiling, for example for visual compas
uint8 LOOK_UP=9
uint8 headMode"""
  # Pseudo-constants
  BALL_MODE = 0
  POST_MODE = 1
  BALL_GOAL_TRACKING = 2
  FIELD_FEATURES = 3
  NON_FIELD_FEATURES = 4
  LOOK_DOWN = 5
  LOOK_FORWARD = 7
  DONT_MOVE = 8
  LOOK_UP = 9

  __slots__ = ['headMode']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       headMode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HeadMode, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.headMode is None:
        self.headMode = 0
    else:
      self.headMode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.headMode
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.headMode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.headMode
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.headMode,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
