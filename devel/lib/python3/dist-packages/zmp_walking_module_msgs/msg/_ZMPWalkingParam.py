# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zmp_walking_module_msgs/ZMPWalkingParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ZMPWalkingParam(genpy.Message):
  _md5sum = "18fd4f4232f23b551ffb99639a489507"
  _type = "zmp_walking_module_msgs/ZMPWalkingParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """########## ZMP WALKING BIT-BOTS ###########

bool feedback_

float32 L_Shift
float32 L_Lift
float32 L_P_Kick
float32 L_P_Cool

float32 R_Shift
float32 R_Lift
float32 R_P_Kick
float32 R_P_Cool

float32 Kp
float32 Kd
float32 TH1
float32 TH2
float32 Acc

float32 KpP
float32 KpR
float32 KdP
float32 KdR
float32 Ki

float32 zmp_vx
float32 zmp_vy
float32 zmp_vphi
float32 m_zmp_vx
float32 m_zmp_vy
float32 m_zmp_vphi
float32 zmp_vx_man

bool zmp_useGyro
float32 arm_pitch
float32 arm_roll
float32 arm_elbow

float32 supp_front
float32 supp_front2
float32 supp_turn
float32 supp_side_x
float32 supp_side_y
float32 supp_x
float32 supp_y

float32 suppmod_y_init
float32 turncomp_thrs
float32 turn_comp
float32 accel_comp
float32 front_comp
float32 hiproll_comp
float32 tstep
float32 tzmp
float32 velfast_forward
float32 velfast_turn
float32 angkle_supp_factor

float32 foot_y
float32 foot_x
float32 stand_offset
float32 body_height
float32 step_height
float32 belly_roll
float32 belly_hip
float32 bodytilt

float32 ankleX_fact
float32 ankleX_deadband
float32 ankleX_maxVal

float32 ankleY_fact
float32 ankleY_deadband
float32 ankleY_maxVal

float32 kneeX_fact
float32 kneeX_deadband
float32 kneeX_maxVal

float32 hipY_fact
float32 hipY_deadband
float32 hipY_maxVal

float32 armY_fact
float32 armY_deadband
float32 armY_maxVal

float32 armX_fact
float32 armX_deadband
float32 armX_maxVal

float32 ballPosX
float32 ballPosY
float32 ballPosZ

float32 goalPosX
float32 goalPosY
float32 goalPosZ

float32 power
float32 TRetract
float32 TKick
float32 TRising
float32 TDown
"""
  __slots__ = ['feedback_','L_Shift','L_Lift','L_P_Kick','L_P_Cool','R_Shift','R_Lift','R_P_Kick','R_P_Cool','Kp','Kd','TH1','TH2','Acc','KpP','KpR','KdP','KdR','Ki','zmp_vx','zmp_vy','zmp_vphi','m_zmp_vx','m_zmp_vy','m_zmp_vphi','zmp_vx_man','zmp_useGyro','arm_pitch','arm_roll','arm_elbow','supp_front','supp_front2','supp_turn','supp_side_x','supp_side_y','supp_x','supp_y','suppmod_y_init','turncomp_thrs','turn_comp','accel_comp','front_comp','hiproll_comp','tstep','tzmp','velfast_forward','velfast_turn','angkle_supp_factor','foot_y','foot_x','stand_offset','body_height','step_height','belly_roll','belly_hip','bodytilt','ankleX_fact','ankleX_deadband','ankleX_maxVal','ankleY_fact','ankleY_deadband','ankleY_maxVal','kneeX_fact','kneeX_deadband','kneeX_maxVal','hipY_fact','hipY_deadband','hipY_maxVal','armY_fact','armY_deadband','armY_maxVal','armX_fact','armX_deadband','armX_maxVal','ballPosX','ballPosY','ballPosZ','goalPosX','goalPosY','goalPosZ','power','TRetract','TKick','TRising','TDown']
  _slot_types = ['bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       feedback_,L_Shift,L_Lift,L_P_Kick,L_P_Cool,R_Shift,R_Lift,R_P_Kick,R_P_Cool,Kp,Kd,TH1,TH2,Acc,KpP,KpR,KdP,KdR,Ki,zmp_vx,zmp_vy,zmp_vphi,m_zmp_vx,m_zmp_vy,m_zmp_vphi,zmp_vx_man,zmp_useGyro,arm_pitch,arm_roll,arm_elbow,supp_front,supp_front2,supp_turn,supp_side_x,supp_side_y,supp_x,supp_y,suppmod_y_init,turncomp_thrs,turn_comp,accel_comp,front_comp,hiproll_comp,tstep,tzmp,velfast_forward,velfast_turn,angkle_supp_factor,foot_y,foot_x,stand_offset,body_height,step_height,belly_roll,belly_hip,bodytilt,ankleX_fact,ankleX_deadband,ankleX_maxVal,ankleY_fact,ankleY_deadband,ankleY_maxVal,kneeX_fact,kneeX_deadband,kneeX_maxVal,hipY_fact,hipY_deadband,hipY_maxVal,armY_fact,armY_deadband,armY_maxVal,armX_fact,armX_deadband,armX_maxVal,ballPosX,ballPosY,ballPosZ,goalPosX,goalPosY,goalPosZ,power,TRetract,TKick,TRising,TDown

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ZMPWalkingParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.feedback_ is None:
        self.feedback_ = False
      if self.L_Shift is None:
        self.L_Shift = 0.
      if self.L_Lift is None:
        self.L_Lift = 0.
      if self.L_P_Kick is None:
        self.L_P_Kick = 0.
      if self.L_P_Cool is None:
        self.L_P_Cool = 0.
      if self.R_Shift is None:
        self.R_Shift = 0.
      if self.R_Lift is None:
        self.R_Lift = 0.
      if self.R_P_Kick is None:
        self.R_P_Kick = 0.
      if self.R_P_Cool is None:
        self.R_P_Cool = 0.
      if self.Kp is None:
        self.Kp = 0.
      if self.Kd is None:
        self.Kd = 0.
      if self.TH1 is None:
        self.TH1 = 0.
      if self.TH2 is None:
        self.TH2 = 0.
      if self.Acc is None:
        self.Acc = 0.
      if self.KpP is None:
        self.KpP = 0.
      if self.KpR is None:
        self.KpR = 0.
      if self.KdP is None:
        self.KdP = 0.
      if self.KdR is None:
        self.KdR = 0.
      if self.Ki is None:
        self.Ki = 0.
      if self.zmp_vx is None:
        self.zmp_vx = 0.
      if self.zmp_vy is None:
        self.zmp_vy = 0.
      if self.zmp_vphi is None:
        self.zmp_vphi = 0.
      if self.m_zmp_vx is None:
        self.m_zmp_vx = 0.
      if self.m_zmp_vy is None:
        self.m_zmp_vy = 0.
      if self.m_zmp_vphi is None:
        self.m_zmp_vphi = 0.
      if self.zmp_vx_man is None:
        self.zmp_vx_man = 0.
      if self.zmp_useGyro is None:
        self.zmp_useGyro = False
      if self.arm_pitch is None:
        self.arm_pitch = 0.
      if self.arm_roll is None:
        self.arm_roll = 0.
      if self.arm_elbow is None:
        self.arm_elbow = 0.
      if self.supp_front is None:
        self.supp_front = 0.
      if self.supp_front2 is None:
        self.supp_front2 = 0.
      if self.supp_turn is None:
        self.supp_turn = 0.
      if self.supp_side_x is None:
        self.supp_side_x = 0.
      if self.supp_side_y is None:
        self.supp_side_y = 0.
      if self.supp_x is None:
        self.supp_x = 0.
      if self.supp_y is None:
        self.supp_y = 0.
      if self.suppmod_y_init is None:
        self.suppmod_y_init = 0.
      if self.turncomp_thrs is None:
        self.turncomp_thrs = 0.
      if self.turn_comp is None:
        self.turn_comp = 0.
      if self.accel_comp is None:
        self.accel_comp = 0.
      if self.front_comp is None:
        self.front_comp = 0.
      if self.hiproll_comp is None:
        self.hiproll_comp = 0.
      if self.tstep is None:
        self.tstep = 0.
      if self.tzmp is None:
        self.tzmp = 0.
      if self.velfast_forward is None:
        self.velfast_forward = 0.
      if self.velfast_turn is None:
        self.velfast_turn = 0.
      if self.angkle_supp_factor is None:
        self.angkle_supp_factor = 0.
      if self.foot_y is None:
        self.foot_y = 0.
      if self.foot_x is None:
        self.foot_x = 0.
      if self.stand_offset is None:
        self.stand_offset = 0.
      if self.body_height is None:
        self.body_height = 0.
      if self.step_height is None:
        self.step_height = 0.
      if self.belly_roll is None:
        self.belly_roll = 0.
      if self.belly_hip is None:
        self.belly_hip = 0.
      if self.bodytilt is None:
        self.bodytilt = 0.
      if self.ankleX_fact is None:
        self.ankleX_fact = 0.
      if self.ankleX_deadband is None:
        self.ankleX_deadband = 0.
      if self.ankleX_maxVal is None:
        self.ankleX_maxVal = 0.
      if self.ankleY_fact is None:
        self.ankleY_fact = 0.
      if self.ankleY_deadband is None:
        self.ankleY_deadband = 0.
      if self.ankleY_maxVal is None:
        self.ankleY_maxVal = 0.
      if self.kneeX_fact is None:
        self.kneeX_fact = 0.
      if self.kneeX_deadband is None:
        self.kneeX_deadband = 0.
      if self.kneeX_maxVal is None:
        self.kneeX_maxVal = 0.
      if self.hipY_fact is None:
        self.hipY_fact = 0.
      if self.hipY_deadband is None:
        self.hipY_deadband = 0.
      if self.hipY_maxVal is None:
        self.hipY_maxVal = 0.
      if self.armY_fact is None:
        self.armY_fact = 0.
      if self.armY_deadband is None:
        self.armY_deadband = 0.
      if self.armY_maxVal is None:
        self.armY_maxVal = 0.
      if self.armX_fact is None:
        self.armX_fact = 0.
      if self.armX_deadband is None:
        self.armX_deadband = 0.
      if self.armX_maxVal is None:
        self.armX_maxVal = 0.
      if self.ballPosX is None:
        self.ballPosX = 0.
      if self.ballPosY is None:
        self.ballPosY = 0.
      if self.ballPosZ is None:
        self.ballPosZ = 0.
      if self.goalPosX is None:
        self.goalPosX = 0.
      if self.goalPosY is None:
        self.goalPosY = 0.
      if self.goalPosZ is None:
        self.goalPosZ = 0.
      if self.power is None:
        self.power = 0.
      if self.TRetract is None:
        self.TRetract = 0.
      if self.TKick is None:
        self.TKick = 0.
      if self.TRising is None:
        self.TRising = 0.
      if self.TDown is None:
        self.TDown = 0.
    else:
      self.feedback_ = False
      self.L_Shift = 0.
      self.L_Lift = 0.
      self.L_P_Kick = 0.
      self.L_P_Cool = 0.
      self.R_Shift = 0.
      self.R_Lift = 0.
      self.R_P_Kick = 0.
      self.R_P_Cool = 0.
      self.Kp = 0.
      self.Kd = 0.
      self.TH1 = 0.
      self.TH2 = 0.
      self.Acc = 0.
      self.KpP = 0.
      self.KpR = 0.
      self.KdP = 0.
      self.KdR = 0.
      self.Ki = 0.
      self.zmp_vx = 0.
      self.zmp_vy = 0.
      self.zmp_vphi = 0.
      self.m_zmp_vx = 0.
      self.m_zmp_vy = 0.
      self.m_zmp_vphi = 0.
      self.zmp_vx_man = 0.
      self.zmp_useGyro = False
      self.arm_pitch = 0.
      self.arm_roll = 0.
      self.arm_elbow = 0.
      self.supp_front = 0.
      self.supp_front2 = 0.
      self.supp_turn = 0.
      self.supp_side_x = 0.
      self.supp_side_y = 0.
      self.supp_x = 0.
      self.supp_y = 0.
      self.suppmod_y_init = 0.
      self.turncomp_thrs = 0.
      self.turn_comp = 0.
      self.accel_comp = 0.
      self.front_comp = 0.
      self.hiproll_comp = 0.
      self.tstep = 0.
      self.tzmp = 0.
      self.velfast_forward = 0.
      self.velfast_turn = 0.
      self.angkle_supp_factor = 0.
      self.foot_y = 0.
      self.foot_x = 0.
      self.stand_offset = 0.
      self.body_height = 0.
      self.step_height = 0.
      self.belly_roll = 0.
      self.belly_hip = 0.
      self.bodytilt = 0.
      self.ankleX_fact = 0.
      self.ankleX_deadband = 0.
      self.ankleX_maxVal = 0.
      self.ankleY_fact = 0.
      self.ankleY_deadband = 0.
      self.ankleY_maxVal = 0.
      self.kneeX_fact = 0.
      self.kneeX_deadband = 0.
      self.kneeX_maxVal = 0.
      self.hipY_fact = 0.
      self.hipY_deadband = 0.
      self.hipY_maxVal = 0.
      self.armY_fact = 0.
      self.armY_deadband = 0.
      self.armY_maxVal = 0.
      self.armX_fact = 0.
      self.armX_deadband = 0.
      self.armX_maxVal = 0.
      self.ballPosX = 0.
      self.ballPosY = 0.
      self.ballPosZ = 0.
      self.goalPosX = 0.
      self.goalPosY = 0.
      self.goalPosZ = 0.
      self.power = 0.
      self.TRetract = 0.
      self.TKick = 0.
      self.TRising = 0.
      self.TDown = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B25fB58f().pack(_x.feedback_, _x.L_Shift, _x.L_Lift, _x.L_P_Kick, _x.L_P_Cool, _x.R_Shift, _x.R_Lift, _x.R_P_Kick, _x.R_P_Cool, _x.Kp, _x.Kd, _x.TH1, _x.TH2, _x.Acc, _x.KpP, _x.KpR, _x.KdP, _x.KdR, _x.Ki, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.m_zmp_vx, _x.m_zmp_vy, _x.m_zmp_vphi, _x.zmp_vx_man, _x.zmp_useGyro, _x.arm_pitch, _x.arm_roll, _x.arm_elbow, _x.supp_front, _x.supp_front2, _x.supp_turn, _x.supp_side_x, _x.supp_side_y, _x.supp_x, _x.supp_y, _x.suppmod_y_init, _x.turncomp_thrs, _x.turn_comp, _x.accel_comp, _x.front_comp, _x.hiproll_comp, _x.tstep, _x.tzmp, _x.velfast_forward, _x.velfast_turn, _x.angkle_supp_factor, _x.foot_y, _x.foot_x, _x.stand_offset, _x.body_height, _x.step_height, _x.belly_roll, _x.belly_hip, _x.bodytilt, _x.ankleX_fact, _x.ankleX_deadband, _x.ankleX_maxVal, _x.ankleY_fact, _x.ankleY_deadband, _x.ankleY_maxVal, _x.kneeX_fact, _x.kneeX_deadband, _x.kneeX_maxVal, _x.hipY_fact, _x.hipY_deadband, _x.hipY_maxVal, _x.armY_fact, _x.armY_deadband, _x.armY_maxVal, _x.armX_fact, _x.armX_deadband, _x.armX_maxVal, _x.ballPosX, _x.ballPosY, _x.ballPosZ, _x.goalPosX, _x.goalPosY, _x.goalPosZ, _x.power, _x.TRetract, _x.TKick, _x.TRising, _x.TDown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 334
      (_x.feedback_, _x.L_Shift, _x.L_Lift, _x.L_P_Kick, _x.L_P_Cool, _x.R_Shift, _x.R_Lift, _x.R_P_Kick, _x.R_P_Cool, _x.Kp, _x.Kd, _x.TH1, _x.TH2, _x.Acc, _x.KpP, _x.KpR, _x.KdP, _x.KdR, _x.Ki, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.m_zmp_vx, _x.m_zmp_vy, _x.m_zmp_vphi, _x.zmp_vx_man, _x.zmp_useGyro, _x.arm_pitch, _x.arm_roll, _x.arm_elbow, _x.supp_front, _x.supp_front2, _x.supp_turn, _x.supp_side_x, _x.supp_side_y, _x.supp_x, _x.supp_y, _x.suppmod_y_init, _x.turncomp_thrs, _x.turn_comp, _x.accel_comp, _x.front_comp, _x.hiproll_comp, _x.tstep, _x.tzmp, _x.velfast_forward, _x.velfast_turn, _x.angkle_supp_factor, _x.foot_y, _x.foot_x, _x.stand_offset, _x.body_height, _x.step_height, _x.belly_roll, _x.belly_hip, _x.bodytilt, _x.ankleX_fact, _x.ankleX_deadband, _x.ankleX_maxVal, _x.ankleY_fact, _x.ankleY_deadband, _x.ankleY_maxVal, _x.kneeX_fact, _x.kneeX_deadband, _x.kneeX_maxVal, _x.hipY_fact, _x.hipY_deadband, _x.hipY_maxVal, _x.armY_fact, _x.armY_deadband, _x.armY_maxVal, _x.armX_fact, _x.armX_deadband, _x.armX_maxVal, _x.ballPosX, _x.ballPosY, _x.ballPosZ, _x.goalPosX, _x.goalPosY, _x.goalPosZ, _x.power, _x.TRetract, _x.TKick, _x.TRising, _x.TDown,) = _get_struct_B25fB58f().unpack(str[start:end])
      self.feedback_ = bool(self.feedback_)
      self.zmp_useGyro = bool(self.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B25fB58f().pack(_x.feedback_, _x.L_Shift, _x.L_Lift, _x.L_P_Kick, _x.L_P_Cool, _x.R_Shift, _x.R_Lift, _x.R_P_Kick, _x.R_P_Cool, _x.Kp, _x.Kd, _x.TH1, _x.TH2, _x.Acc, _x.KpP, _x.KpR, _x.KdP, _x.KdR, _x.Ki, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.m_zmp_vx, _x.m_zmp_vy, _x.m_zmp_vphi, _x.zmp_vx_man, _x.zmp_useGyro, _x.arm_pitch, _x.arm_roll, _x.arm_elbow, _x.supp_front, _x.supp_front2, _x.supp_turn, _x.supp_side_x, _x.supp_side_y, _x.supp_x, _x.supp_y, _x.suppmod_y_init, _x.turncomp_thrs, _x.turn_comp, _x.accel_comp, _x.front_comp, _x.hiproll_comp, _x.tstep, _x.tzmp, _x.velfast_forward, _x.velfast_turn, _x.angkle_supp_factor, _x.foot_y, _x.foot_x, _x.stand_offset, _x.body_height, _x.step_height, _x.belly_roll, _x.belly_hip, _x.bodytilt, _x.ankleX_fact, _x.ankleX_deadband, _x.ankleX_maxVal, _x.ankleY_fact, _x.ankleY_deadband, _x.ankleY_maxVal, _x.kneeX_fact, _x.kneeX_deadband, _x.kneeX_maxVal, _x.hipY_fact, _x.hipY_deadband, _x.hipY_maxVal, _x.armY_fact, _x.armY_deadband, _x.armY_maxVal, _x.armX_fact, _x.armX_deadband, _x.armX_maxVal, _x.ballPosX, _x.ballPosY, _x.ballPosZ, _x.goalPosX, _x.goalPosY, _x.goalPosZ, _x.power, _x.TRetract, _x.TKick, _x.TRising, _x.TDown))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 334
      (_x.feedback_, _x.L_Shift, _x.L_Lift, _x.L_P_Kick, _x.L_P_Cool, _x.R_Shift, _x.R_Lift, _x.R_P_Kick, _x.R_P_Cool, _x.Kp, _x.Kd, _x.TH1, _x.TH2, _x.Acc, _x.KpP, _x.KpR, _x.KdP, _x.KdR, _x.Ki, _x.zmp_vx, _x.zmp_vy, _x.zmp_vphi, _x.m_zmp_vx, _x.m_zmp_vy, _x.m_zmp_vphi, _x.zmp_vx_man, _x.zmp_useGyro, _x.arm_pitch, _x.arm_roll, _x.arm_elbow, _x.supp_front, _x.supp_front2, _x.supp_turn, _x.supp_side_x, _x.supp_side_y, _x.supp_x, _x.supp_y, _x.suppmod_y_init, _x.turncomp_thrs, _x.turn_comp, _x.accel_comp, _x.front_comp, _x.hiproll_comp, _x.tstep, _x.tzmp, _x.velfast_forward, _x.velfast_turn, _x.angkle_supp_factor, _x.foot_y, _x.foot_x, _x.stand_offset, _x.body_height, _x.step_height, _x.belly_roll, _x.belly_hip, _x.bodytilt, _x.ankleX_fact, _x.ankleX_deadband, _x.ankleX_maxVal, _x.ankleY_fact, _x.ankleY_deadband, _x.ankleY_maxVal, _x.kneeX_fact, _x.kneeX_deadband, _x.kneeX_maxVal, _x.hipY_fact, _x.hipY_deadband, _x.hipY_maxVal, _x.armY_fact, _x.armY_deadband, _x.armY_maxVal, _x.armX_fact, _x.armX_deadband, _x.armX_maxVal, _x.ballPosX, _x.ballPosY, _x.ballPosZ, _x.goalPosX, _x.goalPosY, _x.goalPosZ, _x.power, _x.TRetract, _x.TKick, _x.TRising, _x.TDown,) = _get_struct_B25fB58f().unpack(str[start:end])
      self.feedback_ = bool(self.feedback_)
      self.zmp_useGyro = bool(self.zmp_useGyro)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B25fB58f = None
def _get_struct_B25fB58f():
    global _struct_B25fB58f
    if _struct_B25fB58f is None:
        _struct_B25fB58f = struct.Struct("<B25fB58f")
    return _struct_B25fB58f
