# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kicking_module_msgs/KickingParam.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KickingParam(genpy.Message):
  _md5sum = "1544ae05e02ea9fbdc689d7fea677df9"
  _type = "kicking_module_msgs/KickingParam"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Torso_X
float32 Torso_Y
float32 Torso_Z
float32 L_Shift_X
float32 L_Shift_Y
float32 L_Shift_Z
float32 R_Shift_X
float32 R_Shift_Y
float32 R_Shift_Z
float32 L_Lift_X
float32 L_Lift_Y
float32 L_Lift_Z
float32 R_Lift_X
float32 R_Lift_Y
float32 R_Lift_Z
float32 L_Swing_X
float32 L_Swing_Y
float32 L_Swing_Z
float32 R_Swing_X
float32 R_Swing_Y
float32 R_Swing_Z
float32 L_Retract_X
float32 L_Retract_Y
float32 L_Retract_Z
float32 R_Retract_X
float32 R_Retract_Y
float32 R_Retract_Z
float32 Torso_Pitch
float32 Shift_Roll
float32 Lift_Roll
float32 Lift_Pitch
float32 Swing_Roll
float32 Swing_Pitch
float32 Retract_Roll
float32 Retract_Pitch
float32 SHIFT_TIME
float32 LIFT_TIME
float32 SWING_TIME
float32 RETRACT_TIME
float32 LANDING_TIME
float32 FINISHED_TIME"""
  __slots__ = ['Torso_X','Torso_Y','Torso_Z','L_Shift_X','L_Shift_Y','L_Shift_Z','R_Shift_X','R_Shift_Y','R_Shift_Z','L_Lift_X','L_Lift_Y','L_Lift_Z','R_Lift_X','R_Lift_Y','R_Lift_Z','L_Swing_X','L_Swing_Y','L_Swing_Z','R_Swing_X','R_Swing_Y','R_Swing_Z','L_Retract_X','L_Retract_Y','L_Retract_Z','R_Retract_X','R_Retract_Y','R_Retract_Z','Torso_Pitch','Shift_Roll','Lift_Roll','Lift_Pitch','Swing_Roll','Swing_Pitch','Retract_Roll','Retract_Pitch','SHIFT_TIME','LIFT_TIME','SWING_TIME','RETRACT_TIME','LANDING_TIME','FINISHED_TIME']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Torso_X,Torso_Y,Torso_Z,L_Shift_X,L_Shift_Y,L_Shift_Z,R_Shift_X,R_Shift_Y,R_Shift_Z,L_Lift_X,L_Lift_Y,L_Lift_Z,R_Lift_X,R_Lift_Y,R_Lift_Z,L_Swing_X,L_Swing_Y,L_Swing_Z,R_Swing_X,R_Swing_Y,R_Swing_Z,L_Retract_X,L_Retract_Y,L_Retract_Z,R_Retract_X,R_Retract_Y,R_Retract_Z,Torso_Pitch,Shift_Roll,Lift_Roll,Lift_Pitch,Swing_Roll,Swing_Pitch,Retract_Roll,Retract_Pitch,SHIFT_TIME,LIFT_TIME,SWING_TIME,RETRACT_TIME,LANDING_TIME,FINISHED_TIME

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KickingParam, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Torso_X is None:
        self.Torso_X = 0.
      if self.Torso_Y is None:
        self.Torso_Y = 0.
      if self.Torso_Z is None:
        self.Torso_Z = 0.
      if self.L_Shift_X is None:
        self.L_Shift_X = 0.
      if self.L_Shift_Y is None:
        self.L_Shift_Y = 0.
      if self.L_Shift_Z is None:
        self.L_Shift_Z = 0.
      if self.R_Shift_X is None:
        self.R_Shift_X = 0.
      if self.R_Shift_Y is None:
        self.R_Shift_Y = 0.
      if self.R_Shift_Z is None:
        self.R_Shift_Z = 0.
      if self.L_Lift_X is None:
        self.L_Lift_X = 0.
      if self.L_Lift_Y is None:
        self.L_Lift_Y = 0.
      if self.L_Lift_Z is None:
        self.L_Lift_Z = 0.
      if self.R_Lift_X is None:
        self.R_Lift_X = 0.
      if self.R_Lift_Y is None:
        self.R_Lift_Y = 0.
      if self.R_Lift_Z is None:
        self.R_Lift_Z = 0.
      if self.L_Swing_X is None:
        self.L_Swing_X = 0.
      if self.L_Swing_Y is None:
        self.L_Swing_Y = 0.
      if self.L_Swing_Z is None:
        self.L_Swing_Z = 0.
      if self.R_Swing_X is None:
        self.R_Swing_X = 0.
      if self.R_Swing_Y is None:
        self.R_Swing_Y = 0.
      if self.R_Swing_Z is None:
        self.R_Swing_Z = 0.
      if self.L_Retract_X is None:
        self.L_Retract_X = 0.
      if self.L_Retract_Y is None:
        self.L_Retract_Y = 0.
      if self.L_Retract_Z is None:
        self.L_Retract_Z = 0.
      if self.R_Retract_X is None:
        self.R_Retract_X = 0.
      if self.R_Retract_Y is None:
        self.R_Retract_Y = 0.
      if self.R_Retract_Z is None:
        self.R_Retract_Z = 0.
      if self.Torso_Pitch is None:
        self.Torso_Pitch = 0.
      if self.Shift_Roll is None:
        self.Shift_Roll = 0.
      if self.Lift_Roll is None:
        self.Lift_Roll = 0.
      if self.Lift_Pitch is None:
        self.Lift_Pitch = 0.
      if self.Swing_Roll is None:
        self.Swing_Roll = 0.
      if self.Swing_Pitch is None:
        self.Swing_Pitch = 0.
      if self.Retract_Roll is None:
        self.Retract_Roll = 0.
      if self.Retract_Pitch is None:
        self.Retract_Pitch = 0.
      if self.SHIFT_TIME is None:
        self.SHIFT_TIME = 0.
      if self.LIFT_TIME is None:
        self.LIFT_TIME = 0.
      if self.SWING_TIME is None:
        self.SWING_TIME = 0.
      if self.RETRACT_TIME is None:
        self.RETRACT_TIME = 0.
      if self.LANDING_TIME is None:
        self.LANDING_TIME = 0.
      if self.FINISHED_TIME is None:
        self.FINISHED_TIME = 0.
    else:
      self.Torso_X = 0.
      self.Torso_Y = 0.
      self.Torso_Z = 0.
      self.L_Shift_X = 0.
      self.L_Shift_Y = 0.
      self.L_Shift_Z = 0.
      self.R_Shift_X = 0.
      self.R_Shift_Y = 0.
      self.R_Shift_Z = 0.
      self.L_Lift_X = 0.
      self.L_Lift_Y = 0.
      self.L_Lift_Z = 0.
      self.R_Lift_X = 0.
      self.R_Lift_Y = 0.
      self.R_Lift_Z = 0.
      self.L_Swing_X = 0.
      self.L_Swing_Y = 0.
      self.L_Swing_Z = 0.
      self.R_Swing_X = 0.
      self.R_Swing_Y = 0.
      self.R_Swing_Z = 0.
      self.L_Retract_X = 0.
      self.L_Retract_Y = 0.
      self.L_Retract_Z = 0.
      self.R_Retract_X = 0.
      self.R_Retract_Y = 0.
      self.R_Retract_Z = 0.
      self.Torso_Pitch = 0.
      self.Shift_Roll = 0.
      self.Lift_Roll = 0.
      self.Lift_Pitch = 0.
      self.Swing_Roll = 0.
      self.Swing_Pitch = 0.
      self.Retract_Roll = 0.
      self.Retract_Pitch = 0.
      self.SHIFT_TIME = 0.
      self.LIFT_TIME = 0.
      self.SWING_TIME = 0.
      self.RETRACT_TIME = 0.
      self.LANDING_TIME = 0.
      self.FINISHED_TIME = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_41f().pack(_x.Torso_X, _x.Torso_Y, _x.Torso_Z, _x.L_Shift_X, _x.L_Shift_Y, _x.L_Shift_Z, _x.R_Shift_X, _x.R_Shift_Y, _x.R_Shift_Z, _x.L_Lift_X, _x.L_Lift_Y, _x.L_Lift_Z, _x.R_Lift_X, _x.R_Lift_Y, _x.R_Lift_Z, _x.L_Swing_X, _x.L_Swing_Y, _x.L_Swing_Z, _x.R_Swing_X, _x.R_Swing_Y, _x.R_Swing_Z, _x.L_Retract_X, _x.L_Retract_Y, _x.L_Retract_Z, _x.R_Retract_X, _x.R_Retract_Y, _x.R_Retract_Z, _x.Torso_Pitch, _x.Shift_Roll, _x.Lift_Roll, _x.Lift_Pitch, _x.Swing_Roll, _x.Swing_Pitch, _x.Retract_Roll, _x.Retract_Pitch, _x.SHIFT_TIME, _x.LIFT_TIME, _x.SWING_TIME, _x.RETRACT_TIME, _x.LANDING_TIME, _x.FINISHED_TIME))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 164
      (_x.Torso_X, _x.Torso_Y, _x.Torso_Z, _x.L_Shift_X, _x.L_Shift_Y, _x.L_Shift_Z, _x.R_Shift_X, _x.R_Shift_Y, _x.R_Shift_Z, _x.L_Lift_X, _x.L_Lift_Y, _x.L_Lift_Z, _x.R_Lift_X, _x.R_Lift_Y, _x.R_Lift_Z, _x.L_Swing_X, _x.L_Swing_Y, _x.L_Swing_Z, _x.R_Swing_X, _x.R_Swing_Y, _x.R_Swing_Z, _x.L_Retract_X, _x.L_Retract_Y, _x.L_Retract_Z, _x.R_Retract_X, _x.R_Retract_Y, _x.R_Retract_Z, _x.Torso_Pitch, _x.Shift_Roll, _x.Lift_Roll, _x.Lift_Pitch, _x.Swing_Roll, _x.Swing_Pitch, _x.Retract_Roll, _x.Retract_Pitch, _x.SHIFT_TIME, _x.LIFT_TIME, _x.SWING_TIME, _x.RETRACT_TIME, _x.LANDING_TIME, _x.FINISHED_TIME,) = _get_struct_41f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_41f().pack(_x.Torso_X, _x.Torso_Y, _x.Torso_Z, _x.L_Shift_X, _x.L_Shift_Y, _x.L_Shift_Z, _x.R_Shift_X, _x.R_Shift_Y, _x.R_Shift_Z, _x.L_Lift_X, _x.L_Lift_Y, _x.L_Lift_Z, _x.R_Lift_X, _x.R_Lift_Y, _x.R_Lift_Z, _x.L_Swing_X, _x.L_Swing_Y, _x.L_Swing_Z, _x.R_Swing_X, _x.R_Swing_Y, _x.R_Swing_Z, _x.L_Retract_X, _x.L_Retract_Y, _x.L_Retract_Z, _x.R_Retract_X, _x.R_Retract_Y, _x.R_Retract_Z, _x.Torso_Pitch, _x.Shift_Roll, _x.Lift_Roll, _x.Lift_Pitch, _x.Swing_Roll, _x.Swing_Pitch, _x.Retract_Roll, _x.Retract_Pitch, _x.SHIFT_TIME, _x.LIFT_TIME, _x.SWING_TIME, _x.RETRACT_TIME, _x.LANDING_TIME, _x.FINISHED_TIME))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 164
      (_x.Torso_X, _x.Torso_Y, _x.Torso_Z, _x.L_Shift_X, _x.L_Shift_Y, _x.L_Shift_Z, _x.R_Shift_X, _x.R_Shift_Y, _x.R_Shift_Z, _x.L_Lift_X, _x.L_Lift_Y, _x.L_Lift_Z, _x.R_Lift_X, _x.R_Lift_Y, _x.R_Lift_Z, _x.L_Swing_X, _x.L_Swing_Y, _x.L_Swing_Z, _x.R_Swing_X, _x.R_Swing_Y, _x.R_Swing_Z, _x.L_Retract_X, _x.L_Retract_Y, _x.L_Retract_Z, _x.R_Retract_X, _x.R_Retract_Y, _x.R_Retract_Z, _x.Torso_Pitch, _x.Shift_Roll, _x.Lift_Roll, _x.Lift_Pitch, _x.Swing_Roll, _x.Swing_Pitch, _x.Retract_Roll, _x.Retract_Pitch, _x.SHIFT_TIME, _x.LIFT_TIME, _x.SWING_TIME, _x.RETRACT_TIME, _x.LANDING_TIME, _x.FINISHED_TIME,) = _get_struct_41f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_41f = None
def _get_struct_41f():
    global _struct_41f
    if _struct_41f is None:
        _struct_41f = struct.Struct("<41f")
    return _struct_41f
