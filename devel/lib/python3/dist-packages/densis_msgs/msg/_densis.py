# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from densis_msgs/densis.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class densis(genpy.Message):
  _md5sum = "ff16778aedf270b756c96df44fa2eccc"
  _type = "densis_msgs/densis"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point IMUorientation
geometry_msgs/Point IMUgyro
geometry_msgs/Point COMLSSP
geometry_msgs/Point COMRSSP
geometry_msgs/Point COMDSP
geometry_msgs/Point COMLSSPrpy
geometry_msgs/Point COMRSSPrpy
geometry_msgs/Point COMDSPrpy
geometry_msgs/Point ZMPLSSP
geometry_msgs/Point ZMPRSSP
geometry_msgs/Point ZMPDSP

#geometry_msgs/Transform LAnklePitch
#geometry_msgs/Transform RAnklePitch

float32 LAnklePitch_velocityNow  
float32 LAnklePitch_positionIK   
float32 LAnklePitch_positionNow  
float32 LAnklePitch_refPosFromPos 
float32 RAnklePitch_velocityNow  
float32 RAnklePitch_positionIK   
float32 RAnklePitch_positionNow 
float32 RAnklePitch_refPosFromPos

float32 COMDSPrpy_pitch_Est
float32 gyro_pitch_Est
float32 COMDSPrpy_pitch_Meas
float32 gyro_pitch_Meas
float32 gyro_pitch_Fil

float32 CP_0
float32 CP_1
float32 CP_2
float32 CP_3
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['IMUorientation','IMUgyro','COMLSSP','COMRSSP','COMDSP','COMLSSPrpy','COMRSSPrpy','COMDSPrpy','ZMPLSSP','ZMPRSSP','ZMPDSP','LAnklePitch_velocityNow','LAnklePitch_positionIK','LAnklePitch_positionNow','LAnklePitch_refPosFromPos','RAnklePitch_velocityNow','RAnklePitch_positionIK','RAnklePitch_positionNow','RAnklePitch_refPosFromPos','COMDSPrpy_pitch_Est','gyro_pitch_Est','COMDSPrpy_pitch_Meas','gyro_pitch_Meas','gyro_pitch_Fil','CP_0','CP_1','CP_2','CP_3']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       IMUorientation,IMUgyro,COMLSSP,COMRSSP,COMDSP,COMLSSPrpy,COMRSSPrpy,COMDSPrpy,ZMPLSSP,ZMPRSSP,ZMPDSP,LAnklePitch_velocityNow,LAnklePitch_positionIK,LAnklePitch_positionNow,LAnklePitch_refPosFromPos,RAnklePitch_velocityNow,RAnklePitch_positionIK,RAnklePitch_positionNow,RAnklePitch_refPosFromPos,COMDSPrpy_pitch_Est,gyro_pitch_Est,COMDSPrpy_pitch_Meas,gyro_pitch_Meas,gyro_pitch_Fil,CP_0,CP_1,CP_2,CP_3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(densis, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.IMUorientation is None:
        self.IMUorientation = geometry_msgs.msg.Point()
      if self.IMUgyro is None:
        self.IMUgyro = geometry_msgs.msg.Point()
      if self.COMLSSP is None:
        self.COMLSSP = geometry_msgs.msg.Point()
      if self.COMRSSP is None:
        self.COMRSSP = geometry_msgs.msg.Point()
      if self.COMDSP is None:
        self.COMDSP = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      if self.LAnklePitch_velocityNow is None:
        self.LAnklePitch_velocityNow = 0.
      if self.LAnklePitch_positionIK is None:
        self.LAnklePitch_positionIK = 0.
      if self.LAnklePitch_positionNow is None:
        self.LAnklePitch_positionNow = 0.
      if self.LAnklePitch_refPosFromPos is None:
        self.LAnklePitch_refPosFromPos = 0.
      if self.RAnklePitch_velocityNow is None:
        self.RAnklePitch_velocityNow = 0.
      if self.RAnklePitch_positionIK is None:
        self.RAnklePitch_positionIK = 0.
      if self.RAnklePitch_positionNow is None:
        self.RAnklePitch_positionNow = 0.
      if self.RAnklePitch_refPosFromPos is None:
        self.RAnklePitch_refPosFromPos = 0.
      if self.COMDSPrpy_pitch_Est is None:
        self.COMDSPrpy_pitch_Est = 0.
      if self.gyro_pitch_Est is None:
        self.gyro_pitch_Est = 0.
      if self.COMDSPrpy_pitch_Meas is None:
        self.COMDSPrpy_pitch_Meas = 0.
      if self.gyro_pitch_Meas is None:
        self.gyro_pitch_Meas = 0.
      if self.gyro_pitch_Fil is None:
        self.gyro_pitch_Fil = 0.
      if self.CP_0 is None:
        self.CP_0 = 0.
      if self.CP_1 is None:
        self.CP_1 = 0.
      if self.CP_2 is None:
        self.CP_2 = 0.
      if self.CP_3 is None:
        self.CP_3 = 0.
    else:
      self.IMUorientation = geometry_msgs.msg.Point()
      self.IMUgyro = geometry_msgs.msg.Point()
      self.COMLSSP = geometry_msgs.msg.Point()
      self.COMRSSP = geometry_msgs.msg.Point()
      self.COMDSP = geometry_msgs.msg.Point()
      self.COMLSSPrpy = geometry_msgs.msg.Point()
      self.COMRSSPrpy = geometry_msgs.msg.Point()
      self.COMDSPrpy = geometry_msgs.msg.Point()
      self.ZMPLSSP = geometry_msgs.msg.Point()
      self.ZMPRSSP = geometry_msgs.msg.Point()
      self.ZMPDSP = geometry_msgs.msg.Point()
      self.LAnklePitch_velocityNow = 0.
      self.LAnklePitch_positionIK = 0.
      self.LAnklePitch_positionNow = 0.
      self.LAnklePitch_refPosFromPos = 0.
      self.RAnklePitch_velocityNow = 0.
      self.RAnklePitch_positionIK = 0.
      self.RAnklePitch_positionNow = 0.
      self.RAnklePitch_refPosFromPos = 0.
      self.COMDSPrpy_pitch_Est = 0.
      self.gyro_pitch_Est = 0.
      self.COMDSPrpy_pitch_Meas = 0.
      self.gyro_pitch_Meas = 0.
      self.gyro_pitch_Fil = 0.
      self.CP_0 = 0.
      self.CP_1 = 0.
      self.CP_2 = 0.
      self.CP_3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_33d17f().pack(_x.IMUorientation.x, _x.IMUorientation.y, _x.IMUorientation.z, _x.IMUgyro.x, _x.IMUgyro.y, _x.IMUgyro.z, _x.COMLSSP.x, _x.COMLSSP.y, _x.COMLSSP.z, _x.COMRSSP.x, _x.COMRSSP.y, _x.COMRSSP.z, _x.COMDSP.x, _x.COMDSP.y, _x.COMDSP.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos, _x.COMDSPrpy_pitch_Est, _x.gyro_pitch_Est, _x.COMDSPrpy_pitch_Meas, _x.gyro_pitch_Meas, _x.gyro_pitch_Fil, _x.CP_0, _x.CP_1, _x.CP_2, _x.CP_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.IMUorientation is None:
        self.IMUorientation = geometry_msgs.msg.Point()
      if self.IMUgyro is None:
        self.IMUgyro = geometry_msgs.msg.Point()
      if self.COMLSSP is None:
        self.COMLSSP = geometry_msgs.msg.Point()
      if self.COMRSSP is None:
        self.COMRSSP = geometry_msgs.msg.Point()
      if self.COMDSP is None:
        self.COMDSP = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 332
      (_x.IMUorientation.x, _x.IMUorientation.y, _x.IMUorientation.z, _x.IMUgyro.x, _x.IMUgyro.y, _x.IMUgyro.z, _x.COMLSSP.x, _x.COMLSSP.y, _x.COMLSSP.z, _x.COMRSSP.x, _x.COMRSSP.y, _x.COMRSSP.z, _x.COMDSP.x, _x.COMDSP.y, _x.COMDSP.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos, _x.COMDSPrpy_pitch_Est, _x.gyro_pitch_Est, _x.COMDSPrpy_pitch_Meas, _x.gyro_pitch_Meas, _x.gyro_pitch_Fil, _x.CP_0, _x.CP_1, _x.CP_2, _x.CP_3,) = _get_struct_33d17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_33d17f().pack(_x.IMUorientation.x, _x.IMUorientation.y, _x.IMUorientation.z, _x.IMUgyro.x, _x.IMUgyro.y, _x.IMUgyro.z, _x.COMLSSP.x, _x.COMLSSP.y, _x.COMLSSP.z, _x.COMRSSP.x, _x.COMRSSP.y, _x.COMRSSP.z, _x.COMDSP.x, _x.COMDSP.y, _x.COMDSP.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos, _x.COMDSPrpy_pitch_Est, _x.gyro_pitch_Est, _x.COMDSPrpy_pitch_Meas, _x.gyro_pitch_Meas, _x.gyro_pitch_Fil, _x.CP_0, _x.CP_1, _x.CP_2, _x.CP_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.IMUorientation is None:
        self.IMUorientation = geometry_msgs.msg.Point()
      if self.IMUgyro is None:
        self.IMUgyro = geometry_msgs.msg.Point()
      if self.COMLSSP is None:
        self.COMLSSP = geometry_msgs.msg.Point()
      if self.COMRSSP is None:
        self.COMRSSP = geometry_msgs.msg.Point()
      if self.COMDSP is None:
        self.COMDSP = geometry_msgs.msg.Point()
      if self.COMLSSPrpy is None:
        self.COMLSSPrpy = geometry_msgs.msg.Point()
      if self.COMRSSPrpy is None:
        self.COMRSSPrpy = geometry_msgs.msg.Point()
      if self.COMDSPrpy is None:
        self.COMDSPrpy = geometry_msgs.msg.Point()
      if self.ZMPLSSP is None:
        self.ZMPLSSP = geometry_msgs.msg.Point()
      if self.ZMPRSSP is None:
        self.ZMPRSSP = geometry_msgs.msg.Point()
      if self.ZMPDSP is None:
        self.ZMPDSP = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 332
      (_x.IMUorientation.x, _x.IMUorientation.y, _x.IMUorientation.z, _x.IMUgyro.x, _x.IMUgyro.y, _x.IMUgyro.z, _x.COMLSSP.x, _x.COMLSSP.y, _x.COMLSSP.z, _x.COMRSSP.x, _x.COMRSSP.y, _x.COMRSSP.z, _x.COMDSP.x, _x.COMDSP.y, _x.COMDSP.z, _x.COMLSSPrpy.x, _x.COMLSSPrpy.y, _x.COMLSSPrpy.z, _x.COMRSSPrpy.x, _x.COMRSSPrpy.y, _x.COMRSSPrpy.z, _x.COMDSPrpy.x, _x.COMDSPrpy.y, _x.COMDSPrpy.z, _x.ZMPLSSP.x, _x.ZMPLSSP.y, _x.ZMPLSSP.z, _x.ZMPRSSP.x, _x.ZMPRSSP.y, _x.ZMPRSSP.z, _x.ZMPDSP.x, _x.ZMPDSP.y, _x.ZMPDSP.z, _x.LAnklePitch_velocityNow, _x.LAnklePitch_positionIK, _x.LAnklePitch_positionNow, _x.LAnklePitch_refPosFromPos, _x.RAnklePitch_velocityNow, _x.RAnklePitch_positionIK, _x.RAnklePitch_positionNow, _x.RAnklePitch_refPosFromPos, _x.COMDSPrpy_pitch_Est, _x.gyro_pitch_Est, _x.COMDSPrpy_pitch_Meas, _x.gyro_pitch_Meas, _x.gyro_pitch_Fil, _x.CP_0, _x.CP_1, _x.CP_2, _x.CP_3,) = _get_struct_33d17f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_33d17f = None
def _get_struct_33d17f():
    global _struct_33d17f
    if _struct_33d17f is None:
        _struct_33d17f = struct.Struct("<33d17f")
    return _struct_33d17f
