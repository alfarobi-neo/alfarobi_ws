; Auto-generated. Do not edit!


(cl:in-package humanoid_league_msgs-msg)


;//! \htmlinclude TeamData.msg.html

(cl:defclass <TeamData> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (robot_ids
    :reader robot_ids
    :initarg :robot_ids
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0))
   (role
    :reader role
    :initarg :role
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0))
   (action
    :reader action
    :initarg :action
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0))
   (state
    :reader state
    :initarg :state
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0))
   (robot_positions
    :reader robot_positions
    :initarg :robot_positions
    :type (cl:vector geometry_msgs-msg:Pose2D)
   :initform (cl:make-array 0 :element-type 'geometry_msgs-msg:Pose2D :initial-element (cl:make-instance 'geometry_msgs-msg:Pose2D)))
   (ball_relative
    :reader ball_relative
    :initarg :ball_relative
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (oppgoal_relative
    :reader oppgoal_relative
    :initarg :oppgoal_relative
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (opponent_robot_a
    :reader opponent_robot_a
    :initarg :opponent_robot_a
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (opponent_robot_b
    :reader opponent_robot_b
    :initarg :opponent_robot_b
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (opponent_robot_c
    :reader opponent_robot_c
    :initarg :opponent_robot_c
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (opponent_robot_d
    :reader opponent_robot_d
    :initarg :opponent_robot_d
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (team_robot_a
    :reader team_robot_a
    :initarg :team_robot_a
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (team_robot_b
    :reader team_robot_b
    :initarg :team_robot_b
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (team_robot_c
    :reader team_robot_c
    :initarg :team_robot_c
    :type (cl:vector humanoid_league_msgs-msg:Position2D)
   :initform (cl:make-array 0 :element-type 'humanoid_league_msgs-msg:Position2D :initial-element (cl:make-instance 'humanoid_league_msgs-msg:Position2D)))
   (avg_walking_speed
    :reader avg_walking_speed
    :initarg :avg_walking_speed
    :type (cl:vector cl:float)
   :initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))
   (time_to_position_at_ball
    :reader time_to_position_at_ball
    :initarg :time_to_position_at_ball
    :type (cl:vector cl:float)
   :initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))
   (max_kicking_distance
    :reader max_kicking_distance
    :initarg :max_kicking_distance
    :type (cl:vector cl:float)
   :initform (cl:make-array 0 :element-type 'cl:float :initial-element 0.0))
   (offensive_side
    :reader offensive_side
    :initarg :offensive_side
    :type (cl:vector cl:fixnum)
   :initform (cl:make-array 0 :element-type 'cl:fixnum :initial-element 0)))
)

(cl:defclass TeamData (<TeamData>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <TeamData>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'TeamData)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name humanoid_league_msgs-msg:<TeamData> is deprecated: use humanoid_league_msgs-msg:TeamData instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:header-val is deprecated.  Use humanoid_league_msgs-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'robot_ids-val :lambda-list '(m))
(cl:defmethod robot_ids-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:robot_ids-val is deprecated.  Use humanoid_league_msgs-msg:robot_ids instead.")
  (robot_ids m))

(cl:ensure-generic-function 'role-val :lambda-list '(m))
(cl:defmethod role-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:role-val is deprecated.  Use humanoid_league_msgs-msg:role instead.")
  (role m))

(cl:ensure-generic-function 'action-val :lambda-list '(m))
(cl:defmethod action-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:action-val is deprecated.  Use humanoid_league_msgs-msg:action instead.")
  (action m))

(cl:ensure-generic-function 'state-val :lambda-list '(m))
(cl:defmethod state-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:state-val is deprecated.  Use humanoid_league_msgs-msg:state instead.")
  (state m))

(cl:ensure-generic-function 'robot_positions-val :lambda-list '(m))
(cl:defmethod robot_positions-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:robot_positions-val is deprecated.  Use humanoid_league_msgs-msg:robot_positions instead.")
  (robot_positions m))

(cl:ensure-generic-function 'ball_relative-val :lambda-list '(m))
(cl:defmethod ball_relative-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:ball_relative-val is deprecated.  Use humanoid_league_msgs-msg:ball_relative instead.")
  (ball_relative m))

(cl:ensure-generic-function 'oppgoal_relative-val :lambda-list '(m))
(cl:defmethod oppgoal_relative-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:oppgoal_relative-val is deprecated.  Use humanoid_league_msgs-msg:oppgoal_relative instead.")
  (oppgoal_relative m))

(cl:ensure-generic-function 'opponent_robot_a-val :lambda-list '(m))
(cl:defmethod opponent_robot_a-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:opponent_robot_a-val is deprecated.  Use humanoid_league_msgs-msg:opponent_robot_a instead.")
  (opponent_robot_a m))

(cl:ensure-generic-function 'opponent_robot_b-val :lambda-list '(m))
(cl:defmethod opponent_robot_b-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:opponent_robot_b-val is deprecated.  Use humanoid_league_msgs-msg:opponent_robot_b instead.")
  (opponent_robot_b m))

(cl:ensure-generic-function 'opponent_robot_c-val :lambda-list '(m))
(cl:defmethod opponent_robot_c-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:opponent_robot_c-val is deprecated.  Use humanoid_league_msgs-msg:opponent_robot_c instead.")
  (opponent_robot_c m))

(cl:ensure-generic-function 'opponent_robot_d-val :lambda-list '(m))
(cl:defmethod opponent_robot_d-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:opponent_robot_d-val is deprecated.  Use humanoid_league_msgs-msg:opponent_robot_d instead.")
  (opponent_robot_d m))

(cl:ensure-generic-function 'team_robot_a-val :lambda-list '(m))
(cl:defmethod team_robot_a-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:team_robot_a-val is deprecated.  Use humanoid_league_msgs-msg:team_robot_a instead.")
  (team_robot_a m))

(cl:ensure-generic-function 'team_robot_b-val :lambda-list '(m))
(cl:defmethod team_robot_b-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:team_robot_b-val is deprecated.  Use humanoid_league_msgs-msg:team_robot_b instead.")
  (team_robot_b m))

(cl:ensure-generic-function 'team_robot_c-val :lambda-list '(m))
(cl:defmethod team_robot_c-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:team_robot_c-val is deprecated.  Use humanoid_league_msgs-msg:team_robot_c instead.")
  (team_robot_c m))

(cl:ensure-generic-function 'avg_walking_speed-val :lambda-list '(m))
(cl:defmethod avg_walking_speed-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:avg_walking_speed-val is deprecated.  Use humanoid_league_msgs-msg:avg_walking_speed instead.")
  (avg_walking_speed m))

(cl:ensure-generic-function 'time_to_position_at_ball-val :lambda-list '(m))
(cl:defmethod time_to_position_at_ball-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:time_to_position_at_ball-val is deprecated.  Use humanoid_league_msgs-msg:time_to_position_at_ball instead.")
  (time_to_position_at_ball m))

(cl:ensure-generic-function 'max_kicking_distance-val :lambda-list '(m))
(cl:defmethod max_kicking_distance-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:max_kicking_distance-val is deprecated.  Use humanoid_league_msgs-msg:max_kicking_distance instead.")
  (max_kicking_distance m))

(cl:ensure-generic-function 'offensive_side-val :lambda-list '(m))
(cl:defmethod offensive_side-val ((m <TeamData>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader humanoid_league_msgs-msg:offensive_side-val is deprecated.  Use humanoid_league_msgs-msg:offensive_side instead.")
  (offensive_side m))
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql '<TeamData>)))
    "Constants for message type '<TeamData>"
  '((:ROLE_IDLING . 0)
    (:ROLE_OTHER . 1)
    (:ROLE_STRIKER . 2)
    (:ROLE_SUPPORTER . 3)
    (:ROLE_DEFENDER . 4)
    (:ROLE_GOALIE . 5)
    (:ACTION_UNDEFINED . 0)
    (:ACTION_POSITIONING . 1)
    (:ACTION_GOING_TO_BALL . 2)
    (:ACTION_TRYING_TO_SCORE . 3)
    (:ACTION_WAITING . 4)
    (:STATE_INACTIVE . 0)
    (:STATE_ACTIVE . 1)
    (:STATE_PENALIZED . 2)
    (:UNSPECIFIED . 0)
    (:LEFT . 1)
    (:RIGHT . 2)
    (:CENTER . 3))
)
(cl:defmethod roslisp-msg-protocol:symbol-codes ((msg-type (cl:eql 'TeamData)))
    "Constants for message type 'TeamData"
  '((:ROLE_IDLING . 0)
    (:ROLE_OTHER . 1)
    (:ROLE_STRIKER . 2)
    (:ROLE_SUPPORTER . 3)
    (:ROLE_DEFENDER . 4)
    (:ROLE_GOALIE . 5)
    (:ACTION_UNDEFINED . 0)
    (:ACTION_POSITIONING . 1)
    (:ACTION_GOING_TO_BALL . 2)
    (:ACTION_TRYING_TO_SCORE . 3)
    (:ACTION_WAITING . 4)
    (:STATE_INACTIVE . 0)
    (:STATE_ACTIVE . 1)
    (:STATE_PENALIZED . 2)
    (:UNSPECIFIED . 0)
    (:LEFT . 1)
    (:RIGHT . 2)
    (:CENTER . 3))
)
(cl:defmethod roslisp-msg-protocol:serialize ((msg <TeamData>) ostream)
  "Serializes a message object of type '<TeamData>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'robot_ids))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'robot_ids))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'role))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'role))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'action))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'action))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'state))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'state))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'robot_positions))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'robot_positions))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'ball_relative))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'ball_relative))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'oppgoal_relative))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'oppgoal_relative))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'opponent_robot_a))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'opponent_robot_a))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'opponent_robot_b))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'opponent_robot_b))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'opponent_robot_c))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'opponent_robot_c))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'opponent_robot_d))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'opponent_robot_d))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'team_robot_a))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'team_robot_a))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'team_robot_b))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'team_robot_b))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'team_robot_c))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (roslisp-msg-protocol:serialize ele ostream))
   (cl:slot-value msg 'team_robot_c))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'avg_walking_speed))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'avg_walking_speed))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'time_to_position_at_ball))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'time_to_position_at_ball))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'max_kicking_distance))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'max_kicking_distance))
  (cl:let ((__ros_arr_len (cl:length (cl:slot-value msg 'offensive_side))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_arr_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_arr_len) ostream))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:write-byte (cl:ldb (cl:byte 8 0) ele) ostream))
   (cl:slot-value msg 'offensive_side))
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <TeamData>) istream)
  "Deserializes a message object of type '<TeamData>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'robot_ids) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'robot_ids)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'role) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'role)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'action) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'action)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'state) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'state)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'robot_positions) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'robot_positions)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'geometry_msgs-msg:Pose2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'ball_relative) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'ball_relative)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'oppgoal_relative) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'oppgoal_relative)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'opponent_robot_a) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'opponent_robot_a)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'opponent_robot_b) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'opponent_robot_b)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'opponent_robot_c) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'opponent_robot_c)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'opponent_robot_d) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'opponent_robot_d)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'team_robot_a) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'team_robot_a)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'team_robot_b) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'team_robot_b)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'team_robot_c) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'team_robot_c)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:aref vals i) (cl:make-instance 'humanoid_league_msgs-msg:Position2D))
  (roslisp-msg-protocol:deserialize (cl:aref vals i) istream))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'avg_walking_speed) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'avg_walking_speed)))
    (cl:dotimes (i __ros_arr_len)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'time_to_position_at_ball) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'time_to_position_at_ball)))
    (cl:dotimes (i __ros_arr_len)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'max_kicking_distance) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'max_kicking_distance)))
    (cl:dotimes (i __ros_arr_len)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits))))))
  (cl:let ((__ros_arr_len 0))
    (cl:setf (cl:ldb (cl:byte 8 0) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 8) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 16) __ros_arr_len) (cl:read-byte istream))
    (cl:setf (cl:ldb (cl:byte 8 24) __ros_arr_len) (cl:read-byte istream))
  (cl:setf (cl:slot-value msg 'offensive_side) (cl:make-array __ros_arr_len))
  (cl:let ((vals (cl:slot-value msg 'offensive_side)))
    (cl:dotimes (i __ros_arr_len)
    (cl:setf (cl:ldb (cl:byte 8 0) (cl:aref vals i)) (cl:read-byte istream)))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<TeamData>)))
  "Returns string type for a message object of type '<TeamData>"
  "humanoid_league_msgs/TeamData")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'TeamData)))
  "Returns string type for a message object of type 'TeamData"
  "humanoid_league_msgs/TeamData")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<TeamData>)))
  "Returns md5sum for a message object of type '<TeamData>"
  "3c1658268445f044e3a6e26e5ab92357")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'TeamData)))
  "Returns md5sum for a message object of type 'TeamData"
  "3c1658268445f044e3a6e26e5ab92357")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<TeamData>)))
  "Returns full string definition for message of type '<TeamData>"
  (cl:format cl:nil "# This message contains all information provided by the mitecom standard for team communication.~%# Everything is in meters (ROS standard) not to be confused with millimeters (mitecom standard)!~%# Set belief values to 0 if object was not recognized.~%# More information here: https://github.com/fumanoids/mitecom~%~%std_msgs/Header header~%~%# Every value is an array because we can have multiple robots communicating with us.~%# The values match with the robot ids~%uint8[] robot_ids~%~%uint8 ROLE_IDLING=0~%uint8 ROLE_OTHER=1~%uint8 ROLE_STRIKER=2~%uint8 ROLE_SUPPORTER=3~%uint8 ROLE_DEFENDER=4~%uint8 ROLE_GOALIE=5~%uint8[] role~%~%uint8 ACTION_UNDEFINED=0~%uint8 ACTION_POSITIONING=1~%uint8 ACTION_GOING_TO_BALL=2~%uint8 ACTION_TRYING_TO_SCORE=3~%uint8 ACTION_WAITING=4~%uint8[] action~%~%uint8 STATE_INACTIVE=0~%uint8 STATE_ACTIVE=1~%uint8 STATE_PENALIZED=2~%uint8[] state~%~%# Absolute position values~%geometry_msgs/Pose2D[] robot_positions~%~%# Relative ball position, theta of Pose2D is not used~%Position2D[] ball_relative~%~%# Relative position of the opponent goal, theta of Pose2D is not used~%# This is helpful if the robot has no global position, but sees the goal~%Position2D[] oppgoal_relative~%~%# Positions of opponent robots, if they are recognized~%# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot~%Position2D[] opponent_robot_a~%Position2D[] opponent_robot_b~%Position2D[] opponent_robot_c~%Position2D[] opponent_robot_d~%~%# Positions of team robots, if they are recognized~%# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot~%Position2D[] team_robot_a~%Position2D[] team_robot_b~%Position2D[] team_robot_c~%~%float32[] avg_walking_speed~%float32[] time_to_position_at_ball~%float32[] max_kicking_distance~%~%# Strategy over which side the team tries to attack~%# Especially useful during a kickoff~%uint8 UNSPECIFIED=0~%uint8 LEFT=1~%uint8 RIGHT=2~%uint8 CENTER=3~%uint8[] offensive_side~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: geometry_msgs/Pose2D~%# Deprecated~%# Please use the full 3D pose.~%~%# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.~%~%# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.~%~%~%# This expresses a position and orientation on a 2D manifold.~%~%float64 x~%float64 y~%float64 theta~%~%================================================================================~%MSG: humanoid_league_msgs/Position2D~%# The position system is the same as mitecom. The following part is taken from the mitecom documentation:~%# https://github.com/fumanoids/mitecom~%# The origin of the absolute coordinate center is the center of the middle~%# circle (center of field). The x axis points towards the opponent goal, the~%# y axis to the left.~%#~%#      y~%#      ^       ______________________~%#      |    M  |          |          |  O~%#      |    Y  |_ -x, y   |   x, y  _|  P~%#      |    G  | |        |        | |  P~%# 0    +    O  | |       ( )       | |  G~%#      |    A  |_|        |        |_|  O~%#      |    L  |  -x,-y   |   x,-y   |  A~%#      |       |__________|__________|  L~%#      |~%#      +------------------+--------------> x~%#                         0~%#~%# The 0 value of the orientation is pointing to the opponent side (right side in the image).~%# The value increases counter clockwise~%# Everything in meters (because it is the ROS standard)~%~%# The header is included to get the time stamp for later use in tf~%std_msgs/Header header~%~%geometry_msgs/Pose2D pose~%# A certainty rating between 0 and 1, where 1 is the surest.~%float32 confidence~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'TeamData)))
  "Returns full string definition for message of type 'TeamData"
  (cl:format cl:nil "# This message contains all information provided by the mitecom standard for team communication.~%# Everything is in meters (ROS standard) not to be confused with millimeters (mitecom standard)!~%# Set belief values to 0 if object was not recognized.~%# More information here: https://github.com/fumanoids/mitecom~%~%std_msgs/Header header~%~%# Every value is an array because we can have multiple robots communicating with us.~%# The values match with the robot ids~%uint8[] robot_ids~%~%uint8 ROLE_IDLING=0~%uint8 ROLE_OTHER=1~%uint8 ROLE_STRIKER=2~%uint8 ROLE_SUPPORTER=3~%uint8 ROLE_DEFENDER=4~%uint8 ROLE_GOALIE=5~%uint8[] role~%~%uint8 ACTION_UNDEFINED=0~%uint8 ACTION_POSITIONING=1~%uint8 ACTION_GOING_TO_BALL=2~%uint8 ACTION_TRYING_TO_SCORE=3~%uint8 ACTION_WAITING=4~%uint8[] action~%~%uint8 STATE_INACTIVE=0~%uint8 STATE_ACTIVE=1~%uint8 STATE_PENALIZED=2~%uint8[] state~%~%# Absolute position values~%geometry_msgs/Pose2D[] robot_positions~%~%# Relative ball position, theta of Pose2D is not used~%Position2D[] ball_relative~%~%# Relative position of the opponent goal, theta of Pose2D is not used~%# This is helpful if the robot has no global position, but sees the goal~%Position2D[] oppgoal_relative~%~%# Positions of opponent robots, if they are recognized~%# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot~%Position2D[] opponent_robot_a~%Position2D[] opponent_robot_b~%Position2D[] opponent_robot_c~%Position2D[] opponent_robot_d~%~%# Positions of team robots, if they are recognized~%# The letter of the robot is arbitrary as the sending robot does not know the id of a seen robot~%Position2D[] team_robot_a~%Position2D[] team_robot_b~%Position2D[] team_robot_c~%~%float32[] avg_walking_speed~%float32[] time_to_position_at_ball~%float32[] max_kicking_distance~%~%# Strategy over which side the team tries to attack~%# Especially useful during a kickoff~%uint8 UNSPECIFIED=0~%uint8 LEFT=1~%uint8 RIGHT=2~%uint8 CENTER=3~%uint8[] offensive_side~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: geometry_msgs/Pose2D~%# Deprecated~%# Please use the full 3D pose.~%~%# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.~%~%# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.~%~%~%# This expresses a position and orientation on a 2D manifold.~%~%float64 x~%float64 y~%float64 theta~%~%================================================================================~%MSG: humanoid_league_msgs/Position2D~%# The position system is the same as mitecom. The following part is taken from the mitecom documentation:~%# https://github.com/fumanoids/mitecom~%# The origin of the absolute coordinate center is the center of the middle~%# circle (center of field). The x axis points towards the opponent goal, the~%# y axis to the left.~%#~%#      y~%#      ^       ______________________~%#      |    M  |          |          |  O~%#      |    Y  |_ -x, y   |   x, y  _|  P~%#      |    G  | |        |        | |  P~%# 0    +    O  | |       ( )       | |  G~%#      |    A  |_|        |        |_|  O~%#      |    L  |  -x,-y   |   x,-y   |  A~%#      |       |__________|__________|  L~%#      |~%#      +------------------+--------------> x~%#                         0~%#~%# The 0 value of the orientation is pointing to the opponent side (right side in the image).~%# The value increases counter clockwise~%# Everything in meters (because it is the ROS standard)~%~%# The header is included to get the time stamp for later use in tf~%std_msgs/Header header~%~%geometry_msgs/Pose2D pose~%# A certainty rating between 0 and 1, where 1 is the surest.~%float32 confidence~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <TeamData>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'robot_ids) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'role) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'action) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'state) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'robot_positions) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'ball_relative) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'oppgoal_relative) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'opponent_robot_a) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'opponent_robot_b) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'opponent_robot_c) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'opponent_robot_d) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'team_robot_a) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'team_robot_b) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'team_robot_c) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ (roslisp-msg-protocol:serialization-length ele))))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'avg_walking_speed) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'time_to_position_at_ball) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'max_kicking_distance) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     4 (cl:reduce #'cl:+ (cl:slot-value msg 'offensive_side) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 1)))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <TeamData>))
  "Converts a ROS message object to a list"
  (cl:list 'TeamData
    (cl:cons ':header (header msg))
    (cl:cons ':robot_ids (robot_ids msg))
    (cl:cons ':role (role msg))
    (cl:cons ':action (action msg))
    (cl:cons ':state (state msg))
    (cl:cons ':robot_positions (robot_positions msg))
    (cl:cons ':ball_relative (ball_relative msg))
    (cl:cons ':oppgoal_relative (oppgoal_relative msg))
    (cl:cons ':opponent_robot_a (opponent_robot_a msg))
    (cl:cons ':opponent_robot_b (opponent_robot_b msg))
    (cl:cons ':opponent_robot_c (opponent_robot_c msg))
    (cl:cons ':opponent_robot_d (opponent_robot_d msg))
    (cl:cons ':team_robot_a (team_robot_a msg))
    (cl:cons ':team_robot_b (team_robot_b msg))
    (cl:cons ':team_robot_c (team_robot_c msg))
    (cl:cons ':avg_walking_speed (avg_walking_speed msg))
    (cl:cons ':time_to_position_at_ball (time_to_position_at_ball msg))
    (cl:cons ':max_kicking_distance (max_kicking_distance msg))
    (cl:cons ':offensive_side (offensive_side msg))
))
