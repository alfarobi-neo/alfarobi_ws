// Generated by gencpp from file mcl_localization/SetLocParamRequest.msg
// DO NOT EDIT!


#ifndef MCL_LOCALIZATION_MESSAGE_SETLOCPARAMREQUEST_H
#define MCL_LOCALIZATION_MESSAGE_SETLOCPARAMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcl_localization/localization_param.h>

namespace mcl_localization
{
template <class ContainerAllocator>
struct SetLocParamRequest_
{
  typedef SetLocParamRequest_<ContainerAllocator> Type;

  SetLocParamRequest_()
    : parameters()  {
    }
  SetLocParamRequest_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mcl_localization::localization_param_<ContainerAllocator>  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLocParamRequest_

typedef ::mcl_localization::SetLocParamRequest_<std::allocator<void> > SetLocParamRequest;

typedef boost::shared_ptr< ::mcl_localization::SetLocParamRequest > SetLocParamRequestPtr;
typedef boost::shared_ptr< ::mcl_localization::SetLocParamRequest const> SetLocParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcl_localization::SetLocParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcl_localization

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mcl_localization': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Localization/mcl_localization/msgs'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a334524f67bc744751132bd0b10acaf3";
  }

  static const char* value(const ::mcl_localization::SetLocParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa334524f67bc7447ULL;
  static const uint64_t static_value2 = 0x51132bd0b10acaf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcl_localization/SetLocParamRequest";
  }

  static const char* value(const ::mcl_localization::SetLocParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization_param    parameters\n\
\n\
================================================================================\n\
MSG: mcl_localization/localization_param\n\
float64 mcl_afast\n\
float64 mcl_aslow\n\
float64 mcl_variance\n\
float64 mgauss_x\n\
float64 mgauss_y\n\
float64 mgauss_w\n\
float64 vgauss_x\n\
float64 vgauss_y\n\
float64 mcl_wcmps\n\
";
  }

  static const char* value(const ::mcl_localization::SetLocParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLocParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcl_localization::SetLocParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcl_localization::SetLocParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "parameters: ";
    s << std::endl;
    Printer< ::mcl_localization::localization_param_<ContainerAllocator> >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCL_LOCALIZATION_MESSAGE_SETLOCPARAMREQUEST_H
