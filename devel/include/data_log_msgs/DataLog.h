// Generated by gencpp from file data_log_msgs/DataLog.msg
// DO NOT EDIT!


#ifndef DATA_LOG_MSGS_MESSAGE_DATALOG_H
#define DATA_LOG_MSGS_MESSAGE_DATALOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Inertia.h>
#include <geometry_msgs/Inertia.h>
#include <geometry_msgs/Inertia.h>
#include <geometry_msgs/Inertia.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace data_log_msgs
{
template <class ContainerAllocator>
struct DataLog_
{
  typedef DataLog_<ContainerAllocator> Type;

  DataLog_()
    : RFootFK()
    , LFootFK()
    , TorsoFK()
    , RFootIK()
    , LFootIK()
    , TorsoIK()
    , IMUdegrees()
    , baseInertia()
    , LSSPInertia()
    , RSSPInertia()
    , DSPInertia()
    , ZMPLSSP()
    , ZMPRSSP()
    , ZMPDSP()
    , ZMPLSSP_accZ()
    , ZMPRSSP_accZ()
    , ZMPDSP_accZ()
    , ZMPLSSP_estimate()
    , ZMPRSSP_estimate()
    , ZMPDSP_estimate()
    , COMLSSPrpy()
    , COMRSSPrpy()
    , COMDSPrpy()
    , accelFiltered()
    , ZMPLSSP_accFil()
    , ZMPRSSP_accFil()
    , ZMPDSP_accFil()
    , LAnklePitch_velocityNow(0.0)
    , LAnklePitch_positionIK(0.0)
    , LAnklePitch_positionNow(0.0)
    , LAnklePitch_refPosFromPos(0.0)
    , RAnklePitch_velocityNow(0.0)
    , RAnklePitch_positionIK(0.0)
    , RAnklePitch_positionNow(0.0)
    , RAnklePitch_refPosFromPos(0.0)  {
    }
  DataLog_(const ContainerAllocator& _alloc)
    : RFootFK(_alloc)
    , LFootFK(_alloc)
    , TorsoFK(_alloc)
    , RFootIK(_alloc)
    , LFootIK(_alloc)
    , TorsoIK(_alloc)
    , IMUdegrees(_alloc)
    , baseInertia(_alloc)
    , LSSPInertia(_alloc)
    , RSSPInertia(_alloc)
    , DSPInertia(_alloc)
    , ZMPLSSP(_alloc)
    , ZMPRSSP(_alloc)
    , ZMPDSP(_alloc)
    , ZMPLSSP_accZ(_alloc)
    , ZMPRSSP_accZ(_alloc)
    , ZMPDSP_accZ(_alloc)
    , ZMPLSSP_estimate(_alloc)
    , ZMPRSSP_estimate(_alloc)
    , ZMPDSP_estimate(_alloc)
    , COMLSSPrpy(_alloc)
    , COMRSSPrpy(_alloc)
    , COMDSPrpy(_alloc)
    , accelFiltered(_alloc)
    , ZMPLSSP_accFil(_alloc)
    , ZMPRSSP_accFil(_alloc)
    , ZMPDSP_accFil(_alloc)
    , LAnklePitch_velocityNow(0.0)
    , LAnklePitch_positionIK(0.0)
    , LAnklePitch_positionNow(0.0)
    , LAnklePitch_refPosFromPos(0.0)
    , RAnklePitch_velocityNow(0.0)
    , RAnklePitch_positionIK(0.0)
    , RAnklePitch_positionNow(0.0)
    , RAnklePitch_refPosFromPos(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _RFootFK_type;
  _RFootFK_type RFootFK;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _LFootFK_type;
  _LFootFK_type LFootFK;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _TorsoFK_type;
  _TorsoFK_type TorsoFK;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _RFootIK_type;
  _RFootIK_type RFootIK;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _LFootIK_type;
  _LFootIK_type LFootIK;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _TorsoIK_type;
  _TorsoIK_type TorsoIK;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _IMUdegrees_type;
  _IMUdegrees_type IMUdegrees;

   typedef  ::geometry_msgs::Inertia_<ContainerAllocator>  _baseInertia_type;
  _baseInertia_type baseInertia;

   typedef  ::geometry_msgs::Inertia_<ContainerAllocator>  _LSSPInertia_type;
  _LSSPInertia_type LSSPInertia;

   typedef  ::geometry_msgs::Inertia_<ContainerAllocator>  _RSSPInertia_type;
  _RSSPInertia_type RSSPInertia;

   typedef  ::geometry_msgs::Inertia_<ContainerAllocator>  _DSPInertia_type;
  _DSPInertia_type DSPInertia;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPLSSP_type;
  _ZMPLSSP_type ZMPLSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPRSSP_type;
  _ZMPRSSP_type ZMPRSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPDSP_type;
  _ZMPDSP_type ZMPDSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPLSSP_accZ_type;
  _ZMPLSSP_accZ_type ZMPLSSP_accZ;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPRSSP_accZ_type;
  _ZMPRSSP_accZ_type ZMPRSSP_accZ;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPDSP_accZ_type;
  _ZMPDSP_accZ_type ZMPDSP_accZ;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPLSSP_estimate_type;
  _ZMPLSSP_estimate_type ZMPLSSP_estimate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPRSSP_estimate_type;
  _ZMPRSSP_estimate_type ZMPRSSP_estimate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPDSP_estimate_type;
  _ZMPDSP_estimate_type ZMPDSP_estimate;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMLSSPrpy_type;
  _COMLSSPrpy_type COMLSSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMRSSPrpy_type;
  _COMRSSPrpy_type COMRSSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMDSPrpy_type;
  _COMDSPrpy_type COMDSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _accelFiltered_type;
  _accelFiltered_type accelFiltered;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPLSSP_accFil_type;
  _ZMPLSSP_accFil_type ZMPLSSP_accFil;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPRSSP_accFil_type;
  _ZMPRSSP_accFil_type ZMPRSSP_accFil;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPDSP_accFil_type;
  _ZMPDSP_accFil_type ZMPDSP_accFil;

   typedef float _LAnklePitch_velocityNow_type;
  _LAnklePitch_velocityNow_type LAnklePitch_velocityNow;

   typedef float _LAnklePitch_positionIK_type;
  _LAnklePitch_positionIK_type LAnklePitch_positionIK;

   typedef float _LAnklePitch_positionNow_type;
  _LAnklePitch_positionNow_type LAnklePitch_positionNow;

   typedef float _LAnklePitch_refPosFromPos_type;
  _LAnklePitch_refPosFromPos_type LAnklePitch_refPosFromPos;

   typedef float _RAnklePitch_velocityNow_type;
  _RAnklePitch_velocityNow_type RAnklePitch_velocityNow;

   typedef float _RAnklePitch_positionIK_type;
  _RAnklePitch_positionIK_type RAnklePitch_positionIK;

   typedef float _RAnklePitch_positionNow_type;
  _RAnklePitch_positionNow_type RAnklePitch_positionNow;

   typedef float _RAnklePitch_refPosFromPos_type;
  _RAnklePitch_refPosFromPos_type RAnklePitch_refPosFromPos;





  typedef boost::shared_ptr< ::data_log_msgs::DataLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_log_msgs::DataLog_<ContainerAllocator> const> ConstPtr;

}; // struct DataLog_

typedef ::data_log_msgs::DataLog_<std::allocator<void> > DataLog;

typedef boost::shared_ptr< ::data_log_msgs::DataLog > DataLogPtr;
typedef boost::shared_ptr< ::data_log_msgs::DataLog const> DataLogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_log_msgs::DataLog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_log_msgs::DataLog_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace data_log_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'data_log_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Msgs/data_log_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::data_log_msgs::DataLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_log_msgs::DataLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_log_msgs::DataLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_log_msgs::DataLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_log_msgs::DataLog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_log_msgs::DataLog_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_log_msgs::DataLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0bcca581d42e749460a77b43b4c0423";
  }

  static const char* value(const ::data_log_msgs::DataLog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0bcca581d42e749ULL;
  static const uint64_t static_value2 = 0x460a77b43b4c0423ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_log_msgs::DataLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_log_msgs/DataLog";
  }

  static const char* value(const ::data_log_msgs::DataLog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_log_msgs::DataLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#geometry_msgs/Point[] current_joint_msg\n\
geometry_msgs/Pose RFootFK\n\
geometry_msgs/Pose LFootFK\n\
geometry_msgs/Pose TorsoFK\n\
geometry_msgs/Pose RFootIK\n\
geometry_msgs/Pose LFootIK\n\
geometry_msgs/Pose TorsoIK\n\
geometry_msgs/Point IMUdegrees\n\
geometry_msgs/Inertia baseInertia\n\
geometry_msgs/Inertia LSSPInertia\n\
geometry_msgs/Inertia RSSPInertia\n\
geometry_msgs/Inertia DSPInertia\n\
geometry_msgs/Point ZMPLSSP\n\
geometry_msgs/Point ZMPRSSP\n\
geometry_msgs/Point ZMPDSP\n\
geometry_msgs/Point ZMPLSSP_accZ\n\
geometry_msgs/Point ZMPRSSP_accZ\n\
geometry_msgs/Point ZMPDSP_accZ\n\
geometry_msgs/Point ZMPLSSP_estimate\n\
geometry_msgs/Point ZMPRSSP_estimate\n\
geometry_msgs/Point ZMPDSP_estimate\n\
geometry_msgs/Point COMLSSPrpy\n\
geometry_msgs/Point COMRSSPrpy\n\
geometry_msgs/Point COMDSPrpy\n\
geometry_msgs/Point accelFiltered\n\
geometry_msgs/Point ZMPLSSP_accFil\n\
geometry_msgs/Point ZMPRSSP_accFil\n\
geometry_msgs/Point ZMPDSP_accFil\n\
#float32 LAnklePitch_torqueIn     \n\
float32 LAnklePitch_velocityNow  \n\
float32 LAnklePitch_positionIK   \n\
float32 LAnklePitch_positionNow  \n\
float32 LAnklePitch_refPosFromPos\n\
float32 RAnklePitch_velocityNow  \n\
float32 RAnklePitch_positionIK   \n\
float32 RAnklePitch_positionNow \n\
float32 RAnklePitch_refPosFromPos\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Inertia\n\
# Mass [kg]\n\
float64 m\n\
\n\
# Center of mass [m]\n\
geometry_msgs/Vector3 com\n\
\n\
# Inertia Tensor [kg-m^2]\n\
#     | ixx ixy ixz |\n\
# I = | ixy iyy iyz |\n\
#     | ixz iyz izz |\n\
float64 ixx\n\
float64 ixy\n\
float64 ixz\n\
float64 iyy\n\
float64 iyz\n\
float64 izz\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::data_log_msgs::DataLog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_log_msgs::DataLog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RFootFK);
      stream.next(m.LFootFK);
      stream.next(m.TorsoFK);
      stream.next(m.RFootIK);
      stream.next(m.LFootIK);
      stream.next(m.TorsoIK);
      stream.next(m.IMUdegrees);
      stream.next(m.baseInertia);
      stream.next(m.LSSPInertia);
      stream.next(m.RSSPInertia);
      stream.next(m.DSPInertia);
      stream.next(m.ZMPLSSP);
      stream.next(m.ZMPRSSP);
      stream.next(m.ZMPDSP);
      stream.next(m.ZMPLSSP_accZ);
      stream.next(m.ZMPRSSP_accZ);
      stream.next(m.ZMPDSP_accZ);
      stream.next(m.ZMPLSSP_estimate);
      stream.next(m.ZMPRSSP_estimate);
      stream.next(m.ZMPDSP_estimate);
      stream.next(m.COMLSSPrpy);
      stream.next(m.COMRSSPrpy);
      stream.next(m.COMDSPrpy);
      stream.next(m.accelFiltered);
      stream.next(m.ZMPLSSP_accFil);
      stream.next(m.ZMPRSSP_accFil);
      stream.next(m.ZMPDSP_accFil);
      stream.next(m.LAnklePitch_velocityNow);
      stream.next(m.LAnklePitch_positionIK);
      stream.next(m.LAnklePitch_positionNow);
      stream.next(m.LAnklePitch_refPosFromPos);
      stream.next(m.RAnklePitch_velocityNow);
      stream.next(m.RAnklePitch_positionIK);
      stream.next(m.RAnklePitch_positionNow);
      stream.next(m.RAnklePitch_refPosFromPos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataLog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_log_msgs::DataLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_log_msgs::DataLog_<ContainerAllocator>& v)
  {
    s << indent << "RFootFK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.RFootFK);
    s << indent << "LFootFK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.LFootFK);
    s << indent << "TorsoFK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.TorsoFK);
    s << indent << "RFootIK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.RFootIK);
    s << indent << "LFootIK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.LFootIK);
    s << indent << "TorsoIK: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.TorsoIK);
    s << indent << "IMUdegrees: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.IMUdegrees);
    s << indent << "baseInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Inertia_<ContainerAllocator> >::stream(s, indent + "  ", v.baseInertia);
    s << indent << "LSSPInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Inertia_<ContainerAllocator> >::stream(s, indent + "  ", v.LSSPInertia);
    s << indent << "RSSPInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Inertia_<ContainerAllocator> >::stream(s, indent + "  ", v.RSSPInertia);
    s << indent << "DSPInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Inertia_<ContainerAllocator> >::stream(s, indent + "  ", v.DSPInertia);
    s << indent << "ZMPLSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPLSSP);
    s << indent << "ZMPRSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPRSSP);
    s << indent << "ZMPDSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPDSP);
    s << indent << "ZMPLSSP_accZ: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPLSSP_accZ);
    s << indent << "ZMPRSSP_accZ: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPRSSP_accZ);
    s << indent << "ZMPDSP_accZ: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPDSP_accZ);
    s << indent << "ZMPLSSP_estimate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPLSSP_estimate);
    s << indent << "ZMPRSSP_estimate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPRSSP_estimate);
    s << indent << "ZMPDSP_estimate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPDSP_estimate);
    s << indent << "COMLSSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMLSSPrpy);
    s << indent << "COMRSSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMRSSPrpy);
    s << indent << "COMDSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMDSPrpy);
    s << indent << "accelFiltered: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.accelFiltered);
    s << indent << "ZMPLSSP_accFil: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPLSSP_accFil);
    s << indent << "ZMPRSSP_accFil: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPRSSP_accFil);
    s << indent << "ZMPDSP_accFil: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPDSP_accFil);
    s << indent << "LAnklePitch_velocityNow: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_velocityNow);
    s << indent << "LAnklePitch_positionIK: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_positionIK);
    s << indent << "LAnklePitch_positionNow: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_positionNow);
    s << indent << "LAnklePitch_refPosFromPos: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_refPosFromPos);
    s << indent << "RAnklePitch_velocityNow: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_velocityNow);
    s << indent << "RAnklePitch_positionIK: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_positionIK);
    s << indent << "RAnklePitch_positionNow: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_positionNow);
    s << indent << "RAnklePitch_refPosFromPos: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_refPosFromPos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_LOG_MSGS_MESSAGE_DATALOG_H
