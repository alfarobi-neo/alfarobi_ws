// Generated by gencpp from file capture_step_module_msgs/GetWalkingParamResponse.msg
// DO NOT EDIT!


#ifndef CAPTURE_STEP_MODULE_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H
#define CAPTURE_STEP_MODULE_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <capture_step_module_msgs/WalkingParam.h>

namespace capture_step_module_msgs
{
template <class ContainerAllocator>
struct GetWalkingParamResponse_
{
  typedef GetWalkingParamResponse_<ContainerAllocator> Type;

  GetWalkingParamResponse_()
    : parameters()  {
    }
  GetWalkingParamResponse_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef  ::capture_step_module_msgs::WalkingParam_<ContainerAllocator>  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetWalkingParamResponse_

typedef ::capture_step_module_msgs::GetWalkingParamResponse_<std::allocator<void> > GetWalkingParamResponse;

typedef boost::shared_ptr< ::capture_step_module_msgs::GetWalkingParamResponse > GetWalkingParamResponsePtr;
typedef boost::shared_ptr< ::capture_step_module_msgs::GetWalkingParamResponse const> GetWalkingParamResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator1> & lhs, const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator2> & rhs)
{
  return lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator1> & lhs, const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capture_step_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a3185d180ac091f9720a1861c16b1c7";
  }

  static const char* value(const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a3185d180ac091fULL;
  static const uint64_t static_value2 = 0x9720a1861c16b1c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capture_step_module_msgs/GetWalkingParamResponse";
  }

  static const char* value(const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "WalkingParam    parameters\n"
"\n"
"================================================================================\n"
"MSG: capture_step_module_msgs/WalkingParam\n"
"####### Halt Position #######\n"
"float32 halt_pos_leg_ext\n"
"float32 halt_pos_leg_roll_ext\n"
"float32 halt_pos_leg_pitch_ext\n"
"float32 halt_pos_foot_roll_ext\n"
"float32 halt_pos_foot_pitch_ext\n"
"\n"
"####### Leg Lifting #####\n"
"float32 const_ground_push\n"
"float32 propt_ground_push\n"
"float32 const_step_height\n"
"float32 propt_step_height\n"
"\n"
"########## Leg Swing ########\n"
"float32 swing_start\n"
"float32 swing_stop\n"
"float32 sagittal_swg_fwd\n"
"float32 sagittal_swg_bwd\n"
"float32 lateral_swg\n"
"float32 lateral_swg_offset\n"
"float32 trng_lateral_swg_offset\n"
"float32 rotational_swg\n"
"float32 rotational_swg_offset\n"
"\n"
"########## Lateral Hip Swing ##########\n"
"float32 lateral_hip_swg\n"
"\n"
"########## Leaning ##########\n"
"float32 fwd_lean\n"
"float32 bwd_lean\n"
"float32 fwd_trng_lean\n"
"\n"
"########## Step ##########\n"
"float32 gait_vel_limit\n"
"float32 sagittal_acc\n"
"float32 lateral_acc\n"
"float32 rotational_acc\n"
"float32 const_step_freq\n"
"float32 sagittal_prop_step_freq\n"
"float32 lateral_prop_step_freq\n"
"\n"
"########## walking parameter ########\n"
"float32 x_move_amplitude\n"
"float32 y_move_amplitude\n"
"float32 angle_move_amplitude\n"
"bool halt_position\n"
"bool leg_lifting\n"
"bool leg_swing\n"
"bool lateral_swing\n"
"bool leaning\n"
"\n"
;
  }

  static const char* value(const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetWalkingParamResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capture_step_module_msgs::GetWalkingParamResponse_<ContainerAllocator>& v)
  {
    s << indent << "parameters: ";
    s << std::endl;
    Printer< ::capture_step_module_msgs::WalkingParam_<ContainerAllocator> >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPTURE_STEP_MODULE_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H
