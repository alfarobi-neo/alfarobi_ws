// Generated by gencpp from file humanoid_league_msgs/Model.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_MODEL_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_MODEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <humanoid_league_msgs/BallRelative.h>
#include <humanoid_league_msgs/ObstaclesRelative.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct Model_
{
  typedef Model_<ContainerAllocator> Type;

  Model_()
    : ball()
    , obstacles()
    , position()  {
    }
  Model_(const ContainerAllocator& _alloc)
    : ball(_alloc)
    , obstacles(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::humanoid_league_msgs::BallRelative_<ContainerAllocator>  _ball_type;
  _ball_type ball;

   typedef  ::humanoid_league_msgs::ObstaclesRelative_<ContainerAllocator>  _obstacles_type;
  _obstacles_type obstacles;

   typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::humanoid_league_msgs::Model_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::Model_<ContainerAllocator> const> ConstPtr;

}; // struct Model_

typedef ::humanoid_league_msgs::Model_<std::allocator<void> > Model;

typedef boost::shared_ptr< ::humanoid_league_msgs::Model > ModelPtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::Model const> ModelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::Model_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::Model_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::Model_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Model_<ContainerAllocator2> & rhs)
{
  return lhs.ball == rhs.ball &&
    lhs.obstacles == rhs.obstacles &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::Model_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Model_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Model_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Model_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Model_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Model_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Model_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55f7ee25e88a6845f62dc23a8bccd993";
  }

  static const char* value(const ::humanoid_league_msgs::Model_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55f7ee25e88a6845ULL;
  static const uint64_t static_value2 = 0xf62dc23a8bccd993ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/Model";
  }

  static const char* value(const ::humanoid_league_msgs::Model_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::Model_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The model message contains all information from the object recognition after filtering\n"
"\n"
"BallRelative ball\n"
"ObstaclesRelative obstacles\n"
"geometry_msgs/PoseWithCovarianceStamped position\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/BallRelative\n"
"# Provides the relative position of the ball\n"
"\n"
"# The header is included to get the time stamp\n"
"std_msgs/Header header\n"
"\n"
"# x to front\n"
"# y to left\n"
"# z height (should normally be 0, if ball was not high kicked)\n"
"# Everything is measured in meters\n"
"geometry_msgs/Point ball_relative\n"
"\n"
"# A certainty rating between 0 and 1, where 1 is the surest.\n"
"# 0 means no ball was found\n"
"float32 confidence\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/ObstaclesRelative\n"
"# The header is included to get the time stamp for later use in tf\n"
"std_msgs/Header header\n"
"\n"
"ObstacleRelative[] obstacles\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/ObstacleRelative\n"
"# An obstacle relative to the robot\n"
"\n"
"# Main color of the obstacle, to differentiate between robots and other things like human legs\n"
"# Something we cant classify\n"
"uint8 UNDEFINED = 0\n"
"# robot without known color\n"
"uint8 ROBOT_UNDEFINED = 1\n"
"uint8 ROBOT_MAGENTA = 2\n"
"uint8 ROBOT_CYAN = 3\n"
"# A human legs, e.g. from the referee\n"
"uint8 HUMAN = 4\n"
"# Black poles which are normally used for technical challenges\n"
"uint8 POLE = 5\n"
"uint8 color\n"
"\n"
"# The number of the robot, if it is a robot and if it can be read. Put in -1 if not known\n"
"uint8 playerNumber\n"
"\n"
"# Position (in meters)\n"
"geometry_msgs/Point position\n"
"\n"
"# Educated guess of the width and height (in meters)\n"
"float32 width\n"
"float32 height\n"
"\n"
"# A certainty rating between 0 and 1, where 1 is the surest.\n"
"float32 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::Model_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::Model_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball);
      stream.next(m.obstacles);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Model_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::Model_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::Model_<ContainerAllocator>& v)
  {
    s << indent << "ball: ";
    s << std::endl;
    Printer< ::humanoid_league_msgs::BallRelative_<ContainerAllocator> >::stream(s, indent + "  ", v.ball);
    s << indent << "obstacles: ";
    s << std::endl;
    Printer< ::humanoid_league_msgs::ObstaclesRelative_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacles);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_MODEL_H
