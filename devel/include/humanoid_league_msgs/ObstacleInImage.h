// Generated by gencpp from file humanoid_league_msgs/ObstacleInImage.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_OBSTACLEINIMAGE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_OBSTACLEINIMAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct ObstacleInImage_
{
  typedef ObstacleInImage_<ContainerAllocator> Type;

  ObstacleInImage_()
    : color(0)
    , playerNumber(0)
    , top_left()
    , height(0)
    , width(0)
    , confidence(0.0)  {
    }
  ObstacleInImage_(const ContainerAllocator& _alloc)
    : color(0)
    , playerNumber(0)
    , top_left(_alloc)
    , height(0)
    , width(0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _color_type;
  _color_type color;

   typedef uint8_t _playerNumber_type;
  _playerNumber_type playerNumber;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _top_left_type;
  _top_left_type top_left;

   typedef uint8_t _height_type;
  _height_type height;

   typedef uint8_t _width_type;
  _width_type width;

   typedef float _confidence_type;
  _confidence_type confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDEFINED)
  #undef UNDEFINED
#endif
#if defined(_WIN32) && defined(ROBOT_UNDEFINED)
  #undef ROBOT_UNDEFINED
#endif
#if defined(_WIN32) && defined(ROBOT_MAGENTA)
  #undef ROBOT_MAGENTA
#endif
#if defined(_WIN32) && defined(ROBOT_CYAN)
  #undef ROBOT_CYAN
#endif
#if defined(_WIN32) && defined(HUMAN)
  #undef HUMAN
#endif
#if defined(_WIN32) && defined(POLE)
  #undef POLE
#endif

  enum {
    UNDEFINED = 0u,
    ROBOT_UNDEFINED = 1u,
    ROBOT_MAGENTA = 2u,
    ROBOT_CYAN = 3u,
    HUMAN = 4u,
    POLE = 5u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleInImage_

typedef ::humanoid_league_msgs::ObstacleInImage_<std::allocator<void> > ObstacleInImage;

typedef boost::shared_ptr< ::humanoid_league_msgs::ObstacleInImage > ObstacleInImagePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::ObstacleInImage const> ObstacleInImageConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.playerNumber == rhs.playerNumber &&
    lhs.top_left == rhs.top_left &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e334321d63927966a578660e9c5fd06";
  }

  static const char* value(const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e334321d6392796ULL;
  static const uint64_t static_value2 = 0x6a578660e9c5fd06ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/ObstacleInImage";
  }

  static const char* value(const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An obstacle in the image, which can be a robot, a human or something else\n"
"\n"
"# Main color of the obstacle, to differentiate between robots and other things like human legs\n"
"# Something we cant classify\n"
"uint8 UNDEFINED = 0\n"
"# Robot without known color\n"
"uint8 ROBOT_UNDEFINED = 1\n"
"uint8 ROBOT_MAGENTA = 2\n"
"uint8 ROBOT_CYAN = 3\n"
"# A human legs, e.g. from the referee\n"
"uint8 HUMAN = 4\n"
"# Black poles which are normally used for technical challenges\n"
"uint8 POLE = 5\n"
"uint8 color\n"
"\n"
"# The number of the robot, if it is a robot and if it can be read. Put in -1 if not known\n"
"uint8 playerNumber\n"
"\n"
"# The corresponding section in the image\n"
"geometry_msgs/Point top_left\n"
"uint8 height\n"
"uint8 width\n"
"\n"
"# A certainty rating between 0 and 1, where 1 is the surest.\n"
"float32 confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.playerNumber);
      stream.next(m.top_left);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleInImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::ObstacleInImage_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "playerNumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.playerNumber);
    s << indent << "top_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.top_left);
    s << indent << "height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.width);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_OBSTACLEINIMAGE_H
