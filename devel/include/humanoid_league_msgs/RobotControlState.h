// Generated by gencpp from file humanoid_league_msgs/RobotControlState.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_ROBOTCONTROLSTATE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_ROBOTCONTROLSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct RobotControlState_
{
  typedef RobotControlState_<ContainerAllocator> Type;

  RobotControlState_()
    : state(0)  {
    }
  RobotControlState_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONTROLABLE)
  #undef CONTROLABLE
#endif
#if defined(_WIN32) && defined(FALLING)
  #undef FALLING
#endif
#if defined(_WIN32) && defined(FALLEN)
  #undef FALLEN
#endif
#if defined(_WIN32) && defined(GETTING_UP)
  #undef GETTING_UP
#endif
#if defined(_WIN32) && defined(ANIMATION_RUNNING)
  #undef ANIMATION_RUNNING
#endif
#if defined(_WIN32) && defined(STARTUP)
  #undef STARTUP
#endif
#if defined(_WIN32) && defined(SHUTDOWN)
  #undef SHUTDOWN
#endif
#if defined(_WIN32) && defined(PENALTY)
  #undef PENALTY
#endif
#if defined(_WIN32) && defined(PENALTY_ANIMANTION)
  #undef PENALTY_ANIMANTION
#endif
#if defined(_WIN32) && defined(RECORD)
  #undef RECORD
#endif
#if defined(_WIN32) && defined(WALKING)
  #undef WALKING
#endif
#if defined(_WIN32) && defined(MOTOR_OFF)
  #undef MOTOR_OFF
#endif
#if defined(_WIN32) && defined(HCM_OFF)
  #undef HCM_OFF
#endif

  enum {
    CONTROLABLE = 0u,
    FALLING = 1u,
    FALLEN = 2u,
    GETTING_UP = 3u,
    ANIMATION_RUNNING = 4u,
    STARTUP = 5u,
    SHUTDOWN = 6u,
    PENALTY = 7u,
    PENALTY_ANIMANTION = 8u,
    RECORD = 9u,
    WALKING = 10u,
    MOTOR_OFF = 11u,
    HCM_OFF = 12u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> const> ConstPtr;

}; // struct RobotControlState_

typedef ::humanoid_league_msgs::RobotControlState_<std::allocator<void> > RobotControlState;

typedef boost::shared_ptr< ::humanoid_league_msgs::RobotControlState > RobotControlStatePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::RobotControlState const> RobotControlStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2328f6cdab1397e392c2b1404b1c4d3c";
  }

  static const char* value(const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2328f6cdab1397e3ULL;
  static const uint64_t static_value2 = 0x92c2b1404b1c4d3cULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/RobotControlState";
  }

  static const char* value(const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message provides the current state of the hardware control manager (HCM), which is handling falling, standing up and the decision\n"
"# between playing animations and walking\n"
"\n"
"# Robot can be controlled from a higher level\n"
"uint8 CONTROLABLE=0\n"
"# Robot is currently falling\n"
"# it can not be controlled and should go to a position that minimizes the damage during a fall\n"
"uint8 FALLING=1\n"
"# Robot is lying on the floor\n"
"# maybe reset your world model, as the state should be unsure now\n"
"uint8 FALLEN=2\n"
"# Robot is currently trying to get up again\n"
"uint8 GETTING_UP=3\n"
"# An animation is running\n"
"# no walking or further animations possible\n"
"# Falling detection is deactivated\n"
"uint8 ANIMATION_RUNNING=4\n"
"# The hardware control manager is booting\n"
"uint8 STARTUP=5\n"
"# The hardware control manager is shutting down\n"
"uint8 SHUTDOWN=6\n"
"# The robot is in penalty position\n"
"# It can not be controlled\n"
"uint8 PENALTY=7\n"
"# The robot is getting in or out of penalty position\n"
"uint8 PENALTY_ANIMANTION=8\n"
"# The robot is used for recording animations\n"
"# Reserved all controling to a recording process\n"
"# No falling detection is processed and no stand ups will be done\n"
"uint8 RECORD=9\n"
"# The robot is walking\n"
"uint8 WALKING=10\n"
"# A state where the motors are turned off, but the hardware control manager is still waiting for commandos and turns the motors on,\n"
"# if a move commando comes\n"
"uint8 MOTOR_OFF=11\n"
"# Last status send by the hardware control manager after shutting down\n"
"uint8 HCM_OFF=12\n"
"\n"
"uint8 state\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotControlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::RobotControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::RobotControlState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_ROBOTCONTROLSTATE_H
