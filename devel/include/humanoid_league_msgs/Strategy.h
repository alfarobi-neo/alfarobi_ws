// Generated by gencpp from file humanoid_league_msgs/Strategy.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct Strategy_
{
  typedef Strategy_<ContainerAllocator> Type;

  Strategy_()
    : role(0)
    , action(0)
    , offensive_side(0)  {
    }
  Strategy_(const ContainerAllocator& _alloc)
    : role(0)
    , action(0)
    , offensive_side(0)  {
  (void)_alloc;
    }



   typedef uint8_t _role_type;
  _role_type role;

   typedef uint8_t _action_type;
  _action_type action;

   typedef uint8_t _offensive_side_type;
  _offensive_side_type offensive_side;



  enum {
    ROLE_IDLING = 0u,
    ROLE_OTHER = 1u,
    ROLE_STRIKER = 2u,
    ROLE_SUPPORTER = 3u,
    ROLE_DEFENDER = 4u,
    ROLE_GOALIE = 5u,
    ACTION_UNDEFINED = 0u,
    ACTION_POSITIONING = 1u,
    ACTION_GOING_TO_BALL = 2u,
    ACTION_TRYING_TO_SCORE = 3u,
    ACTION_WAITING = 4u,
    SIDE_LEFT = 0u,
    SIDE_MIDDLE = 1u,
    SIDE_RIGHT = 2u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const> ConstPtr;

}; // struct Strategy_

typedef ::humanoid_league_msgs::Strategy_<std::allocator<void> > Strategy;

typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy > StrategyPtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy const> StrategyConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::Strategy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'humanoid_league_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Communication/humanoid_league_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73b1522777cf7f264eedf954da4c5819";
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73b1522777cf7f26ULL;
  static const uint64_t static_value2 = 0x4eedf954da4c5819ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/Strategy";
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message provides information about the current strategy of the robot to the team communication so that it can be\n\
# shared with other team robots\n\
\n\
# Which role the robot has currently\n\
uint8 ROLE_IDLING=0\n\
uint8 ROLE_OTHER=1\n\
uint8 ROLE_STRIKER=2\n\
uint8 ROLE_SUPPORTER=3\n\
uint8 ROLE_DEFENDER=4\n\
uint8 ROLE_GOALIE=5\n\
uint8 role\n\
\n\
# The current action of the robot\n\
uint8 ACTION_UNDEFINED=0\n\
uint8 ACTION_POSITIONING=1\n\
uint8 ACTION_GOING_TO_BALL=2\n\
uint8 ACTION_TRYING_TO_SCORE=3\n\
uint8 ACTION_WAITING=4\n\
uint8 action\n\
\n\
# Offensive strategy\n\
uint8 SIDE_LEFT = 0\n\
uint8 SIDE_MIDDLE = 1\n\
uint8 SIDE_RIGHT = 2\n\
uint8 offensive_side\n\
";
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.role);
      stream.next(m.action);
      stream.next(m.offensive_side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Strategy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::Strategy_<ContainerAllocator>& v)
  {
    s << indent << "role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.role);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "offensive_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offensive_side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H
