// Generated by gencpp from file humanoid_league_msgs/Strategy.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct Strategy_
{
  typedef Strategy_<ContainerAllocator> Type;

  Strategy_()
    : role(0)
    , action(0)
    , offensive_side(0)  {
    }
  Strategy_(const ContainerAllocator& _alloc)
    : role(0)
    , action(0)
    , offensive_side(0)  {
  (void)_alloc;
    }



   typedef uint8_t _role_type;
  _role_type role;

   typedef uint8_t _action_type;
  _action_type action;

   typedef uint8_t _offensive_side_type;
  _offensive_side_type offensive_side;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROLE_IDLING)
  #undef ROLE_IDLING
#endif
#if defined(_WIN32) && defined(ROLE_OTHER)
  #undef ROLE_OTHER
#endif
#if defined(_WIN32) && defined(ROLE_STRIKER)
  #undef ROLE_STRIKER
#endif
#if defined(_WIN32) && defined(ROLE_SUPPORTER)
  #undef ROLE_SUPPORTER
#endif
#if defined(_WIN32) && defined(ROLE_DEFENDER)
  #undef ROLE_DEFENDER
#endif
#if defined(_WIN32) && defined(ROLE_GOALIE)
  #undef ROLE_GOALIE
#endif
#if defined(_WIN32) && defined(ACTION_UNDEFINED)
  #undef ACTION_UNDEFINED
#endif
#if defined(_WIN32) && defined(ACTION_POSITIONING)
  #undef ACTION_POSITIONING
#endif
#if defined(_WIN32) && defined(ACTION_GOING_TO_BALL)
  #undef ACTION_GOING_TO_BALL
#endif
#if defined(_WIN32) && defined(ACTION_TRYING_TO_SCORE)
  #undef ACTION_TRYING_TO_SCORE
#endif
#if defined(_WIN32) && defined(ACTION_WAITING)
  #undef ACTION_WAITING
#endif
#if defined(_WIN32) && defined(SIDE_LEFT)
  #undef SIDE_LEFT
#endif
#if defined(_WIN32) && defined(SIDE_MIDDLE)
  #undef SIDE_MIDDLE
#endif
#if defined(_WIN32) && defined(SIDE_RIGHT)
  #undef SIDE_RIGHT
#endif

  enum {
    ROLE_IDLING = 0u,
    ROLE_OTHER = 1u,
    ROLE_STRIKER = 2u,
    ROLE_SUPPORTER = 3u,
    ROLE_DEFENDER = 4u,
    ROLE_GOALIE = 5u,
    ACTION_UNDEFINED = 0u,
    ACTION_POSITIONING = 1u,
    ACTION_GOING_TO_BALL = 2u,
    ACTION_TRYING_TO_SCORE = 3u,
    ACTION_WAITING = 4u,
    SIDE_LEFT = 0u,
    SIDE_MIDDLE = 1u,
    SIDE_RIGHT = 2u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const> ConstPtr;

}; // struct Strategy_

typedef ::humanoid_league_msgs::Strategy_<std::allocator<void> > Strategy;

typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy > StrategyPtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::Strategy const> StrategyConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::Strategy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::Strategy_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Strategy_<ContainerAllocator2> & rhs)
{
  return lhs.role == rhs.role &&
    lhs.action == rhs.action &&
    lhs.offensive_side == rhs.offensive_side;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::Strategy_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Strategy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Strategy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73b1522777cf7f264eedf954da4c5819";
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73b1522777cf7f26ULL;
  static const uint64_t static_value2 = 0x4eedf954da4c5819ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/Strategy";
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message provides information about the current strategy of the robot to the team communication so that it can be\n"
"# shared with other team robots\n"
"\n"
"# Which role the robot has currently\n"
"uint8 ROLE_IDLING=0\n"
"uint8 ROLE_OTHER=1\n"
"uint8 ROLE_STRIKER=2\n"
"uint8 ROLE_SUPPORTER=3\n"
"uint8 ROLE_DEFENDER=4\n"
"uint8 ROLE_GOALIE=5\n"
"uint8 role\n"
"\n"
"# The current action of the robot\n"
"uint8 ACTION_UNDEFINED=0\n"
"uint8 ACTION_POSITIONING=1\n"
"uint8 ACTION_GOING_TO_BALL=2\n"
"uint8 ACTION_TRYING_TO_SCORE=3\n"
"uint8 ACTION_WAITING=4\n"
"uint8 action\n"
"\n"
"# Offensive strategy\n"
"uint8 SIDE_LEFT = 0\n"
"uint8 SIDE_MIDDLE = 1\n"
"uint8 SIDE_RIGHT = 2\n"
"uint8 offensive_side\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::Strategy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.role);
      stream.next(m.action);
      stream.next(m.offensive_side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Strategy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::Strategy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::Strategy_<ContainerAllocator>& v)
  {
    s << indent << "role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.role);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "offensive_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offensive_side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_STRATEGY_H
