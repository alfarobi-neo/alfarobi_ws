// Generated by gencpp from file humanoid_league_msgs/Speak.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_SPEAK_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_SPEAK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct Speak_
{
  typedef Speak_<ContainerAllocator> Type;

  Speak_()
    : text()
    , priority(0)
    , filename()  {
    }
  Speak_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , priority(0)
    , filename(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef uint8_t _priority_type;
  _priority_type priority;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOW_PRIORITY)
  #undef LOW_PRIORITY
#endif
#if defined(_WIN32) && defined(MID_PRIORITY)
  #undef MID_PRIORITY
#endif
#if defined(_WIN32) && defined(HIGH_PRIORITY)
  #undef HIGH_PRIORITY
#endif

  enum {
    LOW_PRIORITY = 0u,
    MID_PRIORITY = 1u,
    HIGH_PRIORITY = 2u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::Speak_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::Speak_<ContainerAllocator> const> ConstPtr;

}; // struct Speak_

typedef ::humanoid_league_msgs::Speak_<std::allocator<void> > Speak;

typedef boost::shared_ptr< ::humanoid_league_msgs::Speak > SpeakPtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::Speak const> SpeakConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::Speak_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::Speak_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::Speak_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Speak_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.priority == rhs.priority &&
    lhs.filename == rhs.filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::Speak_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Speak_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Speak_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Speak_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Speak_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f360f3d1d1c01a5c835f4716354e4c26";
  }

  static const char* value(const ::humanoid_league_msgs::Speak_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf360f3d1d1c01a5cULL;
  static const uint64_t static_value2 = 0x835f4716354e4c26ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/Speak";
  }

  static const char* value(const ::humanoid_league_msgs::Speak_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used to activate the audio output of the robot\n"
"# This can be used for debug proposed but also for natural language team communication\n"
"\n"
"# The text will only be outputed if \"filename\" is empty\n"
"string text\n"
"\n"
"uint8 LOW_PRIORITY=0\n"
"uint8 MID_PRIORITY=1\n"
"uint8 HIGH_PRIORITY=2\n"
"uint8 priority\n"
"\n"
"# If a file should be read, the path has to be specified here. Otherwise this string should be null\n"
"string filename\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::Speak_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.priority);
      stream.next(m.filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Speak_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::Speak_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::Speak_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_SPEAK_H
