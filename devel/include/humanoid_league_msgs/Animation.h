// Generated by gencpp from file humanoid_league_msgs/Animation.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_ANIMATION_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_ANIMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <trajectory_msgs/JointTrajectory.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct Animation_
{
  typedef Animation_<ContainerAllocator> Type;

  Animation_()
    : header()
    , request(false)
    , first(false)
    , last(false)
    , hcm(false)
    , position()  {
    }
  Animation_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , request(false)
    , first(false)
    , last(false)
    , hcm(false)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _request_type;
  _request_type request;

   typedef uint8_t _first_type;
  _first_type first;

   typedef uint8_t _last_type;
  _last_type last;

   typedef uint8_t _hcm_type;
  _hcm_type hcm;

   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::humanoid_league_msgs::Animation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::Animation_<ContainerAllocator> const> ConstPtr;

}; // struct Animation_

typedef ::humanoid_league_msgs::Animation_<std::allocator<void> > Animation;

typedef boost::shared_ptr< ::humanoid_league_msgs::Animation > AnimationPtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::Animation const> AnimationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::Animation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::Animation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::Animation_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Animation_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.request == rhs.request &&
    lhs.first == rhs.first &&
    lhs.last == rhs.last &&
    lhs.hcm == rhs.hcm &&
    lhs.position == rhs.position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::Animation_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::Animation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::Animation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::Animation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::Animation_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dca54c410ac9021185fa92160c24c438";
  }

  static const char* value(const ::humanoid_league_msgs::Animation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdca54c410ac90211ULL;
  static const uint64_t static_value2 = 0x85fa92160c24c438ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/Animation";
  }

  static const char* value(const ::humanoid_league_msgs::Animation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# This is a request to make HCM controllable, e.g. stop walking\n"
"bool request\n"
"\n"
"# First message of this animation\n"
"bool first\n"
"\n"
"# Last message of this animation\n"
"bool last\n"
"\n"
"# Is this animation comming from the hardware control manager\n"
"bool hcm\n"
"\n"
"# Joint goals\n"
"trajectory_msgs/JointTrajectory position\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::Animation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.request);
      stream.next(m.first);
      stream.next(m.last);
      stream.next(m.hcm);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Animation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::Animation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::Animation_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request);
    s << indent << "first: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first);
    s << indent << "last: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.last);
    s << indent << "hcm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hcm);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_ANIMATION_H
