// Generated by gencpp from file humanoid_league_msgs/LineSegmentInImage.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_LINESEGMENTINIMAGE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_LINESEGMENTINIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct LineSegmentInImage_
{
  typedef LineSegmentInImage_<ContainerAllocator> Type;

  LineSegmentInImage_()
    : start()
    , end()
    , start_width(0.0)
    , end_with(0.0)
    , confidence(0.0)  {
    }
  LineSegmentInImage_(const ContainerAllocator& _alloc)
    : start(_alloc)
    , end(_alloc)
    , start_width(0.0)
    , end_with(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _start_type;
  _start_type start;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_type;
  _end_type end;

   typedef float _start_width_type;
  _start_width_type start_width;

   typedef float _end_with_type;
  _end_with_type end_with;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> const> ConstPtr;

}; // struct LineSegmentInImage_

typedef ::humanoid_league_msgs::LineSegmentInImage_<std::allocator<void> > LineSegmentInImage;

typedef boost::shared_ptr< ::humanoid_league_msgs::LineSegmentInImage > LineSegmentInImagePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::LineSegmentInImage const> LineSegmentInImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'humanoid_league_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Communication/humanoid_league_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0e1617931b08ca66afbb6d4be8d99e3";
  }

  static const char* value(const ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0e1617931b08ca6ULL;
  static const uint64_t static_value2 = 0x6afbb6d4be8d99e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/LineSegmentInImage";
  }

  static const char* value(const ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A normal line segment in the image\n\
\n\
# Two points defining the vector of the line. The center is orthogonally in the middle of the line\n\
geometry_msgs/Point start\n\
geometry_msgs/Point end\n\
\n\
# Orthogonal to the significant vector\n\
float32 start_width\n\
float32 end_with\n\
\n\
# A certainty rating between 0 and 1, where 1 is the surest.\n\
float32 confidence\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.end);
      stream.next(m.start_width);
      stream.next(m.end_with);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineSegmentInImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.start);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
    s << indent << "start_width: ";
    Printer<float>::stream(s, indent + "  ", v.start_width);
    s << indent << "end_with: ";
    Printer<float>::stream(s, indent + "  ", v.end_with);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_LINESEGMENTINIMAGE_H
