// Generated by gencpp from file humanoid_league_msgs/HeadMode.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_HEADMODE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_HEADMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct HeadMode_
{
  typedef HeadMode_<ContainerAllocator> Type;

  HeadMode_()
    : headMode(0)  {
    }
  HeadMode_(const ContainerAllocator& _alloc)
    : headMode(0)  {
  (void)_alloc;
    }



   typedef uint8_t _headMode_type;
  _headMode_type headMode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BALL_MODE)
  #undef BALL_MODE
#endif
#if defined(_WIN32) && defined(POST_MODE)
  #undef POST_MODE
#endif
#if defined(_WIN32) && defined(BALL_GOAL_TRACKING)
  #undef BALL_GOAL_TRACKING
#endif
#if defined(_WIN32) && defined(FIELD_FEATURES)
  #undef FIELD_FEATURES
#endif
#if defined(_WIN32) && defined(NON_FIELD_FEATURES)
  #undef NON_FIELD_FEATURES
#endif
#if defined(_WIN32) && defined(LOOK_DOWN)
  #undef LOOK_DOWN
#endif
#if defined(_WIN32) && defined(LOOK_FORWARD)
  #undef LOOK_FORWARD
#endif
#if defined(_WIN32) && defined(DONT_MOVE)
  #undef DONT_MOVE
#endif
#if defined(_WIN32) && defined(LOOK_UP)
  #undef LOOK_UP
#endif

  enum {
    BALL_MODE = 0u,
    POST_MODE = 1u,
    BALL_GOAL_TRACKING = 2u,
    FIELD_FEATURES = 3u,
    NON_FIELD_FEATURES = 4u,
    LOOK_DOWN = 5u,
    LOOK_FORWARD = 7u,
    DONT_MOVE = 8u,
    LOOK_UP = 9u,
  };


  typedef boost::shared_ptr< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> const> ConstPtr;

}; // struct HeadMode_

typedef ::humanoid_league_msgs::HeadMode_<std::allocator<void> > HeadMode;

typedef boost::shared_ptr< ::humanoid_league_msgs::HeadMode > HeadModePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::HeadMode const> HeadModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::HeadMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::HeadMode_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::HeadMode_<ContainerAllocator2> & rhs)
{
  return lhs.headMode == rhs.headMode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::HeadMode_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::HeadMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb98960a74192c06acad277ece0eb0d1";
  }

  static const char* value(const ::humanoid_league_msgs::HeadMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb98960a74192c06ULL;
  static const uint64_t static_value2 = 0xacad277ece0eb0d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/HeadMode";
  }

  static const char* value(const ::humanoid_league_msgs::HeadMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used for communicating between the body behaviour and the head behaviour\n"
"# The body tells the head by this message what it shall do\n"
"\n"
"# Search for Ball and track it if found\n"
"uint8 BALL_MODE=0\n"
"# Search for goal posts, mainly to locate the robot on the field\n"
"uint8 POST_MODE=1\n"
"# Track ball and goal by constantly switching between both\n"
"uint8 BALL_GOAL_TRACKING=2\n"
"# Look generally for all features on the field (ball, goals, corners, center point)\n"
"uint8 FIELD_FEATURES=3\n"
"# Look for features outside of the field (perimeter advertising, walls, etc).\n"
"# Can be used for localization using features on the ceiling.\n"
"uint8 NON_FIELD_FEATURES=4\n"
"# Simply look down to its feet.\n"
"uint8 LOOK_DOWN=5\n"
"# Simply look directly forward\n"
"uint8 LOOK_FORWARD=7\n"
"#Don't move the head\n"
"uint8 DONT_MOVE=8\n"
"# Look to the ceiling, for example for visual compas\n"
"uint8 LOOK_UP=9\n"
"uint8 headMode\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::HeadMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.headMode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::HeadMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::HeadMode_<ContainerAllocator>& v)
  {
    s << indent << "headMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headMode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_HEADMODE_H
