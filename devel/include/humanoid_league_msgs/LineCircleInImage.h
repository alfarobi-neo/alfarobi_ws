// Generated by gencpp from file humanoid_league_msgs/LineCircleInImage.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_LINECIRCLEINIMAGE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_LINECIRCLEINIMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct LineCircleInImage_
{
  typedef LineCircleInImage_<ContainerAllocator> Type;

  LineCircleInImage_()
    : left()
    , middle()
    , right()  {
    }
  LineCircleInImage_(const ContainerAllocator& _alloc)
    : left(_alloc)
    , middle(_alloc)
    , right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _left_type;
  _left_type left;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _middle_type;
  _middle_type middle;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> const> ConstPtr;

}; // struct LineCircleInImage_

typedef ::humanoid_league_msgs::LineCircleInImage_<std::allocator<void> > LineCircleInImage;

typedef boost::shared_ptr< ::humanoid_league_msgs::LineCircleInImage > LineCircleInImagePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::LineCircleInImage const> LineCircleInImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'humanoid_league_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Communication/humanoid_league_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a308f4836d6e1ddc7fdb4aef3d3e8a62";
  }

  static const char* value(const ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa308f4836d6e1ddcULL;
  static const uint64_t static_value2 = 0x7fdb4aef3d3e8a62ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/LineCircleInImage";
  }

  static const char* value(const ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines a line circle in image space, i.e. the center circle\n\
\n\
# The circle is defined by an arc with left and right end points and a point in the middle for getting the radius\n\
geometry_msgs/Point left\n\
geometry_msgs/Point middle\n\
geometry_msgs/Point right\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.middle);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineCircleInImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
    s << indent << "middle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.middle);
    s << indent << "right: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_LINECIRCLEINIMAGE_H
