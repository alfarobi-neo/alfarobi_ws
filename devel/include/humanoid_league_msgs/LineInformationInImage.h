// Generated by gencpp from file humanoid_league_msgs/LineInformationInImage.msg
// DO NOT EDIT!


#ifndef HUMANOID_LEAGUE_MSGS_MESSAGE_LINEINFORMATIONINIMAGE_H
#define HUMANOID_LEAGUE_MSGS_MESSAGE_LINEINFORMATIONINIMAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <humanoid_league_msgs/LineIntersectionInImage.h>
#include <humanoid_league_msgs/LineSegmentInImage.h>
#include <humanoid_league_msgs/LineCircleInImage.h>

namespace humanoid_league_msgs
{
template <class ContainerAllocator>
struct LineInformationInImage_
{
  typedef LineInformationInImage_<ContainerAllocator> Type;

  LineInformationInImage_()
    : header()
    , intersections()
    , segments()
    , circles()  {
    }
  LineInformationInImage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , intersections(_alloc)
    , segments(_alloc)
    , circles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::humanoid_league_msgs::LineIntersectionInImage_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::humanoid_league_msgs::LineIntersectionInImage_<ContainerAllocator> >> _intersections_type;
  _intersections_type intersections;

   typedef std::vector< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >> _segments_type;
  _segments_type segments;

   typedef std::vector< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >> _circles_type;
  _circles_type circles;





  typedef boost::shared_ptr< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> const> ConstPtr;

}; // struct LineInformationInImage_

typedef ::humanoid_league_msgs::LineInformationInImage_<std::allocator<void> > LineInformationInImage;

typedef boost::shared_ptr< ::humanoid_league_msgs::LineInformationInImage > LineInformationInImagePtr;
typedef boost::shared_ptr< ::humanoid_league_msgs::LineInformationInImage const> LineInformationInImageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.intersections == rhs.intersections &&
    lhs.segments == rhs.segments &&
    lhs.circles == rhs.circles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator1> & lhs, const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace humanoid_league_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0046bff18564d1ff259c25b80b246444";
  }

  static const char* value(const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0046bff18564d1ffULL;
  static const uint64_t static_value2 = 0x259c25b80b246444ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "humanoid_league_msgs/LineInformationInImage";
  }

  static const char* value(const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Contains all line related information on the image itself\n"
"\n"
"# The header is included to get the time stamp for later use in tf\n"
"std_msgs/Header header\n"
"\n"
"LineIntersectionInImage[] intersections\n"
"LineSegmentInImage[] segments\n"
"LineCircleInImage[] circles\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/LineIntersectionInImage\n"
"# A line intersection feature in the image\n"
"\n"
"# The type defines which kind of intersection is present\n"
"uint8 UNDEFINED=0\n"
"uint8 L=1\n"
"uint8 T=2\n"
"uint8 X=3\n"
"uint8 type\n"
"\n"
"# The line segments related to this crossing\n"
"humanoid_league_msgs/LineSegmentInImage segments\n"
"\n"
"# A certainty rating between 0 and 1, where 1 is the surest.\n"
"float32 confidence\n"
"\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/LineSegmentInImage\n"
"# A normal line segment in the image\n"
"\n"
"# Two points defining the vector of the line. The center is orthogonally in the middle of the line\n"
"geometry_msgs/Point start\n"
"geometry_msgs/Point end\n"
"\n"
"# Orthogonal to the significant vector\n"
"float32 start_width\n"
"float32 end_with\n"
"\n"
"# A certainty rating between 0 and 1, where 1 is the surest.\n"
"float32 confidence\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: humanoid_league_msgs/LineCircleInImage\n"
"# Defines a line circle in image space, i.e. the center circle\n"
"\n"
"# The circle is defined by an arc with left and right end points and a point in the middle for getting the radius\n"
"geometry_msgs/Point left\n"
"geometry_msgs/Point middle\n"
"geometry_msgs/Point right\n"
"\n"
;
  }

  static const char* value(const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.intersections);
      stream.next(m.segments);
      stream.next(m.circles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineInformationInImage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::humanoid_league_msgs::LineInformationInImage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "intersections[]" << std::endl;
    for (size_t i = 0; i < v.intersections.size(); ++i)
    {
      s << indent << "  intersections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::humanoid_league_msgs::LineIntersectionInImage_<ContainerAllocator> >::stream(s, indent + "    ", v.intersections[i]);
    }
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::humanoid_league_msgs::LineSegmentInImage_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
    s << indent << "circles[]" << std::endl;
    for (size_t i = 0; i < v.circles.size(); ++i)
    {
      s << indent << "  circles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::humanoid_league_msgs::LineCircleInImage_<ContainerAllocator> >::stream(s, indent + "    ", v.circles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUMANOID_LEAGUE_MSGS_MESSAGE_LINEINFORMATIONINIMAGE_H
