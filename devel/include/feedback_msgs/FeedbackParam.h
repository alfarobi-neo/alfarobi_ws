// Generated by gencpp from file feedback_msgs/FeedbackParam.msg
// DO NOT EDIT!


#ifndef FEEDBACK_MSGS_MESSAGE_FEEDBACKPARAM_H
#define FEEDBACK_MSGS_MESSAGE_FEEDBACKPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace feedback_msgs
{
template <class ContainerAllocator>
struct FeedbackParam_
{
  typedef FeedbackParam_<ContainerAllocator> Type;

  FeedbackParam_()
    : Body_Height(0.0)
    , Body_Tilt(0.0)
    , Leg_X(0.0)
    , Leg_Y(0.0)
    , Leg_Z(0.0)
    , Leg_R_Z(0.0)
    , Leg_L_Z(0.0)
    , R_Roll(0.0)
    , L_Roll(0.0)
    , Setpoint_Pitch(0.0)
    , Setpoint_Roll(0.0)
    , Gain_Angle_Pitch(0.0)
    , Gain_Angle_Roll(0.0)
    , Gain_Velocity_Pitch(0.0)
    , Gain_Velocity_Roll(0.0)
    , Gain_Integral_Pitch(0.0)
    , Gain_Integral_Roll(0.0)  {
    }
  FeedbackParam_(const ContainerAllocator& _alloc)
    : Body_Height(0.0)
    , Body_Tilt(0.0)
    , Leg_X(0.0)
    , Leg_Y(0.0)
    , Leg_Z(0.0)
    , Leg_R_Z(0.0)
    , Leg_L_Z(0.0)
    , R_Roll(0.0)
    , L_Roll(0.0)
    , Setpoint_Pitch(0.0)
    , Setpoint_Roll(0.0)
    , Gain_Angle_Pitch(0.0)
    , Gain_Angle_Roll(0.0)
    , Gain_Velocity_Pitch(0.0)
    , Gain_Velocity_Roll(0.0)
    , Gain_Integral_Pitch(0.0)
    , Gain_Integral_Roll(0.0)  {
  (void)_alloc;
    }



   typedef float _Body_Height_type;
  _Body_Height_type Body_Height;

   typedef float _Body_Tilt_type;
  _Body_Tilt_type Body_Tilt;

   typedef float _Leg_X_type;
  _Leg_X_type Leg_X;

   typedef float _Leg_Y_type;
  _Leg_Y_type Leg_Y;

   typedef float _Leg_Z_type;
  _Leg_Z_type Leg_Z;

   typedef float _Leg_R_Z_type;
  _Leg_R_Z_type Leg_R_Z;

   typedef float _Leg_L_Z_type;
  _Leg_L_Z_type Leg_L_Z;

   typedef float _R_Roll_type;
  _R_Roll_type R_Roll;

   typedef float _L_Roll_type;
  _L_Roll_type L_Roll;

   typedef float _Setpoint_Pitch_type;
  _Setpoint_Pitch_type Setpoint_Pitch;

   typedef float _Setpoint_Roll_type;
  _Setpoint_Roll_type Setpoint_Roll;

   typedef float _Gain_Angle_Pitch_type;
  _Gain_Angle_Pitch_type Gain_Angle_Pitch;

   typedef float _Gain_Angle_Roll_type;
  _Gain_Angle_Roll_type Gain_Angle_Roll;

   typedef float _Gain_Velocity_Pitch_type;
  _Gain_Velocity_Pitch_type Gain_Velocity_Pitch;

   typedef float _Gain_Velocity_Roll_type;
  _Gain_Velocity_Roll_type Gain_Velocity_Roll;

   typedef float _Gain_Integral_Pitch_type;
  _Gain_Integral_Pitch_type Gain_Integral_Pitch;

   typedef float _Gain_Integral_Roll_type;
  _Gain_Integral_Roll_type Gain_Integral_Roll;





  typedef boost::shared_ptr< ::feedback_msgs::FeedbackParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feedback_msgs::FeedbackParam_<ContainerAllocator> const> ConstPtr;

}; // struct FeedbackParam_

typedef ::feedback_msgs::FeedbackParam_<std::allocator<void> > FeedbackParam;

typedef boost::shared_ptr< ::feedback_msgs::FeedbackParam > FeedbackParamPtr;
typedef boost::shared_ptr< ::feedback_msgs::FeedbackParam const> FeedbackParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::feedback_msgs::FeedbackParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace feedback_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'feedback_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Msgs/feedback_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::feedback_msgs::FeedbackParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::feedback_msgs::FeedbackParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::feedback_msgs::FeedbackParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6dc619d19217c2ba9bca0b28f4e3fda";
  }

  static const char* value(const ::feedback_msgs::FeedbackParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6dc619d19217c2bULL;
  static const uint64_t static_value2 = 0xa9bca0b28f4e3fdaULL;
};

template<class ContainerAllocator>
struct DataType< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feedback_msgs/FeedbackParam";
  }

  static const char* value(const ::feedback_msgs::FeedbackParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Body_Height\n\
float32 Body_Tilt\n\
float32 Leg_X\n\
float32 Leg_Y\n\
float32 Leg_Z\n\
\n\
float32 Leg_R_Z\n\
float32 Leg_L_Z\n\
float32 R_Roll\n\
float32 L_Roll\n\
\n\
float32 Setpoint_Pitch\n\
float32 Setpoint_Roll\n\
\n\
float32 Gain_Angle_Pitch\n\
float32 Gain_Angle_Roll\n\
\n\
float32 Gain_Velocity_Pitch\n\
float32 Gain_Velocity_Roll\n\
\n\
float32 Gain_Integral_Pitch\n\
float32 Gain_Integral_Roll\n\
";
  }

  static const char* value(const ::feedback_msgs::FeedbackParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Body_Height);
      stream.next(m.Body_Tilt);
      stream.next(m.Leg_X);
      stream.next(m.Leg_Y);
      stream.next(m.Leg_Z);
      stream.next(m.Leg_R_Z);
      stream.next(m.Leg_L_Z);
      stream.next(m.R_Roll);
      stream.next(m.L_Roll);
      stream.next(m.Setpoint_Pitch);
      stream.next(m.Setpoint_Roll);
      stream.next(m.Gain_Angle_Pitch);
      stream.next(m.Gain_Angle_Roll);
      stream.next(m.Gain_Velocity_Pitch);
      stream.next(m.Gain_Velocity_Roll);
      stream.next(m.Gain_Integral_Pitch);
      stream.next(m.Gain_Integral_Roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeedbackParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::feedback_msgs::FeedbackParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::feedback_msgs::FeedbackParam_<ContainerAllocator>& v)
  {
    s << indent << "Body_Height: ";
    Printer<float>::stream(s, indent + "  ", v.Body_Height);
    s << indent << "Body_Tilt: ";
    Printer<float>::stream(s, indent + "  ", v.Body_Tilt);
    s << indent << "Leg_X: ";
    Printer<float>::stream(s, indent + "  ", v.Leg_X);
    s << indent << "Leg_Y: ";
    Printer<float>::stream(s, indent + "  ", v.Leg_Y);
    s << indent << "Leg_Z: ";
    Printer<float>::stream(s, indent + "  ", v.Leg_Z);
    s << indent << "Leg_R_Z: ";
    Printer<float>::stream(s, indent + "  ", v.Leg_R_Z);
    s << indent << "Leg_L_Z: ";
    Printer<float>::stream(s, indent + "  ", v.Leg_L_Z);
    s << indent << "R_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.R_Roll);
    s << indent << "L_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.L_Roll);
    s << indent << "Setpoint_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Setpoint_Pitch);
    s << indent << "Setpoint_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Setpoint_Roll);
    s << indent << "Gain_Angle_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Angle_Pitch);
    s << indent << "Gain_Angle_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Angle_Roll);
    s << indent << "Gain_Velocity_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Velocity_Pitch);
    s << indent << "Gain_Velocity_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Velocity_Roll);
    s << indent << "Gain_Integral_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Integral_Pitch);
    s << indent << "Gain_Integral_Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Gain_Integral_Roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FEEDBACK_MSGS_MESSAGE_FEEDBACKPARAM_H
