// Generated by gencpp from file op3_walking_module_msgs/WalkingParam.msg
// DO NOT EDIT!


#ifndef OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
#define OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace op3_walking_module_msgs
{
template <class ContainerAllocator>
struct WalkingParam_
{
  typedef WalkingParam_<ContainerAllocator> Type;

  WalkingParam_()
    : init_x_offset(0.0)
    , init_y_offset(0.0)
    , init_z_offset(0.0)
    , init_roll_offset(0.0)
    , init_pitch_offset(0.0)
    , init_yaw_offset(0.0)
    , r_x_offset(0.0)
    , r_y_offset(0.0)
    , r_z_offset(0.0)
    , r_roll_offset(0.0)
    , r_pitch_offset(0.0)
    , r_yaw_offset(0.0)
    , l_x_offset(0.0)
    , l_y_offset(0.0)
    , l_z_offset(0.0)
    , l_roll_offset(0.0)
    , l_pitch_offset(0.0)
    , l_yaw_offset(0.0)
    , period_time(0.0)
    , dsp_ratio(0.0)
    , step_fb_ratio(0.0)
    , x_move_amplitude(0.0)
    , y_move_amplitude(0.0)
    , z_move_amplitude(0.0)
    , angle_move_amplitude(0.0)
    , move_aim_on(false)
    , balance_enable(false)
    , balance_hip_roll_gain(0.0)
    , balance_knee_gain(0.0)
    , balance_ankle_roll_gain(0.0)
    , balance_ankle_pitch_gain(0.0)
    , y_swap_amplitude(0.0)
    , z_swap_amplitude(0.0)
    , arm_swing_gain(0.0)
    , pelvis_offset(0.0)
    , hip_pitch_offset(0.0)
    , KP_P(0.0)
    , KD_P(0.0)
    , KI_P(0.0)
    , D_ANKLE_P(0.0)
    , D_KNEE(0.0)
    , D_HIP_P(0.0)
    , KP_R(0.0)
    , KD_R(0.0)
    , KI_R(0.0)
    , D_ANKLE_R(0.0)
    , D_HIP_R(0.0)
    , shoulder_gain(0.0)
    , p_gain(0)
    , i_gain(0)
    , d_gain(0)
    , zmp_vx(0.0)
    , zmp_vy(0.0)
    , zmp_vphi(0.0)
    , zmp_useGyro(false)  {
    }
  WalkingParam_(const ContainerAllocator& _alloc)
    : init_x_offset(0.0)
    , init_y_offset(0.0)
    , init_z_offset(0.0)
    , init_roll_offset(0.0)
    , init_pitch_offset(0.0)
    , init_yaw_offset(0.0)
    , r_x_offset(0.0)
    , r_y_offset(0.0)
    , r_z_offset(0.0)
    , r_roll_offset(0.0)
    , r_pitch_offset(0.0)
    , r_yaw_offset(0.0)
    , l_x_offset(0.0)
    , l_y_offset(0.0)
    , l_z_offset(0.0)
    , l_roll_offset(0.0)
    , l_pitch_offset(0.0)
    , l_yaw_offset(0.0)
    , period_time(0.0)
    , dsp_ratio(0.0)
    , step_fb_ratio(0.0)
    , x_move_amplitude(0.0)
    , y_move_amplitude(0.0)
    , z_move_amplitude(0.0)
    , angle_move_amplitude(0.0)
    , move_aim_on(false)
    , balance_enable(false)
    , balance_hip_roll_gain(0.0)
    , balance_knee_gain(0.0)
    , balance_ankle_roll_gain(0.0)
    , balance_ankle_pitch_gain(0.0)
    , y_swap_amplitude(0.0)
    , z_swap_amplitude(0.0)
    , arm_swing_gain(0.0)
    , pelvis_offset(0.0)
    , hip_pitch_offset(0.0)
    , KP_P(0.0)
    , KD_P(0.0)
    , KI_P(0.0)
    , D_ANKLE_P(0.0)
    , D_KNEE(0.0)
    , D_HIP_P(0.0)
    , KP_R(0.0)
    , KD_R(0.0)
    , KI_R(0.0)
    , D_ANKLE_R(0.0)
    , D_HIP_R(0.0)
    , shoulder_gain(0.0)
    , p_gain(0)
    , i_gain(0)
    , d_gain(0)
    , zmp_vx(0.0)
    , zmp_vy(0.0)
    , zmp_vphi(0.0)
    , zmp_useGyro(false)  {
  (void)_alloc;
    }



   typedef float _init_x_offset_type;
  _init_x_offset_type init_x_offset;

   typedef float _init_y_offset_type;
  _init_y_offset_type init_y_offset;

   typedef float _init_z_offset_type;
  _init_z_offset_type init_z_offset;

   typedef float _init_roll_offset_type;
  _init_roll_offset_type init_roll_offset;

   typedef float _init_pitch_offset_type;
  _init_pitch_offset_type init_pitch_offset;

   typedef float _init_yaw_offset_type;
  _init_yaw_offset_type init_yaw_offset;

   typedef float _r_x_offset_type;
  _r_x_offset_type r_x_offset;

   typedef float _r_y_offset_type;
  _r_y_offset_type r_y_offset;

   typedef float _r_z_offset_type;
  _r_z_offset_type r_z_offset;

   typedef float _r_roll_offset_type;
  _r_roll_offset_type r_roll_offset;

   typedef float _r_pitch_offset_type;
  _r_pitch_offset_type r_pitch_offset;

   typedef float _r_yaw_offset_type;
  _r_yaw_offset_type r_yaw_offset;

   typedef float _l_x_offset_type;
  _l_x_offset_type l_x_offset;

   typedef float _l_y_offset_type;
  _l_y_offset_type l_y_offset;

   typedef float _l_z_offset_type;
  _l_z_offset_type l_z_offset;

   typedef float _l_roll_offset_type;
  _l_roll_offset_type l_roll_offset;

   typedef float _l_pitch_offset_type;
  _l_pitch_offset_type l_pitch_offset;

   typedef float _l_yaw_offset_type;
  _l_yaw_offset_type l_yaw_offset;

   typedef float _period_time_type;
  _period_time_type period_time;

   typedef float _dsp_ratio_type;
  _dsp_ratio_type dsp_ratio;

   typedef float _step_fb_ratio_type;
  _step_fb_ratio_type step_fb_ratio;

   typedef float _x_move_amplitude_type;
  _x_move_amplitude_type x_move_amplitude;

   typedef float _y_move_amplitude_type;
  _y_move_amplitude_type y_move_amplitude;

   typedef float _z_move_amplitude_type;
  _z_move_amplitude_type z_move_amplitude;

   typedef float _angle_move_amplitude_type;
  _angle_move_amplitude_type angle_move_amplitude;

   typedef uint8_t _move_aim_on_type;
  _move_aim_on_type move_aim_on;

   typedef uint8_t _balance_enable_type;
  _balance_enable_type balance_enable;

   typedef float _balance_hip_roll_gain_type;
  _balance_hip_roll_gain_type balance_hip_roll_gain;

   typedef float _balance_knee_gain_type;
  _balance_knee_gain_type balance_knee_gain;

   typedef float _balance_ankle_roll_gain_type;
  _balance_ankle_roll_gain_type balance_ankle_roll_gain;

   typedef float _balance_ankle_pitch_gain_type;
  _balance_ankle_pitch_gain_type balance_ankle_pitch_gain;

   typedef float _y_swap_amplitude_type;
  _y_swap_amplitude_type y_swap_amplitude;

   typedef float _z_swap_amplitude_type;
  _z_swap_amplitude_type z_swap_amplitude;

   typedef float _arm_swing_gain_type;
  _arm_swing_gain_type arm_swing_gain;

   typedef float _pelvis_offset_type;
  _pelvis_offset_type pelvis_offset;

   typedef float _hip_pitch_offset_type;
  _hip_pitch_offset_type hip_pitch_offset;

   typedef float _KP_P_type;
  _KP_P_type KP_P;

   typedef float _KD_P_type;
  _KD_P_type KD_P;

   typedef float _KI_P_type;
  _KI_P_type KI_P;

   typedef float _D_ANKLE_P_type;
  _D_ANKLE_P_type D_ANKLE_P;

   typedef float _D_KNEE_type;
  _D_KNEE_type D_KNEE;

   typedef float _D_HIP_P_type;
  _D_HIP_P_type D_HIP_P;

   typedef float _KP_R_type;
  _KP_R_type KP_R;

   typedef float _KD_R_type;
  _KD_R_type KD_R;

   typedef float _KI_R_type;
  _KI_R_type KI_R;

   typedef float _D_ANKLE_R_type;
  _D_ANKLE_R_type D_ANKLE_R;

   typedef float _D_HIP_R_type;
  _D_HIP_R_type D_HIP_R;

   typedef float _shoulder_gain_type;
  _shoulder_gain_type shoulder_gain;

   typedef int32_t _p_gain_type;
  _p_gain_type p_gain;

   typedef int32_t _i_gain_type;
  _i_gain_type i_gain;

   typedef int32_t _d_gain_type;
  _d_gain_type d_gain;

   typedef float _zmp_vx_type;
  _zmp_vx_type zmp_vx;

   typedef float _zmp_vy_type;
  _zmp_vy_type zmp_vy;

   typedef float _zmp_vphi_type;
  _zmp_vphi_type zmp_vphi;

   typedef uint8_t _zmp_useGyro_type;
  _zmp_useGyro_type zmp_useGyro;





  typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const> ConstPtr;

}; // struct WalkingParam_

typedef ::op3_walking_module_msgs::WalkingParam_<std::allocator<void> > WalkingParam;

typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam > WalkingParamPtr;
typedef boost::shared_ptr< ::op3_walking_module_msgs::WalkingParam const> WalkingParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator1> & lhs, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator2> & rhs)
{
  return lhs.init_x_offset == rhs.init_x_offset &&
    lhs.init_y_offset == rhs.init_y_offset &&
    lhs.init_z_offset == rhs.init_z_offset &&
    lhs.init_roll_offset == rhs.init_roll_offset &&
    lhs.init_pitch_offset == rhs.init_pitch_offset &&
    lhs.init_yaw_offset == rhs.init_yaw_offset &&
    lhs.r_x_offset == rhs.r_x_offset &&
    lhs.r_y_offset == rhs.r_y_offset &&
    lhs.r_z_offset == rhs.r_z_offset &&
    lhs.r_roll_offset == rhs.r_roll_offset &&
    lhs.r_pitch_offset == rhs.r_pitch_offset &&
    lhs.r_yaw_offset == rhs.r_yaw_offset &&
    lhs.l_x_offset == rhs.l_x_offset &&
    lhs.l_y_offset == rhs.l_y_offset &&
    lhs.l_z_offset == rhs.l_z_offset &&
    lhs.l_roll_offset == rhs.l_roll_offset &&
    lhs.l_pitch_offset == rhs.l_pitch_offset &&
    lhs.l_yaw_offset == rhs.l_yaw_offset &&
    lhs.period_time == rhs.period_time &&
    lhs.dsp_ratio == rhs.dsp_ratio &&
    lhs.step_fb_ratio == rhs.step_fb_ratio &&
    lhs.x_move_amplitude == rhs.x_move_amplitude &&
    lhs.y_move_amplitude == rhs.y_move_amplitude &&
    lhs.z_move_amplitude == rhs.z_move_amplitude &&
    lhs.angle_move_amplitude == rhs.angle_move_amplitude &&
    lhs.move_aim_on == rhs.move_aim_on &&
    lhs.balance_enable == rhs.balance_enable &&
    lhs.balance_hip_roll_gain == rhs.balance_hip_roll_gain &&
    lhs.balance_knee_gain == rhs.balance_knee_gain &&
    lhs.balance_ankle_roll_gain == rhs.balance_ankle_roll_gain &&
    lhs.balance_ankle_pitch_gain == rhs.balance_ankle_pitch_gain &&
    lhs.y_swap_amplitude == rhs.y_swap_amplitude &&
    lhs.z_swap_amplitude == rhs.z_swap_amplitude &&
    lhs.arm_swing_gain == rhs.arm_swing_gain &&
    lhs.pelvis_offset == rhs.pelvis_offset &&
    lhs.hip_pitch_offset == rhs.hip_pitch_offset &&
    lhs.KP_P == rhs.KP_P &&
    lhs.KD_P == rhs.KD_P &&
    lhs.KI_P == rhs.KI_P &&
    lhs.D_ANKLE_P == rhs.D_ANKLE_P &&
    lhs.D_KNEE == rhs.D_KNEE &&
    lhs.D_HIP_P == rhs.D_HIP_P &&
    lhs.KP_R == rhs.KP_R &&
    lhs.KD_R == rhs.KD_R &&
    lhs.KI_R == rhs.KI_R &&
    lhs.D_ANKLE_R == rhs.D_ANKLE_R &&
    lhs.D_HIP_R == rhs.D_HIP_R &&
    lhs.shoulder_gain == rhs.shoulder_gain &&
    lhs.p_gain == rhs.p_gain &&
    lhs.i_gain == rhs.i_gain &&
    lhs.d_gain == rhs.d_gain &&
    lhs.zmp_vx == rhs.zmp_vx &&
    lhs.zmp_vy == rhs.zmp_vy &&
    lhs.zmp_vphi == rhs.zmp_vphi &&
    lhs.zmp_useGyro == rhs.zmp_useGyro;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator1> & lhs, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace op3_walking_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29c5fd0a9fcd330b7de450bfe61e96dc";
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29c5fd0a9fcd330bULL;
  static const uint64_t static_value2 = 0x7de450bfe61e96dcULL;
};

template<class ContainerAllocator>
struct DataType< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "op3_walking_module_msgs/WalkingParam";
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "####### walking init pose #######\n"
"float32 init_x_offset\n"
"float32 init_y_offset\n"
"float32 init_z_offset\n"
"float32 init_roll_offset\n"
"float32 init_pitch_offset\n"
"float32 init_yaw_offset\n"
"float32 r_x_offset\n"
"float32 r_y_offset\n"
"float32 r_z_offset\n"
"float32 r_roll_offset\n"
"float32 r_pitch_offset\n"
"float32 r_yaw_offset\n"
"float32 l_x_offset\n"
"float32 l_y_offset\n"
"float32 l_z_offset\n"
"float32 l_roll_offset\n"
"float32 l_pitch_offset\n"
"float32 l_yaw_offset\n"
"\n"
"\n"
"####### time parameter #####\n"
"float32 period_time\n"
"float32 dsp_ratio\n"
"float32 step_fb_ratio\n"
"\n"
"########## walking parameter ########\n"
"float32 x_move_amplitude\n"
"float32 y_move_amplitude\n"
"float32 z_move_amplitude\n"
"float32 angle_move_amplitude\n"
"bool move_aim_on\n"
"\n"
"########## balance parameter ##########\n"
"bool balance_enable\n"
"float32 balance_hip_roll_gain\n"
"float32 balance_knee_gain\n"
"float32 balance_ankle_roll_gain\n"
"float32 balance_ankle_pitch_gain\n"
"float32 y_swap_amplitude\n"
"float32 z_swap_amplitude\n"
"float32 arm_swing_gain\n"
"float32 pelvis_offset\n"
"float32 hip_pitch_offset\n"
"\n"
"########## balance parameter ##########\n"
"float32 KP_P\n"
"float32 KD_P\n"
"float32 KI_P\n"
"float32 D_ANKLE_P\n"
"float32 D_KNEE\n"
"float32 D_HIP_P\n"
"\n"
"float32 KP_R\n"
"float32 KD_R\n"
"float32 KI_R\n"
"float32 D_ANKLE_R\n"
"float32 D_HIP_R\n"
"float32 shoulder_gain\n"
"\n"
"########## gain parameter ##########\n"
"int32 p_gain\n"
"int32 i_gain\n"
"int32 d_gain\n"
"\n"
"########## ZMP WALKING BIT-BOTS ###########\n"
"float32 zmp_vx\n"
"float32 zmp_vy\n"
"float32 zmp_vphi\n"
"\n"
"bool zmp_useGyro\n"
;
  }

  static const char* value(const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.init_x_offset);
      stream.next(m.init_y_offset);
      stream.next(m.init_z_offset);
      stream.next(m.init_roll_offset);
      stream.next(m.init_pitch_offset);
      stream.next(m.init_yaw_offset);
      stream.next(m.r_x_offset);
      stream.next(m.r_y_offset);
      stream.next(m.r_z_offset);
      stream.next(m.r_roll_offset);
      stream.next(m.r_pitch_offset);
      stream.next(m.r_yaw_offset);
      stream.next(m.l_x_offset);
      stream.next(m.l_y_offset);
      stream.next(m.l_z_offset);
      stream.next(m.l_roll_offset);
      stream.next(m.l_pitch_offset);
      stream.next(m.l_yaw_offset);
      stream.next(m.period_time);
      stream.next(m.dsp_ratio);
      stream.next(m.step_fb_ratio);
      stream.next(m.x_move_amplitude);
      stream.next(m.y_move_amplitude);
      stream.next(m.z_move_amplitude);
      stream.next(m.angle_move_amplitude);
      stream.next(m.move_aim_on);
      stream.next(m.balance_enable);
      stream.next(m.balance_hip_roll_gain);
      stream.next(m.balance_knee_gain);
      stream.next(m.balance_ankle_roll_gain);
      stream.next(m.balance_ankle_pitch_gain);
      stream.next(m.y_swap_amplitude);
      stream.next(m.z_swap_amplitude);
      stream.next(m.arm_swing_gain);
      stream.next(m.pelvis_offset);
      stream.next(m.hip_pitch_offset);
      stream.next(m.KP_P);
      stream.next(m.KD_P);
      stream.next(m.KI_P);
      stream.next(m.D_ANKLE_P);
      stream.next(m.D_KNEE);
      stream.next(m.D_HIP_P);
      stream.next(m.KP_R);
      stream.next(m.KD_R);
      stream.next(m.KI_R);
      stream.next(m.D_ANKLE_R);
      stream.next(m.D_HIP_R);
      stream.next(m.shoulder_gain);
      stream.next(m.p_gain);
      stream.next(m.i_gain);
      stream.next(m.d_gain);
      stream.next(m.zmp_vx);
      stream.next(m.zmp_vy);
      stream.next(m.zmp_vphi);
      stream.next(m.zmp_useGyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkingParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::op3_walking_module_msgs::WalkingParam_<ContainerAllocator>& v)
  {
    s << indent << "init_x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_x_offset);
    s << indent << "init_y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_y_offset);
    s << indent << "init_z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_z_offset);
    s << indent << "init_roll_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_roll_offset);
    s << indent << "init_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_pitch_offset);
    s << indent << "init_yaw_offset: ";
    Printer<float>::stream(s, indent + "  ", v.init_yaw_offset);
    s << indent << "r_x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_x_offset);
    s << indent << "r_y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_y_offset);
    s << indent << "r_z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_z_offset);
    s << indent << "r_roll_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_roll_offset);
    s << indent << "r_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_pitch_offset);
    s << indent << "r_yaw_offset: ";
    Printer<float>::stream(s, indent + "  ", v.r_yaw_offset);
    s << indent << "l_x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_x_offset);
    s << indent << "l_y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_y_offset);
    s << indent << "l_z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_z_offset);
    s << indent << "l_roll_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_roll_offset);
    s << indent << "l_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_pitch_offset);
    s << indent << "l_yaw_offset: ";
    Printer<float>::stream(s, indent + "  ", v.l_yaw_offset);
    s << indent << "period_time: ";
    Printer<float>::stream(s, indent + "  ", v.period_time);
    s << indent << "dsp_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.dsp_ratio);
    s << indent << "step_fb_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.step_fb_ratio);
    s << indent << "x_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.x_move_amplitude);
    s << indent << "y_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.y_move_amplitude);
    s << indent << "z_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.z_move_amplitude);
    s << indent << "angle_move_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.angle_move_amplitude);
    s << indent << "move_aim_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.move_aim_on);
    s << indent << "balance_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.balance_enable);
    s << indent << "balance_hip_roll_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_hip_roll_gain);
    s << indent << "balance_knee_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_knee_gain);
    s << indent << "balance_ankle_roll_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_ankle_roll_gain);
    s << indent << "balance_ankle_pitch_gain: ";
    Printer<float>::stream(s, indent + "  ", v.balance_ankle_pitch_gain);
    s << indent << "y_swap_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.y_swap_amplitude);
    s << indent << "z_swap_amplitude: ";
    Printer<float>::stream(s, indent + "  ", v.z_swap_amplitude);
    s << indent << "arm_swing_gain: ";
    Printer<float>::stream(s, indent + "  ", v.arm_swing_gain);
    s << indent << "pelvis_offset: ";
    Printer<float>::stream(s, indent + "  ", v.pelvis_offset);
    s << indent << "hip_pitch_offset: ";
    Printer<float>::stream(s, indent + "  ", v.hip_pitch_offset);
    s << indent << "KP_P: ";
    Printer<float>::stream(s, indent + "  ", v.KP_P);
    s << indent << "KD_P: ";
    Printer<float>::stream(s, indent + "  ", v.KD_P);
    s << indent << "KI_P: ";
    Printer<float>::stream(s, indent + "  ", v.KI_P);
    s << indent << "D_ANKLE_P: ";
    Printer<float>::stream(s, indent + "  ", v.D_ANKLE_P);
    s << indent << "D_KNEE: ";
    Printer<float>::stream(s, indent + "  ", v.D_KNEE);
    s << indent << "D_HIP_P: ";
    Printer<float>::stream(s, indent + "  ", v.D_HIP_P);
    s << indent << "KP_R: ";
    Printer<float>::stream(s, indent + "  ", v.KP_R);
    s << indent << "KD_R: ";
    Printer<float>::stream(s, indent + "  ", v.KD_R);
    s << indent << "KI_R: ";
    Printer<float>::stream(s, indent + "  ", v.KI_R);
    s << indent << "D_ANKLE_R: ";
    Printer<float>::stream(s, indent + "  ", v.D_ANKLE_R);
    s << indent << "D_HIP_R: ";
    Printer<float>::stream(s, indent + "  ", v.D_HIP_R);
    s << indent << "shoulder_gain: ";
    Printer<float>::stream(s, indent + "  ", v.shoulder_gain);
    s << indent << "p_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.p_gain);
    s << indent << "i_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i_gain);
    s << indent << "d_gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.d_gain);
    s << indent << "zmp_vx: ";
    Printer<float>::stream(s, indent + "  ", v.zmp_vx);
    s << indent << "zmp_vy: ";
    Printer<float>::stream(s, indent + "  ", v.zmp_vy);
    s << indent << "zmp_vphi: ";
    Printer<float>::stream(s, indent + "  ", v.zmp_vphi);
    s << indent << "zmp_useGyro: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zmp_useGyro);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OP3_WALKING_MODULE_MSGS_MESSAGE_WALKINGPARAM_H
