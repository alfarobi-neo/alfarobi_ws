// Generated by gencpp from file quintic_walk_msgs/GetWalkingParamResponse.msg
// DO NOT EDIT!


#ifndef QUINTIC_WALK_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H
#define QUINTIC_WALK_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <quintic_walk_msgs/WalkingParam.h>

namespace quintic_walk_msgs
{
template <class ContainerAllocator>
struct GetWalkingParamResponse_
{
  typedef GetWalkingParamResponse_<ContainerAllocator> Type;

  GetWalkingParamResponse_()
    : parameters()  {
    }
  GetWalkingParamResponse_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef  ::quintic_walk_msgs::WalkingParam_<ContainerAllocator>  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetWalkingParamResponse_

typedef ::quintic_walk_msgs::GetWalkingParamResponse_<std::allocator<void> > GetWalkingParamResponse;

typedef boost::shared_ptr< ::quintic_walk_msgs::GetWalkingParamResponse > GetWalkingParamResponsePtr;
typedef boost::shared_ptr< ::quintic_walk_msgs::GetWalkingParamResponse const> GetWalkingParamResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator1> & lhs, const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator2> & rhs)
{
  return lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator1> & lhs, const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quintic_walk_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8e3c9187b2219005ed324e21ce9d8a0";
  }

  static const char* value(const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8e3c9187b221900ULL;
  static const uint64_t static_value2 = 0x5ed324e21ce9d8a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quintic_walk_msgs/GetWalkingParamResponse";
  }

  static const char* value(const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "WalkingParam    parameters\n"
"\n"
"================================================================================\n"
"MSG: quintic_walk_msgs/WalkingParam\n"
"float32 freq\n"
"float32 doubleSupportRatio\n"
"float32 footDistance\n"
"float32 footRise\n"
"float32 footPutDownZOffset\n"
"float32 footPutDownPhase\n"
"float32 footApexPhase\n"
"float32 footOvershootRatio\n"
"float32 footOvershootPhase\n"
"float32 trunkHeight\n"
"float32 trunkPitch\n"
"float32 trunkPhase\n"
"float32 trunkXOffset\n"
"float32 trunkYOffset\n"
"float32 trunkSwing\n"
"float32 trunkPause\n"
"float32 trunkXOffsetPCoefForward\n"
"float32 trunkXOffsetPCoefTurn\n"
"float32 trunkPitchPCoefForward\n"
"float32 trunkPitchPCoefTurn\n"
"bool trunkYOnlyInDoubleSupport\n"
"\n"
"float32 XMove\n"
"float32 YMove\n"
"float32 ZMove\n"
"string mode\n"
"bool tuning\n"
"\n"
"float32 D_ANKLE_P_qw\n"
"float32 D_KNEE_qw\n"
"float32 D_HIP_P_qw\n"
"\n"
"\n"
"float32 KP_P_qw\n"
"float32 KD_P_qw\n"
"float32 KI_P_qw\n"
"\n"
"\n"
"\n"
"float32 ShoulderGain_qw\n"
"float32 setpointPitch\n"
"float32 pitch_error_tol\n"
"\n"
"float32 KP_X_qw\n"
"float32 KD_X_qw\n"
"float32 KI_X_qw\n"
"\n"
"\n"
"float32 Angle_0\n"
"float32 Angle_1\n"
"float32 Angle_2\n"
"float32 Angle_3\n"
"float32 Angle_4\n"
"\n"
"float32 KD_0\n"
"float32 KD_1\n"
"float32 KD_2\n"
"float32 KD_3\n"
"float32 KD_4\n"
"\n"
"float32 Gyro_0\n"
"float32 Gyro_1\n"
"float32 Gyro_2\n"
"float32 Gyro_3\n"
"float32 Gyro_4\n"
"\n"
"float32 KP_0\n"
"float32 KP_1\n"
"float32 KP_2\n"
"float32 KP_3\n"
"float32 KP_4\n"
"\n"
"\n"
;
  }

  static const char* value(const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetWalkingParamResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quintic_walk_msgs::GetWalkingParamResponse_<ContainerAllocator>& v)
  {
    s << indent << "parameters: ";
    s << std::endl;
    Printer< ::quintic_walk_msgs::WalkingParam_<ContainerAllocator> >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUINTIC_WALK_MSGS_MESSAGE_GETWALKINGPARAMRESPONSE_H
