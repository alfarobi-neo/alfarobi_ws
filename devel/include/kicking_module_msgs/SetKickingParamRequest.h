// Generated by gencpp from file kicking_module_msgs/SetKickingParamRequest.msg
// DO NOT EDIT!


#ifndef KICKING_MODULE_MSGS_MESSAGE_SETKICKINGPARAMREQUEST_H
#define KICKING_MODULE_MSGS_MESSAGE_SETKICKINGPARAMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kicking_module_msgs/KickingParam.h>

namespace kicking_module_msgs
{
template <class ContainerAllocator>
struct SetKickingParamRequest_
{
  typedef SetKickingParamRequest_<ContainerAllocator> Type;

  SetKickingParamRequest_()
    : parameters()  {
    }
  SetKickingParamRequest_(const ContainerAllocator& _alloc)
    : parameters(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kicking_module_msgs::KickingParam_<ContainerAllocator>  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetKickingParamRequest_

typedef ::kicking_module_msgs::SetKickingParamRequest_<std::allocator<void> > SetKickingParamRequest;

typedef boost::shared_ptr< ::kicking_module_msgs::SetKickingParamRequest > SetKickingParamRequestPtr;
typedef boost::shared_ptr< ::kicking_module_msgs::SetKickingParamRequest const> SetKickingParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator1> & lhs, const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator1> & lhs, const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kicking_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbede3e92a48cb3c6ddb9a7add8ea228";
  }

  static const char* value(const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbede3e92a48cb3cULL;
  static const uint64_t static_value2 = 0x6ddb9a7add8ea228ULL;
};

template<class ContainerAllocator>
struct DataType< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kicking_module_msgs/SetKickingParamRequest";
  }

  static const char* value(const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "KickingParam    parameters\n"
"\n"
"================================================================================\n"
"MSG: kicking_module_msgs/KickingParam\n"
"float32 Torso_X\n"
"float32 Torso_Y\n"
"float32 Torso_Z\n"
"float32 L_Shift_X\n"
"float32 L_Shift_Y\n"
"float32 L_Shift_Z\n"
"float32 R_Shift_X\n"
"float32 R_Shift_Y\n"
"float32 R_Shift_Z\n"
"float32 L_Lift_X\n"
"float32 L_Lift_Y\n"
"float32 L_Lift_Z\n"
"float32 R_Lift_X\n"
"float32 R_Lift_Y\n"
"float32 R_Lift_Z\n"
"float32 L_Swing_X\n"
"float32 L_Swing_Y\n"
"float32 L_Swing_Z\n"
"float32 R_Swing_X\n"
"float32 R_Swing_Y\n"
"float32 R_Swing_Z\n"
"float32 L_Retract_X\n"
"float32 L_Retract_Y\n"
"float32 L_Retract_Z\n"
"float32 R_Retract_X\n"
"float32 R_Retract_Y\n"
"float32 R_Retract_Z\n"
"float32 Torso_Pitch\n"
"float32 Shift_Roll\n"
"float32 Lift_Roll\n"
"float32 Lift_Pitch\n"
"float32 Swing_Roll\n"
"float32 Swing_Pitch\n"
"float32 Retract_Roll\n"
"float32 Retract_Pitch\n"
"float32 SHIFT_TIME\n"
"float32 LIFT_TIME\n"
"float32 SWING_TIME\n"
"float32 RETRACT_TIME\n"
"float32 LANDING_TIME\n"
"float32 FINISHED_TIME\n"
;
  }

  static const char* value(const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetKickingParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kicking_module_msgs::SetKickingParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "parameters: ";
    s << std::endl;
    Printer< ::kicking_module_msgs::KickingParam_<ContainerAllocator> >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KICKING_MODULE_MSGS_MESSAGE_SETKICKINGPARAMREQUEST_H
