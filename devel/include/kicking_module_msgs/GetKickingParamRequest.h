// Generated by gencpp from file kicking_module_msgs/GetKickingParamRequest.msg
// DO NOT EDIT!


#ifndef KICKING_MODULE_MSGS_MESSAGE_GETKICKINGPARAMREQUEST_H
#define KICKING_MODULE_MSGS_MESSAGE_GETKICKINGPARAMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kicking_module_msgs
{
template <class ContainerAllocator>
struct GetKickingParamRequest_
{
  typedef GetKickingParamRequest_<ContainerAllocator> Type;

  GetKickingParamRequest_()
    : get_param(false)  {
    }
  GetKickingParamRequest_(const ContainerAllocator& _alloc)
    : get_param(false)  {
  (void)_alloc;
    }



   typedef uint8_t _get_param_type;
  _get_param_type get_param;





  typedef boost::shared_ptr< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetKickingParamRequest_

typedef ::kicking_module_msgs::GetKickingParamRequest_<std::allocator<void> > GetKickingParamRequest;

typedef boost::shared_ptr< ::kicking_module_msgs::GetKickingParamRequest > GetKickingParamRequestPtr;
typedef boost::shared_ptr< ::kicking_module_msgs::GetKickingParamRequest const> GetKickingParamRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator1> & lhs, const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get_param == rhs.get_param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator1> & lhs, const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kicking_module_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d964a0520d7b14bf821ec75afc464385";
  }

  static const char* value(const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd964a0520d7b14bfULL;
  static const uint64_t static_value2 = 0x821ec75afc464385ULL;
};

template<class ContainerAllocator>
struct DataType< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kicking_module_msgs/GetKickingParamRequest";
  }

  static const char* value(const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool            get_param\n"
;
  }

  static const char* value(const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get_param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetKickingParamRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kicking_module_msgs::GetKickingParamRequest_<ContainerAllocator>& v)
  {
    s << indent << "get_param: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KICKING_MODULE_MSGS_MESSAGE_GETKICKINGPARAMREQUEST_H
