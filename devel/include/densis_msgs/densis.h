// Generated by gencpp from file densis_msgs/densis.msg
// DO NOT EDIT!


#ifndef DENSIS_MSGS_MESSAGE_DENSIS_H
#define DENSIS_MSGS_MESSAGE_DENSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace densis_msgs
{
template <class ContainerAllocator>
struct densis_
{
  typedef densis_<ContainerAllocator> Type;

  densis_()
    : IMUorientation()
    , IMUgyro()
    , COMLSSP()
    , COMRSSP()
    , COMDSP()
    , COMLSSPrpy()
    , COMRSSPrpy()
    , COMDSPrpy()
    , ZMPLSSP()
    , ZMPRSSP()
    , ZMPDSP()
    , LAnklePitch_velocityNow(0.0)
    , LAnklePitch_positionIK(0.0)
    , LAnklePitch_positionNow(0.0)
    , LAnklePitch_refPosFromPos(0.0)
    , RAnklePitch_velocityNow(0.0)
    , RAnklePitch_positionIK(0.0)
    , RAnklePitch_positionNow(0.0)
    , RAnklePitch_refPosFromPos(0.0)
    , COMDSPrpy_pitch_Est(0.0)
    , gyro_pitch_Est(0.0)
    , COMDSPrpy_pitch_Meas(0.0)
    , gyro_pitch_Meas(0.0)
    , gyro_pitch_Fil(0.0)
    , CP_0(0.0)
    , CP_1(0.0)
    , CP_2(0.0)
    , CP_3(0.0)  {
    }
  densis_(const ContainerAllocator& _alloc)
    : IMUorientation(_alloc)
    , IMUgyro(_alloc)
    , COMLSSP(_alloc)
    , COMRSSP(_alloc)
    , COMDSP(_alloc)
    , COMLSSPrpy(_alloc)
    , COMRSSPrpy(_alloc)
    , COMDSPrpy(_alloc)
    , ZMPLSSP(_alloc)
    , ZMPRSSP(_alloc)
    , ZMPDSP(_alloc)
    , LAnklePitch_velocityNow(0.0)
    , LAnklePitch_positionIK(0.0)
    , LAnklePitch_positionNow(0.0)
    , LAnklePitch_refPosFromPos(0.0)
    , RAnklePitch_velocityNow(0.0)
    , RAnklePitch_positionIK(0.0)
    , RAnklePitch_positionNow(0.0)
    , RAnklePitch_refPosFromPos(0.0)
    , COMDSPrpy_pitch_Est(0.0)
    , gyro_pitch_Est(0.0)
    , COMDSPrpy_pitch_Meas(0.0)
    , gyro_pitch_Meas(0.0)
    , gyro_pitch_Fil(0.0)
    , CP_0(0.0)
    , CP_1(0.0)
    , CP_2(0.0)
    , CP_3(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _IMUorientation_type;
  _IMUorientation_type IMUorientation;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _IMUgyro_type;
  _IMUgyro_type IMUgyro;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMLSSP_type;
  _COMLSSP_type COMLSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMRSSP_type;
  _COMRSSP_type COMRSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMDSP_type;
  _COMDSP_type COMDSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMLSSPrpy_type;
  _COMLSSPrpy_type COMLSSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMRSSPrpy_type;
  _COMRSSPrpy_type COMRSSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _COMDSPrpy_type;
  _COMDSPrpy_type COMDSPrpy;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPLSSP_type;
  _ZMPLSSP_type ZMPLSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPRSSP_type;
  _ZMPRSSP_type ZMPRSSP;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _ZMPDSP_type;
  _ZMPDSP_type ZMPDSP;

   typedef float _LAnklePitch_velocityNow_type;
  _LAnklePitch_velocityNow_type LAnklePitch_velocityNow;

   typedef float _LAnklePitch_positionIK_type;
  _LAnklePitch_positionIK_type LAnklePitch_positionIK;

   typedef float _LAnklePitch_positionNow_type;
  _LAnklePitch_positionNow_type LAnklePitch_positionNow;

   typedef float _LAnklePitch_refPosFromPos_type;
  _LAnklePitch_refPosFromPos_type LAnklePitch_refPosFromPos;

   typedef float _RAnklePitch_velocityNow_type;
  _RAnklePitch_velocityNow_type RAnklePitch_velocityNow;

   typedef float _RAnklePitch_positionIK_type;
  _RAnklePitch_positionIK_type RAnklePitch_positionIK;

   typedef float _RAnklePitch_positionNow_type;
  _RAnklePitch_positionNow_type RAnklePitch_positionNow;

   typedef float _RAnklePitch_refPosFromPos_type;
  _RAnklePitch_refPosFromPos_type RAnklePitch_refPosFromPos;

   typedef float _COMDSPrpy_pitch_Est_type;
  _COMDSPrpy_pitch_Est_type COMDSPrpy_pitch_Est;

   typedef float _gyro_pitch_Est_type;
  _gyro_pitch_Est_type gyro_pitch_Est;

   typedef float _COMDSPrpy_pitch_Meas_type;
  _COMDSPrpy_pitch_Meas_type COMDSPrpy_pitch_Meas;

   typedef float _gyro_pitch_Meas_type;
  _gyro_pitch_Meas_type gyro_pitch_Meas;

   typedef float _gyro_pitch_Fil_type;
  _gyro_pitch_Fil_type gyro_pitch_Fil;

   typedef float _CP_0_type;
  _CP_0_type CP_0;

   typedef float _CP_1_type;
  _CP_1_type CP_1;

   typedef float _CP_2_type;
  _CP_2_type CP_2;

   typedef float _CP_3_type;
  _CP_3_type CP_3;





  typedef boost::shared_ptr< ::densis_msgs::densis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::densis_msgs::densis_<ContainerAllocator> const> ConstPtr;

}; // struct densis_

typedef ::densis_msgs::densis_<std::allocator<void> > densis;

typedef boost::shared_ptr< ::densis_msgs::densis > densisPtr;
typedef boost::shared_ptr< ::densis_msgs::densis const> densisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::densis_msgs::densis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::densis_msgs::densis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::densis_msgs::densis_<ContainerAllocator1> & lhs, const ::densis_msgs::densis_<ContainerAllocator2> & rhs)
{
  return lhs.IMUorientation == rhs.IMUorientation &&
    lhs.IMUgyro == rhs.IMUgyro &&
    lhs.COMLSSP == rhs.COMLSSP &&
    lhs.COMRSSP == rhs.COMRSSP &&
    lhs.COMDSP == rhs.COMDSP &&
    lhs.COMLSSPrpy == rhs.COMLSSPrpy &&
    lhs.COMRSSPrpy == rhs.COMRSSPrpy &&
    lhs.COMDSPrpy == rhs.COMDSPrpy &&
    lhs.ZMPLSSP == rhs.ZMPLSSP &&
    lhs.ZMPRSSP == rhs.ZMPRSSP &&
    lhs.ZMPDSP == rhs.ZMPDSP &&
    lhs.LAnklePitch_velocityNow == rhs.LAnklePitch_velocityNow &&
    lhs.LAnklePitch_positionIK == rhs.LAnklePitch_positionIK &&
    lhs.LAnklePitch_positionNow == rhs.LAnklePitch_positionNow &&
    lhs.LAnklePitch_refPosFromPos == rhs.LAnklePitch_refPosFromPos &&
    lhs.RAnklePitch_velocityNow == rhs.RAnklePitch_velocityNow &&
    lhs.RAnklePitch_positionIK == rhs.RAnklePitch_positionIK &&
    lhs.RAnklePitch_positionNow == rhs.RAnklePitch_positionNow &&
    lhs.RAnklePitch_refPosFromPos == rhs.RAnklePitch_refPosFromPos &&
    lhs.COMDSPrpy_pitch_Est == rhs.COMDSPrpy_pitch_Est &&
    lhs.gyro_pitch_Est == rhs.gyro_pitch_Est &&
    lhs.COMDSPrpy_pitch_Meas == rhs.COMDSPrpy_pitch_Meas &&
    lhs.gyro_pitch_Meas == rhs.gyro_pitch_Meas &&
    lhs.gyro_pitch_Fil == rhs.gyro_pitch_Fil &&
    lhs.CP_0 == rhs.CP_0 &&
    lhs.CP_1 == rhs.CP_1 &&
    lhs.CP_2 == rhs.CP_2 &&
    lhs.CP_3 == rhs.CP_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::densis_msgs::densis_<ContainerAllocator1> & lhs, const ::densis_msgs::densis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace densis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::densis_msgs::densis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::densis_msgs::densis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::densis_msgs::densis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::densis_msgs::densis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::densis_msgs::densis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::densis_msgs::densis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::densis_msgs::densis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff16778aedf270b756c96df44fa2eccc";
  }

  static const char* value(const ::densis_msgs::densis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff16778aedf270b7ULL;
  static const uint64_t static_value2 = 0x56c96df44fa2ecccULL;
};

template<class ContainerAllocator>
struct DataType< ::densis_msgs::densis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "densis_msgs/densis";
  }

  static const char* value(const ::densis_msgs::densis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::densis_msgs::densis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point IMUorientation\n"
"geometry_msgs/Point IMUgyro\n"
"geometry_msgs/Point COMLSSP\n"
"geometry_msgs/Point COMRSSP\n"
"geometry_msgs/Point COMDSP\n"
"geometry_msgs/Point COMLSSPrpy\n"
"geometry_msgs/Point COMRSSPrpy\n"
"geometry_msgs/Point COMDSPrpy\n"
"geometry_msgs/Point ZMPLSSP\n"
"geometry_msgs/Point ZMPRSSP\n"
"geometry_msgs/Point ZMPDSP\n"
"\n"
"#geometry_msgs/Transform LAnklePitch\n"
"#geometry_msgs/Transform RAnklePitch\n"
"\n"
"float32 LAnklePitch_velocityNow  \n"
"float32 LAnklePitch_positionIK   \n"
"float32 LAnklePitch_positionNow  \n"
"float32 LAnklePitch_refPosFromPos \n"
"float32 RAnklePitch_velocityNow  \n"
"float32 RAnklePitch_positionIK   \n"
"float32 RAnklePitch_positionNow \n"
"float32 RAnklePitch_refPosFromPos\n"
"\n"
"float32 COMDSPrpy_pitch_Est\n"
"float32 gyro_pitch_Est\n"
"float32 COMDSPrpy_pitch_Meas\n"
"float32 gyro_pitch_Meas\n"
"float32 gyro_pitch_Fil\n"
"\n"
"float32 CP_0\n"
"float32 CP_1\n"
"float32 CP_2\n"
"float32 CP_3\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::densis_msgs::densis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::densis_msgs::densis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IMUorientation);
      stream.next(m.IMUgyro);
      stream.next(m.COMLSSP);
      stream.next(m.COMRSSP);
      stream.next(m.COMDSP);
      stream.next(m.COMLSSPrpy);
      stream.next(m.COMRSSPrpy);
      stream.next(m.COMDSPrpy);
      stream.next(m.ZMPLSSP);
      stream.next(m.ZMPRSSP);
      stream.next(m.ZMPDSP);
      stream.next(m.LAnklePitch_velocityNow);
      stream.next(m.LAnklePitch_positionIK);
      stream.next(m.LAnklePitch_positionNow);
      stream.next(m.LAnklePitch_refPosFromPos);
      stream.next(m.RAnklePitch_velocityNow);
      stream.next(m.RAnklePitch_positionIK);
      stream.next(m.RAnklePitch_positionNow);
      stream.next(m.RAnklePitch_refPosFromPos);
      stream.next(m.COMDSPrpy_pitch_Est);
      stream.next(m.gyro_pitch_Est);
      stream.next(m.COMDSPrpy_pitch_Meas);
      stream.next(m.gyro_pitch_Meas);
      stream.next(m.gyro_pitch_Fil);
      stream.next(m.CP_0);
      stream.next(m.CP_1);
      stream.next(m.CP_2);
      stream.next(m.CP_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct densis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::densis_msgs::densis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::densis_msgs::densis_<ContainerAllocator>& v)
  {
    s << indent << "IMUorientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.IMUorientation);
    s << indent << "IMUgyro: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.IMUgyro);
    s << indent << "COMLSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMLSSP);
    s << indent << "COMRSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMRSSP);
    s << indent << "COMDSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMDSP);
    s << indent << "COMLSSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMLSSPrpy);
    s << indent << "COMRSSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMRSSPrpy);
    s << indent << "COMDSPrpy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.COMDSPrpy);
    s << indent << "ZMPLSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPLSSP);
    s << indent << "ZMPRSSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPRSSP);
    s << indent << "ZMPDSP: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.ZMPDSP);
    s << indent << "LAnklePitch_velocityNow: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_velocityNow);
    s << indent << "LAnklePitch_positionIK: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_positionIK);
    s << indent << "LAnklePitch_positionNow: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_positionNow);
    s << indent << "LAnklePitch_refPosFromPos: ";
    Printer<float>::stream(s, indent + "  ", v.LAnklePitch_refPosFromPos);
    s << indent << "RAnklePitch_velocityNow: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_velocityNow);
    s << indent << "RAnklePitch_positionIK: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_positionIK);
    s << indent << "RAnklePitch_positionNow: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_positionNow);
    s << indent << "RAnklePitch_refPosFromPos: ";
    Printer<float>::stream(s, indent + "  ", v.RAnklePitch_refPosFromPos);
    s << indent << "COMDSPrpy_pitch_Est: ";
    Printer<float>::stream(s, indent + "  ", v.COMDSPrpy_pitch_Est);
    s << indent << "gyro_pitch_Est: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_pitch_Est);
    s << indent << "COMDSPrpy_pitch_Meas: ";
    Printer<float>::stream(s, indent + "  ", v.COMDSPrpy_pitch_Meas);
    s << indent << "gyro_pitch_Meas: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_pitch_Meas);
    s << indent << "gyro_pitch_Fil: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_pitch_Fil);
    s << indent << "CP_0: ";
    Printer<float>::stream(s, indent + "  ", v.CP_0);
    s << indent << "CP_1: ";
    Printer<float>::stream(s, indent + "  ", v.CP_1);
    s << indent << "CP_2: ";
    Printer<float>::stream(s, indent + "  ", v.CP_2);
    s << indent << "CP_3: ";
    Printer<float>::stream(s, indent + "  ", v.CP_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DENSIS_MSGS_MESSAGE_DENSIS_H
