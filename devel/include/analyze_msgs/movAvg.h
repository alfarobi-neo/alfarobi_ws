// Generated by gencpp from file analyze_msgs/movAvg.msg
// DO NOT EDIT!


#ifndef ANALYZE_MSGS_MESSAGE_MOVAVG_H
#define ANALYZE_MSGS_MESSAGE_MOVAVG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace analyze_msgs
{
template <class ContainerAllocator>
struct movAvg_
{
  typedef movAvg_<ContainerAllocator> Type;

  movAvg_()
    : Kp(0.0)
    , Kd(0.0)
    , Ankle(0.0)
    , gyr_y_aft(0.0)  {
    }
  movAvg_(const ContainerAllocator& _alloc)
    : Kp(0.0)
    , Kd(0.0)
    , Ankle(0.0)
    , gyr_y_aft(0.0)  {
  (void)_alloc;
    }



   typedef float _Kp_type;
  _Kp_type Kp;

   typedef float _Kd_type;
  _Kd_type Kd;

   typedef float _Ankle_type;
  _Ankle_type Ankle;

   typedef float _gyr_y_aft_type;
  _gyr_y_aft_type gyr_y_aft;





  typedef boost::shared_ptr< ::analyze_msgs::movAvg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::analyze_msgs::movAvg_<ContainerAllocator> const> ConstPtr;

}; // struct movAvg_

typedef ::analyze_msgs::movAvg_<std::allocator<void> > movAvg;

typedef boost::shared_ptr< ::analyze_msgs::movAvg > movAvgPtr;
typedef boost::shared_ptr< ::analyze_msgs::movAvg const> movAvgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::analyze_msgs::movAvg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::analyze_msgs::movAvg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace analyze_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'analyze_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Msgs/analyze_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::analyze_msgs::movAvg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::analyze_msgs::movAvg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::analyze_msgs::movAvg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::analyze_msgs::movAvg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::analyze_msgs::movAvg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::analyze_msgs::movAvg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::analyze_msgs::movAvg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b26380dcaf44460c112d4bf22253d83e";
  }

  static const char* value(const ::analyze_msgs::movAvg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb26380dcaf44460cULL;
  static const uint64_t static_value2 = 0x112d4bf22253d83eULL;
};

template<class ContainerAllocator>
struct DataType< ::analyze_msgs::movAvg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "analyze_msgs/movAvg";
  }

  static const char* value(const ::analyze_msgs::movAvg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::analyze_msgs::movAvg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Kp\n\
float32 Kd\n\
float32 Ankle\n\
float32 gyr_y_aft\n\
";
  }

  static const char* value(const ::analyze_msgs::movAvg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::analyze_msgs::movAvg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Kp);
      stream.next(m.Kd);
      stream.next(m.Ankle);
      stream.next(m.gyr_y_aft);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movAvg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::analyze_msgs::movAvg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::analyze_msgs::movAvg_<ContainerAllocator>& v)
  {
    s << indent << "Kp: ";
    Printer<float>::stream(s, indent + "  ", v.Kp);
    s << indent << "Kd: ";
    Printer<float>::stream(s, indent + "  ", v.Kd);
    s << indent << "Ankle: ";
    Printer<float>::stream(s, indent + "  ", v.Ankle);
    s << indent << "gyr_y_aft: ";
    Printer<float>::stream(s, indent + "  ", v.gyr_y_aft);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANALYZE_MSGS_MESSAGE_MOVAVG_H
