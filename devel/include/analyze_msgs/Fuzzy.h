// Generated by gencpp from file analyze_msgs/Fuzzy.msg
// DO NOT EDIT!


#ifndef ANALYZE_MSGS_MESSAGE_FUZZY_H
#define ANALYZE_MSGS_MESSAGE_FUZZY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace analyze_msgs
{
template <class ContainerAllocator>
struct Fuzzy_
{
  typedef Fuzzy_<ContainerAllocator> Type;

  Fuzzy_()
    : Cond(0)
    , Out(0.0)
    , Ori(0.0)
    , Gyr(0.0)  {
    }
  Fuzzy_(const ContainerAllocator& _alloc)
    : Cond(0)
    , Out(0.0)
    , Ori(0.0)
    , Gyr(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _Cond_type;
  _Cond_type Cond;

   typedef float _Out_type;
  _Out_type Out;

   typedef float _Ori_type;
  _Ori_type Ori;

   typedef float _Gyr_type;
  _Gyr_type Gyr;





  typedef boost::shared_ptr< ::analyze_msgs::Fuzzy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::analyze_msgs::Fuzzy_<ContainerAllocator> const> ConstPtr;

}; // struct Fuzzy_

typedef ::analyze_msgs::Fuzzy_<std::allocator<void> > Fuzzy;

typedef boost::shared_ptr< ::analyze_msgs::Fuzzy > FuzzyPtr;
typedef boost::shared_ptr< ::analyze_msgs::Fuzzy const> FuzzyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::analyze_msgs::Fuzzy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::analyze_msgs::Fuzzy_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace analyze_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'analyze_msgs': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Msgs/analyze_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::analyze_msgs::Fuzzy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::analyze_msgs::Fuzzy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::analyze_msgs::Fuzzy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dbe4ca5345b8d8e12609086d919c0bc";
  }

  static const char* value(const ::analyze_msgs::Fuzzy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dbe4ca5345b8d8eULL;
  static const uint64_t static_value2 = 0x12609086d919c0bcULL;
};

template<class ContainerAllocator>
struct DataType< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "analyze_msgs/Fuzzy";
  }

  static const char* value(const ::analyze_msgs::Fuzzy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Cond\n\
float32 Out\n\
float32 Ori\n\
float32 Gyr\n\
";
  }

  static const char* value(const ::analyze_msgs::Fuzzy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Cond);
      stream.next(m.Out);
      stream.next(m.Ori);
      stream.next(m.Gyr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fuzzy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::analyze_msgs::Fuzzy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::analyze_msgs::Fuzzy_<ContainerAllocator>& v)
  {
    s << indent << "Cond: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Cond);
    s << indent << "Out: ";
    Printer<float>::stream(s, indent + "  ", v.Out);
    s << indent << "Ori: ";
    Printer<float>::stream(s, indent + "  ", v.Ori);
    s << indent << "Gyr: ";
    Printer<float>::stream(s, indent + "  ", v.Gyr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANALYZE_MSGS_MESSAGE_FUZZY_H
