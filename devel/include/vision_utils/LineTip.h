// Generated by gencpp from file vision_utils/LineTip.msg
// DO NOT EDIT!


#ifndef VISION_UTILS_MESSAGE_LINETIP_H
#define VISION_UTILS_MESSAGE_LINETIP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vision_utils
{
template <class ContainerAllocator>
struct LineTip_
{
  typedef LineTip_<ContainerAllocator> Type;

  LineTip_()
    : tip1()
    , tip2()  {
    }
  LineTip_(const ContainerAllocator& _alloc)
    : tip1(_alloc)
    , tip2(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _tip1_type;
  _tip1_type tip1;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _tip2_type;
  _tip2_type tip2;





  typedef boost::shared_ptr< ::vision_utils::LineTip_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_utils::LineTip_<ContainerAllocator> const> ConstPtr;

}; // struct LineTip_

typedef ::vision_utils::LineTip_<std::allocator<void> > LineTip;

typedef boost::shared_ptr< ::vision_utils::LineTip > LineTipPtr;
typedef boost::shared_ptr< ::vision_utils::LineTip const> LineTipConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_utils::LineTip_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_utils::LineTip_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_utils

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vision_utils': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Vision/vision_utils/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_utils::LineTip_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_utils::LineTip_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_utils::LineTip_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_utils::LineTip_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_utils::LineTip_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_utils::LineTip_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_utils::LineTip_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf211aecfc01db9117c923c714f7014d";
  }

  static const char* value(const ::vision_utils::LineTip_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf211aecfc01db91ULL;
  static const uint64_t static_value2 = 0x17c923c714f7014dULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_utils::LineTip_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_utils/LineTip";
  }

  static const char* value(const ::vision_utils::LineTip_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_utils::LineTip_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] tip1\n\
geometry_msgs/Point[] tip2\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vision_utils::LineTip_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_utils::LineTip_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tip1);
      stream.next(m.tip2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineTip_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_utils::LineTip_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_utils::LineTip_<ContainerAllocator>& v)
  {
    s << indent << "tip1[]" << std::endl;
    for (size_t i = 0; i < v.tip1.size(); ++i)
    {
      s << indent << "  tip1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.tip1[i]);
    }
    s << indent << "tip2[]" << std::endl;
    for (size_t i = 0; i < v.tip2.size(); ++i)
    {
      s << indent << "  tip2[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.tip2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_UTILS_MESSAGE_LINETIP_H
