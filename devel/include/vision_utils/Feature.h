// Generated by gencpp from file vision_utils/Feature.msg
// DO NOT EDIT!


#ifndef VISION_UTILS_MESSAGE_FEATURE_H
#define VISION_UTILS_MESSAGE_FEATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_utils
{
template <class ContainerAllocator>
struct Feature_
{
  typedef Feature_<ContainerAllocator> Type;

  Feature_()
    : param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , orientation(0.0)
    , feature_type(0.0)  {
    }
  Feature_(const ContainerAllocator& _alloc)
    : param1(0.0)
    , param2(0.0)
    , param3(0.0)
    , param4(0.0)
    , orientation(0.0)
    , feature_type(0.0)  {
  (void)_alloc;
    }



   typedef float _param1_type;
  _param1_type param1;

   typedef float _param2_type;
  _param2_type param2;

   typedef float _param3_type;
  _param3_type param3;

   typedef float _param4_type;
  _param4_type param4;

   typedef float _orientation_type;
  _orientation_type orientation;

   typedef float _feature_type_type;
  _feature_type_type feature_type;





  typedef boost::shared_ptr< ::vision_utils::Feature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_utils::Feature_<ContainerAllocator> const> ConstPtr;

}; // struct Feature_

typedef ::vision_utils::Feature_<std::allocator<void> > Feature;

typedef boost::shared_ptr< ::vision_utils::Feature > FeaturePtr;
typedef boost::shared_ptr< ::vision_utils::Feature const> FeatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_utils::Feature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_utils::Feature_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision_utils

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'vision_utils': ['/home/alfarobi/alfarobi_ws/src/ALFAROBI-Vision/vision_utils/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision_utils::Feature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_utils::Feature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_utils::Feature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_utils::Feature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_utils::Feature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_utils::Feature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_utils::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82dbffcabd327fa650f6e5b36592a1a5";
  }

  static const char* value(const ::vision_utils::Feature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82dbffcabd327fa6ULL;
  static const uint64_t static_value2 = 0x50f6e5b36592a1a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_utils::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_utils/Feature";
  }

  static const char* value(const ::vision_utils::Feature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_utils::Feature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 param1\n\
float32 param2\n\
float32 param3\n\
float32 param4\n\
float32 orientation\n\
float32 feature_type\n\
";
  }

  static const char* value(const ::vision_utils::Feature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_utils::Feature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.param1);
      stream.next(m.param2);
      stream.next(m.param3);
      stream.next(m.param4);
      stream.next(m.orientation);
      stream.next(m.feature_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_utils::Feature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_utils::Feature_<ContainerAllocator>& v)
  {
    s << indent << "param1: ";
    Printer<float>::stream(s, indent + "  ", v.param1);
    s << indent << "param2: ";
    Printer<float>::stream(s, indent + "  ", v.param2);
    s << indent << "param3: ";
    Printer<float>::stream(s, indent + "  ", v.param3);
    s << indent << "param4: ";
    Printer<float>::stream(s, indent + "  ", v.param4);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
    s << indent << "feature_type: ";
    Printer<float>::stream(s, indent + "  ", v.feature_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_UTILS_MESSAGE_FEATURE_H
